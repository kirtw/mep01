== Grammar Structure in mep


Terms-
token  - appears in rule lists ruLst, either rule or terminal

rule  is a grammar rule, is given a unique rule-name, mnemonic
    rulename  is used in rule-lists, eg sum
    has possible multiple alternatives in the grammar, eg sum.1, sum.2
terminal has a name and is associated with a set of characters
    terminal-name occurs in rule lists, matches input chars

Each rule-alternative (eg sum.2) has a list (ruLst) of one or more tokens
ruLst  is an ordered list of tokens, either rules or terminals
    a rule is matched when all of the items in the ruLst are matched with input

A rule name may have one or more alternative ruLst's, eg sum has sum.1 and sum.2
    sum.1 has ruLst= sum,Psum,prod
    and sum.2 is just ruLst= prod

Note currently, rulenames are lower case, eg. sum
   but terminals start with Cap, eg Psum which is either of chars + or -
   
INs is a string of input characters to be parsed.
They may be preprocessed and given a terminal category for efficiency
   but this is not done in the Demo grammar.

Later, eg. in mumps, keywords may be identified by lexical preprocessing,
    and passed as input elements with a terminal-name.
    Lexical preprocessing is much more efficient than parsing.
    Eg. D and DO and d and do may be classified as CmdD, treated as terminal
    
The structure of the Compiled Grammar, GRk() etc. in vers ep4 is designed
    for efficiency and human readability and coding-human-readibility and debugging.
    eg mnemonic rule-names are used vs rule-number, a meaningless integer in Lua.
    mumps handles mnemonics as efficienctly as integer subscripts
    
The trickiest structure is managing multiple alternatives for a single rule
    ep4 uses a supplemental index  vs a subscripted data structure
    This is used in ^ep4
