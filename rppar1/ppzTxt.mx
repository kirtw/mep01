ppzTxt      Text removed

^ppPAR-
---
;*        
        D bln^dv3("L1")
        W:$X ! W "Tgrab:Processing ",grab,"  ",grun,"  tok#",Rn,"  tok:",tok,"/",toty,"  vs I:",tki,"=",TKc,!
        D pze^pps("Log End Tgran","QT,gran")
        G Q
        
----- PSH/POP replaced with recursive srs Tgrab, Tgran, Ttok

;;stkFL:grab,grun,gran,grulst,Rn_STK(STK)       
XE      D b^dv("Found end of input on term match","TKc,tki,grab,grabN,Rn")
        ;  ? what next
        Q
--
;*  STK()  stkFL   Write Stack   
WSTK  NEW Istk,gran,grab,grun,grnun,grulst,Rn  D stb^dv3("S","STK:4,gran:8,grulst:25")
      I 'STK W "Stack is empty",! Q
      F Istk=1:1:STK DO  ;
        .D GFL^kfm(stkFL)
        .D bln^dv3("S")
      W ! Q       
;*
PSH  ;;stkFL:grab,grun,gran,grulst,Rn_STK(STK)
     S STK=STK+1
     W:$X ! W "Psh onto Stack #",STK,"  grab:",grab,"  and gran:",gran,"  at Rn:",Rn,"   from grulst: <",grulst,"> ",!
       W " Now process tok:",tok,!
     D SFL^kfm(stkFL)
     Q
;*  : gran, Rn, grulst, gposr
POP  I STK<1 D bug^dv("POP too many, STK empty STK=0","STK") Q
     W:$X ! W "Done with grab:",grab,"  in POP."
     D GFL^kfm(stkFL) 
     S STK=STK-1
     W:$X ! W "Popped grab:",grab," at Rn:",Rn,"  ",!
     Q
------
;*  Removed from Sgran- OBS
      I grun>grnun DO  Q
         .S QB=QN  D b^dv("Log end of grun
         .D b^dv("Err not here, caller test un vs grnun","QB,QN,grun,grnun,grab")
         .S grun="",gran=""
      Q
----
;*
xNEWgrab W:$X ! W "NEWgrab starting from ",gran,"#",Rn," ->",tok,!
        D PSH
        S grab=tok,grun=1,Rn=1
        Q
xPASSgrab
        Q
;;stkFL:grab,grun,grulst,Rn_STK(STK) 
; log grab/grun  tkcs,tkce  grts,grte, rul-str'
xPASSgran D GFL^kfm("gropsr",granFL) ; GRc(gran,
        W:$X ! W "Finished lst of ",gran,"   ",grulst,"  <",grstr,">  ",!
        I gropsr'="" DO  ; If null, do nothing
          .I gropsr'["^" S gropsr=gropsr_"^ppPO"
          .S sr=$T(@gropsr) I sr="" D bug^dv Q
          .D @gropsr
        S grte=tki I 'grts D b^dv("Err no grts value","grts,grte,gran") Q
        D SFL^kfm("grab,grstr,grts,grte","_PTx(pti,grts)")
        S substr=grstr ; pre pop
        D POP ; restore grab,grun, Rn
        S grstr=grstr_substr
        ;Bump Rn
        D IRn
        Q
----
;*
xDLST    ;Finished grulst
        BREAK
        Q
xDUN     BREAK  ;Finished whole parse Line TKv()
        Q
----  TermNO end-
F2    D Iun  ; QN, Qgrun
        I QN="" S QN="F"
      D POP  ;
      D IRn  I 'Rn G F2 
      W:$X ! W "TTX POP Failed ",gran,"  at ",Rn," ",tok,! 
      D pze^pps("TTXend POP","STK")
      G F2
----
      DO  G XE:TKc="",rulDUN:'RnC G T1  ;End of TKv inlut, tki/TKc=""
          .I tok=TKc D TT1
          .D TTX  ;Match Fails rule
----
;*  
lstDUN  ;
        I STK=1 D bug^dv("STK empty","STK") Q
        S pti=pti+1
        D SVgrab ;
        D POP
        D IRn
        Q
----  -> IRn
        S RnC=RnC+1 I RnC>$L(grulst," ") S RnC=0 G rulDUN
        S tok=$P(grulst," ",RnC) I tok="" D bug^dv Q
        S grabC=tok,RnC=1,grunC=1 
        Q
---------
^ppPAR  obs recursive sr
;*  Recursive sr Rule ~ Stack
;*  RN ptr into LST - grulst
;*  : QRU Pass 1/Fail 0    $$RR is Q bug
;* 1st arg TOK becomes RUL
RR(TOK,Rn,LST)  NEW Q I $$arg^pps("RUL,Rn,LST") G Qb
       S LQ=$G(GRc(RUL)) I LQ'=LST S Q="Err LST vs RUL" G Qb
R1     S TOK=$P(LST," ",Rn)
       I TOK=""  S QRU=1 Q
       I TOK["."  DO  Q  ;  terminal
         .I TKc=TOK Q ;matches term tok
         .D ERP S Q="Err" ;Parse Error
       ;Here TOK is new rule
       DO  G Q
         .S Q=$$RR(TOK,1)
         .  I 'QRU G Q
         .S Rn=Rn+1,TOK=$P(LST," ",Rn)
         .S Q=$$RR(TOK,Rn)
       S Q="Fall-to-End" 
       G Qb  ;should not get here
ERP    Q
----------
II^ppITK
II    S In="S X=Y"
      KILL TKi,TKc,TKs,TKe S TX=0
      S TK(1,"tkcod")="Swd.",TK(1,"tks")="S"
      S TK(2,"tkcod")="sp1.",TK(2,"tks")=" "
      S TK(3,"tkcod")="Vwd.",TK(3,"tks")="X"
      S TK(4,"tkcod")="=",TK(4,"tks")="="
      S TK(5,"tkcod")="Vwd.",TK(5,"tks")="Y"
      S TK(6,"tkcod")="eol.",TK(6,"tks")=$C(10)
      ;
      Q
      
      
^ppPAR    recursive code...
;*  OBS        
        S Q=$$RR(RUL,Rn,LST)  ; Recursive sr is effective Stack
        I 'QRU D b^dv("Parse Failed ","RUL,Rn") G Qb
        B
        G Q
        -------
^ppIMG rev
top    ;
       S tokFL="tkcod,tks,tkcs,tkce_TKV(tki)"
       S grulFL="grab,grun,gran,grulst,grde_GRv(gri)"
       ;
       S VVL="tokFL,grulFL"
       Q
       
       -------------
;*   mumps Grammar TOI table       
mGR    ;
;;Qcmd: Quit command
;;     Qwd. ecQcmd.
;;ecQcmd:  
;;     : Cpc Qce
;;     wsp1. Qarg
;;
;;Qce: Quit end variants
;;     wsp2.
;;     wsp1. Exp
;;  
;;Scmd:Set Command
;;     Swd. wsp1. Sce
;;Sce: Set command end
;;   Svn = Exp
;;   ( SvnL ) = Exp
;;SvnL: List of Set vars
;;    Svn , SvnL
;;    Svn
;;     
;;Kcmd:Kill command
;;    Kwd. wsp1. eKcmd
;;eKcmd:  End of Kill Cmd
;;    wsp1.    ;;Kill wsp2.  Kill All Locals and Arrays
;;    ( SvnL )
;;    Vna.
;;
;;
;;Exp:Expression
;;   Svn
;;   unop. Exp
;;   Svn bop. Exp
;;SvnL:  Set Var Name List
;;   Svn , SvnL
;;   Svn
;;
;;Svn: Set Var Name
;;   ^ mGvn (  argL )
;;   ^ mGvn
;;   ALvn ( argL )
;;   ALvn
;;
;;ALVn: Array or Local Var name
;;     Vwd.
;;
;;***
;
;
mT     ;Terminal codes  -in TKc  Input Array
;;N:0|1|2|3|4|5|6|7|8|9|0
;;U:A|...Z
;;L:a|...z
;;A: U | L
;;wd A wde | ?
;;wde A | N   ;$L<31
;;
;;
;;wsplb Sp | tab
;;wsp1 Sp
;;wsp2 Sp Sp
;;wsp wsp1 ! wsp1 wsp
;;eol $C(10) lf  simulated by end of line in text src file
;;Scom S|s|SET|set
;;Vwd Var op start % then Alpha

;*
