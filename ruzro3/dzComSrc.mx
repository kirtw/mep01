dzComSrc ;CKW/ESC i22jan23 gmsa./  rzro3/ ;20230122-35;Compile cfg/zroCfg.mdk to rzro/^ZWZ
;  epro0.sh  Min $ydb_routines  $PB/rcfg  $GB/rzro3/ ^dz*, rddv3/ ^dv
; Input is $kwpmj, $kwsys  Env Vars
;
; prototype zrid:umad.  rzro. ^madMenu  alias madcfg, cfg/madcfg.sh   
;  Derive zro from 
;
top   USE $P 
      S kwmpj=$ZTRNLNM("kwmpj"),kwsys=$ZTRNLNM("kwsys")
      D op(kwmpj,kwsys)
      Q
;* here as op or bash entry top         zro. zro^madMa
op(kwmpj,kwsys)  ;
      I $G(kwmpj)="" W !!,"Bug arg $kwmpj ^"_$T(+0),!!! Q
      S zrid=kwmpj
      I $G(kwsys)="" W !!,"Bug arg kwsys ^"_$T(+0),!!! Q
      W !!,"Compiling  zro of kwmpj:",kwmpj,"  to ^ZWZ( zrid:",zrid,!!
      I $D(^ZWZ(zrid))=0 U $P W !!,"Bug ^ZRW(zrid UNDEF ^"_$T(+0),!!! Q
      ;
;  mpj ~ kwmpj, kwsys, zrid
compile  ;
       D ^dzRcfg(kwmpj) ; Read <kwmpj> / cfg / zroCfg.mdk : izro
       D ^dzWzro(kwmpj,izro,"kwmpj,hr,czro,zrid")  ;save in 0uzro/dmpjzro/<mpj>-czro.mdk
       S rzro=izro
       D ^dzroz(rzro)  ;test syntax, existence of rdir's, ?*.m
       S ^ZWZ(zrid,"rzro")=rzro  ;D SFL^dgmg("rzro,izro","_^ZWZ(zrid)")
       D ^dzzl(rzro)  ; trial compile run
       D ^dzs(rzro)  ; display
       S $zro=rzro    ; final acid test set as will on start
       I $T(^dzComSrc)="" USE $P W !!,"Err final $zro ? rzro","rzro=",rzro,!!
       Q      
