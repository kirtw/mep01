
^ZWCmcd - 
^ZWCmcd("GA","mcod",1)="GA(FLVL) ;CKW/ESC i23jun22 gmma/ rbrzm1/ ;20220624-05; Analyze vn fields of MGbl in *FL"
^ZWCmcd("GA","mcod",2)=";Should be comma list (or one) of *FL names or one, but name, NOT FL list itself"
^ZWCmcd("GA","mcod",3)=";"
^ZWCmcd("GA-Q","mcod",22)=";*"
^ZWCmcd("GA-Q","mcod",23)="Q    Q:$Q Q I Q'="""" D qdv"
^ZWCmcd("GA-Q","mcod",24)="     Q"
^ZWCmcd("GA-Qbug","mcod",25)="Qbug D qdv Q:$Q Q  Q"
^ZWCmcd("GA-WG0","mcod",41)=";*"
^ZWCmcd("GA-WG0","mcod",42)="WG0  W ""Node Zero-  "",Zsum,""  "" I '$D(VNc) W "" Undef."",! Q"
^ZWCmcd("GA-WG0","mcod",43)="     zwr V0 W !!"
^ZWCmcd("GA-WG0","mcod",44)="     Q"
^ZWCmcd("GA-WGN","mcod",35)=";*"
^ZWCmcd("GA-WGN","mcod",36)="WGN  USE $P W:$X ! W Zsum,!"
^ZWCmcd("GA-WGN","mcod",37)="     I 'nid W ""  No *id nodes."",!  Q"
^ZWCmcd("GA-WGN","mcod",38)="     W ""  "",nid,""  nodes present, with "",nvn,"" distinct fields."",!"
^ZWCmcd("GA-WGN","mcod",39)="     W Vall,!,Vno,!,Vp,!"
^ZWCmcd("GA-WGN","mcod",40)="     Q"
^ZWCmcd("GA-ZNA","mcod",29)=";*"
^ZWCmcd("GA-ZNA","mcod",30)=";*   Gna  : Zsum  comment"
^ZWCmcd("GA-ZNA","mcod",31)="ZNA    S G0=Gna_""(0)"",Zsum=""Zero Node ""_G0_""  "" "
^ZWCmcd("GA-ZNA","mcod",32)="       I 'vin S Zsum=Zsum_"" has no records/*id nodes."""
^ZWCmcd("GA-ZNA","mcod",33)="       I vin S Zsum=Zsum_"" has ""_nid_"" nodes;""  D WG0"
^ZWCmcd("GA-ZNA","mcod",34)="       Q"
^ZWCmcd("GA-la","mcod",18)=";*  debug log sr, Show all ARYs"
^ZWCmcd("GA-la","mcod",19)="la(M)   USE $P W:$X !! W !!,$G(M),! D la^dv"
^ZWCmcd("GA-la","mcod",20)="     D ^dv(""Log ^""_$T(+0),""M,Gna,devHmgb"")"
^ZWCmcd("GA-la","mcod",21)="     Q"
^ZWCmcd("GA-mbr","mcod",45)=";*"
^ZWCmcd("GA-mbr","mcod",46)="mbr  D GA^mwZdoc"
^ZWCmcd("GA-mbr","mcod",47)="     Q     "
^ZWCmcd("GA-mbr","mcod",48)=";*     "
^ZWCmcd("GA-mbr","mcod",49)="       "
^ZWCmcd("GA-mbr","mcod",50)="     "
^ZWCmcd("GA-qdv","mcod",26)=";*"
^ZWCmcd("GA-qdv","mcod",27)="qdv  D b^dv(""Err ^GA Mgbl Audit"",""Q,Gna,Gid,G0,gFL,gFLna"")"
^ZWCmcd("GA-qdv","mcod",28)="     Q"
^ZWCmcd("GA-top","mcod",4)="top  NEW Q I $$arg^GAs(""FLVL"")  Goto Qbug     "
^ZWCmcd("GA-top","mcod",5)="     D ^GAimg(FLVL)  ; : VNv, VNgv   also VGN(Gna,)"
^ZWCmcd("GA-top","mcod",6)="     D la^dv"
^ZWCmcd("GA-top","mcod",7)="     D ^dv(""Log post GAimg"",""FLVL"") W !!"
^ZWCmcd("GA-top","mcod",8)="     S Gloop="""" F gfi=0:1 S Gloop=$O(VNgv(Gloop)) Q:Gloop=""""  DO  ;  was VGN  dupl"
^ZWCmcd("GA-top","mcod",9)="       .S Gna=Gloop "
^ZWCmcd("GA-top","mcod",10)="       .D ^dv(""Log ^GA Gna start loop"",""Gna"")"
^ZWCmcd("GA-top","mcod",11)="       .D ^GAscan(Gna)"
^ZWCmcd("GA-top","mcod",12)="       .D la(""Post GAscan Calc VCgv, VAgc, "")"
^ZWCmcd("GA-top","mcod",13)="       .D ^GAH(Gna)  ; HGen One MGbl  VCgv(), VCt()"
^ZWCmcd("GA-top","mcod",14)="       .S ^ZWG(Gna,""devHmgb"")=devHmgb"
^ZWCmcd("GA-top","mcod",15)="       .D la(""End of Gna Loop"")"
^ZWCmcd("GA-top","mcod",16)="     USE $P W:$X ! W ""Completed -"",$G(devHmgb),!"
^ZWCmcd("GA-top","mcod",17)="     Q"
^ZWCmcd("GAH","mcod",1)="GAH(Gna) ;CKW/ESC i29jun22 gmsa/ rmGP3/ ;20220630-47; HGen Gna MGbl Page vn Analysis"
^ZWCmcd("GAH","mcod",2)=";"
^ZWCmcd("GAH","mcod",3)=";"
^ZWCmcd("GAH","mcod",4)=";"
^ZWCmcd("GAH-Hcss","mcod",23)=";*"
^ZWCmcd("GAH-Hcss","mcod",24)="Hcss    D css^hgh("".line"",""font-size: 1.2em; background-color: lightblue;"")"
^ZWCmcd("GAH-Hcss","mcod",25)="        D css^hgh("".line"",""write-space: pre-wrap;"")"
^ZWCmcd("GAH-Hcss","mcod",26)="        D flexrow^hgh("".line"","".h1td:1 .h2td:1 .h3td:4"")"
^ZWCmcd("GAH-Hcss","mcod",27)="        D css^hgh("".lnFL"",""font-size: 1.4em; background-color: lightyellow;"")"
^ZWCmcd("GAH-Hcss","mcod",28)="        ;"
^ZWCmcd("GAH-Hcss","mcod",29)="        Q"
^ZWCmcd("GAH-Hcss","mcod",30)="       Q"
^ZWCmcd("GAH-Hcss","mcod",31)="       ;"
^ZWCmcd("GAH-HereLINK","mcod",90)=";*"
^ZWCmcd("GAH-HereLINK","mcod",91)="HereLINK(txt) I $G(txt)="""" S txt=""ww2m/* """
^ZWCmcd("GAH-HereLINK","mcod",92)="       D LINK^hgh(txt,""./"")"
^ZWCmcd("GAH-HereLINK","mcod",93)="       Q"
^ZWCmcd("GAH-Q","mcod",18)="Q      Q:$Q Q I Q'="""" D qd"
^ZWCmcd("GAH-Q","mcod",19)="       Q"
^ZWCmcd("GAH-Qbug","mcod",20)="Qbug   D qd Q:$Q Q  Q"
^ZWCmcd("GAH-Stray","mcod",42)="Stray  D br^hgh,sp^hgh(4),sv^hgh(""Stray fields in ""_Gna_""  -not in any *FL -""),br^hgh"
^ZWCmcd("GAH-Stray","mcod",43)="       S D=$D(VNcv(""Stray"")) "
^ZWCmcd("GAH-Stray","mcod",44)="         I D DO  ;"
^ZWCmcd("GAH-Stray","mcod",45)="         .S vn="""" F vi=0:1 S vn=$O(VNcv(""Stray"",vn)) Q:vn=""""  DO  ;"
^ZWCmcd("GAH-Stray","mcod",46)="            ..D h1vn(vn)"
^ZWCmcd("GAH-Stray","mcod",47)="         I 'D D sp^hgh(9),sv^hgh(""No strays.""),br^hgh"
^ZWCmcd("GAH-Stray","mcod",48)="       ;"
^ZWCmcd("GAH-Stray","mcod",49)="       Q"
^ZWCmcd("GAH-Stray","mcod",50)=";*  "
^ZWCmcd("GAH-Stray","mcod",51)=""
^ZWCmcd("GAH-guts","mcod",32)="guts  ; VNgv("
^ZWCmcd("GAH-guts","mcod",33)="       D mgHrow ; Line of Mgbl Links"
^ZWCmcd("GAH-guts","mcod",34)="       S nid=$G(^ZWG(Gna,""nid"")) I nid="""" S nid=""zero"""
^ZWCmcd("GAH-guts","mcod",35)="       D br^hgh,sp^hgh(4),sv^hgh(""Records in ""_Gna_"" - ""),sv^hgh($G(nid)),br^hgh,br^hgh"
^ZWCmcd("GAH-guts","mcod",36)="       ;D b^dv(""Log "",""VNgv"")"
^ZWCmcd("GAH-guts","mcod",37)="       S gNa="""" F gi=0:1 S gNa=$O(VGN(Gna,gNa)) Q:gNa=""""  S gFLna=gNa DO  ;"
^ZWCmcd("GAH-guts","mcod",38)="         .D hgFL(gFLna)"
^ZWCmcd("GAH-guts","mcod",39)="       D Stray"
^ZWCmcd("GAH-guts","mcod",40)="       Q"
^ZWCmcd("GAH-guts","mcod",41)="       ;"
^ZWCmcd("GAH-h1vn","mcod",73)=";*"
^ZWCmcd("GAH-h1vn","mcod",74)="h1vn(vn)   ;"
^ZWCmcd("GAH-h1vn","mcod",75)="       S vde=$G(^ZWV(vn,""vde"")) S:vde="""" vde=""_"" ; visible"
^ZWCmcd("GAH-h1vn","mcod",76)="       S VC=$G(VCgv(Gna,vn)) S:VC="""" VC=""0"""
^ZWCmcd("GAH-h1vn","mcod",77)="       S VA=$G(VAgv(Gna,vn)) S:VA="""" VA=""A?"""
^ZWCmcd("GAH-h1vn","mcod",78)="       D ot^hgh("".line""),ot^hgh("".h1td"")"
^ZWCmcd("GAH-h1vn","mcod",79)="       D sv^hgh("" vn: ""),sv^hgh(vn),sp^hgh(3),ct^hgh"
^ZWCmcd("GAH-h1vn","mcod",80)="       D ot^hgh("".h2td""),sv^hgh(VC),ct^hgh"
^ZWCmcd("GAH-h1vn","mcod",81)="       D ot^hgh("".h3td""),sv^hgh(vde),ct^hgh"
^ZWCmcd("GAH-h1vn","mcod",82)="       D ct^hgh("".line"")"
^ZWCmcd("GAH-h1vn","mcod",83)="       Q"
^ZWCmcd("GAH-hgFL","mcod",52)=";*  HGen  each *FL string and its list of vn's "
^ZWCmcd("GAH-hgFL","mcod",53)=";  gFLna, Gna "
^ZWCmcd("GAH-hgFL","mcod",54)="hgFL(gFLna) NEW Q I $$arg^GAs(""gFLna,Gna"") Goto Qbug"
^ZWCmcd("GAH-hgFL","mcod",55)="       S gFL=$G(@gFLna) I gFL="""" S Q=""UNDEF @gFLna string"" Goto Qbug"
^ZWCmcd("GAH-hgFL","mcod",56)="       S FL=$P(gFL,""_"")  ; Caller either FL or gFL"
^ZWCmcd("GAH-hgFL","mcod",57)="       I FL="""" D b^dv(""Err FL"",""FL,Gna"") Q"
^ZWCmcd("GAH-hgFL","mcod",58)="       D ot^hgh("".lnFL""),sv^hgh("" @""_gFLna),sp^hgh(3),sv^hgh(FL)"
^ZWCmcd("GAH-hgFL","mcod",59)="       D ct^hgh"
^ZWCmcd("GAH-hgFL","mcod",60)="       F fi=1:1:$L(FL,"","") S fn=$P(FL,"","",fi) I fn'="""" D h1vn(fn)  ;"
^ZWCmcd("GAH-hgFL","mcod",61)="       Goto Q"
^ZWCmcd("GAH-mgHrow","mcod",62)=";*"
^ZWCmcd("GAH-mgHrow","mcod",63)="mgHrow  NEW G,gi,Gna,devHmgb"
^ZWCmcd("GAH-mgHrow","mcod",64)="       D ot^hgh("".mgll"")"
^ZWCmcd("GAH-mgHrow","mcod",65)="       D tocLINK,sp^hgh(3)"
^ZWCmcd("GAH-mgHrow","mcod",66)="       D HereLINK(""Index ./""),sp^hgh(3)"
^ZWCmcd("GAH-mgHrow","mcod",67)="       S G="""" F gi=0:1 S G=$O(VGN(G)) Q:G=""""  DO  ;"
^ZWCmcd("GAH-mgHrow","mcod",68)="         .S Gna=G S Q=$$devHmgb^GAIpg(Gna) ; devHmgb"
^ZWCmcd("GAH-mgHrow","mcod",69)="         .;D b^dv(""Log Mgb LINK"",""G,Gna,devHmgb"")"
^ZWCmcd("GAH-mgHrow","mcod",70)="         .D LINK^hgh(Gna,devHmgb),sp^hgh(4)"
^ZWCmcd("GAH-mgHrow","mcod",71)="       D ct^hgh("".mgll"")"
^ZWCmcd("GAH-mgHrow","mcod",72)="       Q"
^ZWCmcd("GAH-qd","mcod",21)="qd     D b^dv(""Err ^""_$T(+0),""Q,Gna,gFLna,gFL,FL,Gna,Gid"")"
^ZWCmcd("GAH-qd","mcod",22)="       Q"
^ZWCmcd("GAH-tocLINK","mcod",94)=";*"
^ZWCmcd("GAH-tocLINK","mcod",95)="tocLINK(M) I $G(M)="""" S M=""TOC Message ?"""
^ZWCmcd("GAH-tocLINK","mcod",96)="       S Q=$$devFil^mwIpg(""aa-TOC-All"") ; : devFil"
^ZWCmcd("GAH-tocLINK","mcod",97)="       S txt=""MRou TOC List "",href=devFil"
^ZWCmcd("GAH-tocLINK","mcod",98)="       D LINK^hgh(txt,href)"
^ZWCmcd("GAH-tocLINK","mcod",99)="       Q"
^ZWCmcd("GAH-top","mcod",5)="top    NEW Q I $$arg^GAs(""Gna"") Goto Qbug"
^ZWCmcd("GAH-top","mcod",6)="       ;"
^ZWCmcd("GAH-top","mcod",7)="    S nmr=0,ncb=0"
^ZWCmcd("GAH-top","mcod",8)="    S Q=$$devHmgb^GAIpg(Gna) ; : devHmgb  destination html page"
^ZWCmcd("GAH-top","mcod",9)="    D Init^hgh  ; Init Buffers"
^ZWCmcd("GAH-top","mcod",10)="    S TItb=Gna"
^ZWCmcd("GAH-top","mcod",11)="    S TIhd=""Mgbl field/vn Analysis - ""_Gna"
^ZWCmcd("GAH-top","mcod",12)="    S TIft=""by ^""_$T(+0)_""  ""_$ZD($H,""YY MM DD 12:60AM"")"
^ZWCmcd("GAH-top","mcod",13)="    D Hcss"
^ZWCmcd("GAH-top","mcod",14)="    D HGS^hgh"
^ZWCmcd("GAH-top","mcod",15)="    D guts"
^ZWCmcd("GAH-top","mcod",16)="    D HGE^hgh"
^ZWCmcd("GAH-top","mcod",17)="    D WH^hgh(devHmgb)"
^ZWCmcd("GAH-wdLINK","mcod",84)=";*"
^ZWCmcd("GAH-wdLINK","mcod",85)=";*"
^ZWCmcd("GAH-wdLINK","mcod",86)="wdLINK(wd) I $G(wd)="""" Q"
^ZWCmcd("GAH-wdLINK","mcod",87)="       S href=$G(^ZWlk(wd)) I href="""" Q"
^ZWCmcd("GAH-wdLINK","mcod",88)="       D LINK^hgh(wd,href)"
^ZWCmcd("GAH-wdLINK","mcod",89)="       Q"
^ZWCmcd("GAIpg","mcod",1)="GAIpg  ;CKW/ESC i29jun22 gmsa/ rmGP3/ ;20220629-26; GA* HGen Page-name mgmt"
^ZWCmcd("GAIpg","mcod",2)=";"
^ZWCmcd("GAIpg","mcod",3)=";"
^ZWCmcd("GAIpg-Q","mcod",11)="Q    S Q="""" Q:$Q Q Q  ; No errors"
^ZWCmcd("GAIpg-Qbug","mcod",12)="Qbug  D qd Q:$Q Q  Q"
^ZWCmcd("GAIpg-devHmgb","mcod",6)=";*  ^GAIpg   quickie here 29jun22  : devHmgb"
^ZWCmcd("GAIpg-devHmgb","mcod",7)="devHmgb(Gna) NEW Q I $$arg^GAs(""Gna"") Goto Qbug"
^ZWCmcd("GAIpg-devHmgb","mcod",8)="    S fil=""ag-""_Gna_"".gb2.html"""
^ZWCmcd("GAIpg-devHmgb","mcod",9)="    I $G(W2B)="""" D ^devIB ; : W2B"
^ZWCmcd("GAIpg-devHmgb","mcod",10)="    S devHmgb=W2B_fil"
^ZWCmcd("GAIpg-qd","mcod",13)="qd  D b^dv(""Err ^""_$T(+0),""Q,Gna,Gid,W2B,devHmgb"")"
^ZWCmcd("GAIpg-qd","mcod",14)="    Q"
^ZWCmcd("GAIpg-qd","mcod",15)=";*"
^ZWCmcd("GAIpg-top","mcod",4)="top    BREAK  HALT  ; No top"
^ZWCmcd("GAIpg-top","mcod",5)=";"
^ZWCmcd("GAimg","mcod",1)="GAimg(FLVL) ;CKW/ESC i25jun22 gmsa/ rmGP3/ ;20220625-08;FLVL to VGN(Gna, VNgv(Gnad,vn), VNv(vn) ? cross Gna"
^ZWCmcd("GAimg","mcod",2)=";"
^ZWCmcd("GAimg","mcod",3)="; top Falls into FLVL (No arg)"
^ZWCmcd("GAimg","mcod",4)=";   FLVL from ^mwIMG  is list of super FL vars, jst set by ^mwIMG"
^ZWCmcd("GAimg","mcod",5)=";   Gid is MGbl ref and *id variable, eg ^ZWRM(mrid), $P2_ of super FL list var."
^ZWCmcd("GAimg","mcod",6)=";   Gna is MGbl name, up to parenthesis"
^ZWCmcd("GAimg","mcod",7)=";   VNgv(Gid,vn) is index of fields expected in an MGbl structure, incl a subscript"
^ZWCmcd("GAimg","mcod",8)=";   VNv(vn   ?"
^ZWCmcd("GAimg-FLVL","mcod",9)=";*  FLVL, @gFLna : VNv(vn), VNgv(Gid,vn), VGN(Gna,gFLna)=gFL"
^ZWCmcd("GAimg-FLVL","mcod",10)="FLVL   NEW Q I $$arg^GAs(""FLVL"") Goto Qbug"
^ZWCmcd("GAimg-FLVL","mcod",11)="      KILL VCgv,VNv,VGN     NEW gFLna,vi,FL,Gid,Gna,gFL"
^ZWCmcd("GAimg-FLVL","mcod",12)="      F vli=1:1:$L(FLVL,"","") S gFLna=$P(FLVL,"","",vli)  I gFLna'=""""  DO  ;"
^ZWCmcd("GAimg-FLVL","mcod",13)="        .D XFL^GAs(gFLna) ; gFLna : Gid, Gna, FL"
^ZWCmcd("GAimg-FLVL","mcod",14)="        .   I Q'="""" Goto Qbug ;gFLna in FLVL named var undef ?"
^ZWCmcd("GAimg-FLVL","mcod",15)="        .S VGN(Gna,gFLna)=gFL ;LookUp by MGb name"
^ZWCmcd("GAimg-FLVL","mcod",16)="        .;S VGN(Gna)=Gid  ; last if mult, should be same Gid"
^ZWCmcd("GAimg-FLVL","mcod",17)="        .F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) I vn'="""" DO  ;"
^ZWCmcd("GAimg-FLVL","mcod",18)="           ..S VNgv(Gna,vn)=vi_""^/""_Gid"
^ZWCmcd("GAimg-FLVL","mcod",19)="           ..;S VNv(vn)=vi_""^/""_Gid"
^ZWCmcd("GAimg-Q","mcod",20)="Q     Q:$Q Q  I Q'="""" D qd"
^ZWCmcd("GAimg-Q","mcod",21)="      Q"
^ZWCmcd("GAimg-Qbug","mcod",22)="Qbug  D qd  Q:$Q Q  Q"
^ZWCmcd("GAimg-qd","mcod",23)="qd    D b^dv(""Err ^""_$T(+0),""Q,zrid,FLVL,VNgv"")"
^ZWCmcd("GAimg-qd","mcod",24)="      Q"
^ZWCmcd("GAimg-qd","mcod",25)=""
^ZWCmcd("GAmod","mcod",1)="GAmod  ;CKW/ESC i25jun22 gmma/  rmGP3/ ;20220625-94;Modules for MGbl Doc Generation"
^ZWCmcd("GAmod","mcod",2)=";"
^ZWCmcd("GAmod","mcod",3)=";"
^ZWCmcd("GAmod","mcod",4)=";"
^ZWCmcd("GAmod-AllScan","mcod",14)=";*  Scan All Mgbls  VGN(Gna"
^ZWCmcd("GAmod-AllScan","mcod",15)="AllScan  NEW Q I $$arg^GAs(""FLVL"") Goto Qbug"
^ZWCmcd("GAmod-AllScan","mcod",16)="       ;D ^mwIMG  ; sic vs caller, mpj specific : FLVL"
^ZWCmcd("GAmod-AllScan","mcod",17)="       ;  scan records, then interpret vn at end - D GAimg(FLVL) ; : VNv, VNgv()"
^ZWCmcd("GAmod-AllScan","mcod",18)="       D ^GAimg(FLVL) ; : VNv(vn, VNgv(Gid,vn  ; Expected vn's"
^ZWCmcd("GAmod-AllScan","mcod",19)="       F vvi=0:1 S Gna=$O(VGN(Gna)) Q:Gna=""""  DO  ;"
^ZWCmcd("GAmod-AllScan","mcod",20)="         .S gFLna=$G(VGN(Gna))"
^ZWCmcd("GAmod-AllScan","mcod",21)="         .I gFLna="""" D bug^dv Q"
^ZWCmcd("GAmod-AllScan","mcod",22)="         .D XFL^GAs(gFLna) ; gFLna, @gFLna Gid, Gna, vnid"
^ZWCmcd("GAmod-AllScan","mcod",23)="         .D ^GAscan(Gid)"
^ZWCmcd("GAmod-AllScan","mcod",24)="         .D ^GAH(Gna)"
^ZWCmcd("GAmod-AllScan","mcod",25)="     ; falls to Q"
^ZWCmcd("GAmod-Q","mcod",26)="Q    Q:$Q Q  I Q'="""" D qd"
^ZWCmcd("GAmod-Q","mcod",27)="     Q"
^ZWCmcd("GAmod-Qbug","mcod",28)="Qbug  D qd Q:$Q Q  Q"
^ZWCmcd("GAmod-mbr","mcod",7)=";*    Here  vs ^mwZdoc"
^ZWCmcd("GAmod-mbr","mcod",8)="mbr    KILL"
^ZWCmcd("GAmod-mbr","mcod",9)="       D ^mwIMG"
^ZWCmcd("GAmod-mbr","mcod",10)="       ;D ^GAimg(FLVL)  ; :  VNv(vn, VVG(Gid,gFLna)"
^ZWCmcd("GAmod-mbr","mcod",11)="       D AllScan  ; FLVL, @gFLna : VCgv  Counts records per vn field"
^ZWCmcd("GAmod-mbr","mcod",12)="       Q"
^ZWCmcd("GAmod-mbr","mcod",13)=""
^ZWCmcd("GAmod-qd","mcod",29)="qd   D b^dv(""Err ^""_$T(+0),""Q,Gid,gFLna,FLVL"")"
^ZWCmcd("GAmod-qd","mcod",30)="     Q"
^ZWCmcd("GAmod-qd","mcod",31)=";*"
^ZWCmcd("GAmod-top","mcod",5)="top    BREAK  HALT  ; No ^GAmod ? yet"
^ZWCmcd("GAmod-top","mcod",6)=";"
^ZWCmcd("GAs","mcod",1)="GAs ;CKW/ESC i25jun22 gmma/ rmGP3/ ;20220625-63;SR of GA/GP MGbl Doc Utilities"
^ZWCmcd("GAs","mcod",2)=";"
^ZWCmcd("GAs","mcod",3)=";"
^ZWCmcd("GAs","mcod",4)=";"
^ZWCmcd("GAs-GetFLVL","mcod",41)=";*"
^ZWCmcd("GAs-GetFLVL","mcod",42)=";*      Scrape Vars for vn:*FL (or *VL)  and two _pieces ?"
^ZWCmcd("GAs-GetFLVL","mcod",43)=";*   local vars : VVA(gFL)=gFL temp -> FLVL  and VNgv(Gid,vn)=vi ^/ Gidd"
^ZWCmcd("GAs-GetFLVL","mcod",44)="GetFLVL  NEW Vs,VVA  ZSH ""V"":Vs  ; Vs(""V"",vi)=""<vn>=""val""  incl array nodes"
^ZWCmcd("GAs-GetFLVL","mcod",45)="      F vi=1:1 S VE=$G(Vs(""V"",vi)) Q:$D(Vs(""V"",vi))=0  DO  ;"
^ZWCmcd("GAs-GetFLVL","mcod",46)="        .S VE=$G(Vs(""V"",vi))"
^ZWCmcd("GAs-GetFLVL","mcod",47)="        .S vn=$P(VE,""=""),val=$P(VE,""="",2,99)"
^ZWCmcd("GAs-GetFLVL","mcod",48)="        .I vn[""("" Q"
^ZWCmcd("GAs-GetFLVL","mcod",49)="        .I vn[""FL"",$P(vn,""FL"",2)="""" DO  ;"
^ZWCmcd("GAs-GetFLVL","mcod",50)="           ..S gFLna=vn"
^ZWCmcd("GAs-GetFLVL","mcod",51)="           ..S VVA(gFLna)=val"
^ZWCmcd("GAs-GetFLVL","mcod",52)="           ..S gFL=vn,sfl=@vn,FL=$P(gFL,""_""),Gid=$P(gFL,""_"",2)"
^ZWCmcd("GAs-GetFLVL","mcod",53)="           ..F fi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),VNgv(Gid,vn)=vi_""^/""_Gid"
^ZWCmcd("GAs-GetFLVL","mcod",54)="      S g="""",FLVL="""" F vi=0:1 S g=$O(VVA(g)) Q:g=""""  S FLVL=FLVL_"",""_g"
^ZWCmcd("GAs-GetFLVL","mcod",55)="      S FLVL=$E(FLVL,2,999) ; Remove leading comma"
^ZWCmcd("GAs-GetFLVL","mcod",56)="      Q"
^ZWCmcd("GAs-Q","mcod",7)="Q    Q:$Q Q I Q'="""" D qd"
^ZWCmcd("GAs-Q","mcod",8)="     Q"
^ZWCmcd("GAs-Qa","mcod",30)="Qa      S argQ=Q,argRet=(Q'=""""),argDolQ=$Q,argVL=VL"
^ZWCmcd("GAs-Qa","mcod",31)="        I Q'="""" D ^dvstk,b^dv(Q,""Q,argVL"")"
^ZWCmcd("GAs-Qa","mcod",32)="        Q Q'=""""  ; $$ is not Q, but 0/1 if ERR for branching I $$arg"
^ZWCmcd("GAs-Qbug","mcod",9)="Qbug D qd  Q:$Q Q  Q"
^ZWCmcd("GAs-VXN","mcod",33)=";*  FLVL :  VGN(Gna)=Gid"
^ZWCmcd("GAs-VXN","mcod",34)="VXN(FLVL) NEW Q I $$arg^GAs(""FLVL"") Goto Qbug"
^ZWCmcd("GAs-VXN","mcod",35)="        KILL VGN ; or not, accumulate ok"
^ZWCmcd("GAs-VXN","mcod",36)="        F fi=1:1:$L(FLVL,"","") S g=$P(FLVL,"","",fi) I g'="""" DO  ;"
^ZWCmcd("GAs-VXN","mcod",37)="          .S FLg=$G(@g),Gid=$P(FLg,""_"",2)"
^ZWCmcd("GAs-VXN","mcod",38)="          .S Gna=$P(Gid,""("")"
^ZWCmcd("GAs-VXN","mcod",39)="          .S VGN(Gna)=Gid"
^ZWCmcd("GAs-VXN","mcod",40)="        Goto Q"
^ZWCmcd("GAs-XFL","mcod",57)=";* expand gFLna : gFL, FL, Gid, Gna, vnid"
^ZWCmcd("GAs-XFL","mcod",58)="XFL(gFLna)  NEW Q,D I $$arg(""gFLna"") Goto Qbug"
^ZWCmcd("GAs-XFL","mcod",59)="      I '$D(@gFLna) S Q=""Undef *FL ""_gFLna Goto Qbug"
^ZWCmcd("GAs-XFL","mcod",60)="      S gFL=$G(@gFLna) I gFL="""" S Q=""Err gFLna in XFL"" Goto Qbug"
^ZWCmcd("GAs-XFL","mcod",61)="      S FL=$P(gFL,""_""),Gid=$P(gFL,""_"",2)"
^ZWCmcd("GAs-XFL","mcod",62)="        I FL["":"" DO  ; what?, vn translation, meta fields  "
^ZWCmcd("GAs-XFL","mcod",63)="          .D b^dv(""Err handling : sub in *FL"",""gFL,gFLna,FL"")    "
^ZWCmcd("GAs-XFL","mcod",64)="      D vnid(Gid)"
^ZWCmcd("GAs-XFL","mcod",65)="      Q"
^ZWCmcd("GAs-arg","mcod",14)=";*  See primary in ^mws  of MBR project"
^ZWCmcd("GAs-arg","mcod",15)=";*  trial arg  -- arg^mws, arg^dvs   or other, M,VL $$ only, null ok"
^ZWCmcd("GAs-arg","mcod",16)=";*  Sets Q null or err, saves caller from having to do this, sic bug if ;out"
^ZWCmcd("GAs-arg","mcod",17)=";;  label(arg1,arg2) NEW Q I $$arg^mws(""arg1,arg3"") Goto Q ;shared exit"
^ZWCmcd("GAs-arg","mcod",18)=";;    Q is set null if args ok, not returned in $$, as 0/1 returned as $$ for branching"
^ZWCmcd("GAs-arg","mcod",19)=";;  Null ok, set null if UNDEF   arg2:null   extend super list colon2 props --- ?"
^ZWCmcd("GAs-arg","mcod",20)=";*  also sets Q null or Err, returns $$ branch 0 ok, 1 Err (ie $$~ Q'="""" )"
^ZWCmcd("GAs-arg","mcod",21)="arg(VL)  NEW ARY,FL,vn,vi S Q=""""  ; Q is NOT NEWed here, but set null or returned"
^ZWCmcd("GAs-arg","mcod",22)="        I $G(VL)="""" S Q=""Null arg VL"" Goto Qa"
^ZWCmcd("GAs-arg","mcod",23)="        S ARY=$P(VL,""_"",2),FL=$P(VL,""_"")  ; tolerate, not reqd"
^ZWCmcd("GAs-arg","mcod",24)="        S argFL=FL,vi=0"
^ZWCmcd("GAs-arg","mcod",25)="        I FL'="""" F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) DO  ;"
^ZWCmcd("GAs-arg","mcod",26)="          .I $D(@vn)=0 S Q=Q_""$$arg ""_vn_"" UNDEF,"" Q"
^ZWCmcd("GAs-arg","mcod",27)="          .I $G(@vn)="""" S Q=Q_vn_"" Null,"" Q"
^ZWCmcd("GAs-arg","mcod",28)="          .;further tests ?  def vs null, ARY vs base node undef, null ?"
^ZWCmcd("GAs-arg","mcod",29)="        S argNvi=vi"
^ZWCmcd("GAs-qd","mcod",10)=";*"
^ZWCmcd("GAs-qd","mcod",11)="qd   D b^dv(""Err ^""_$T(+0),""Q,VL"")"
^ZWCmcd("GAs-qd","mcod",12)="     Q"
^ZWCmcd("GAs-qd","mcod",13)=";"
^ZWCmcd("GAs-top","mcod",5)="top    NEW Q S Q=""No Entry ^GAs"" Goto Qbug"
^ZWCmcd("GAs-top","mcod",6)=";"
^ZWCmcd("GAs-vnid","mcod",66)=";*  Gid : vnid, Gna"
^ZWCmcd("GAs-vnid","mcod",67)="vnid(Gid) NEW Q I $$arg(""Gid"") Goto Qbug"
^ZWCmcd("GAs-vnid","mcod",68)="    S vnid=$P($P(Gid,""("",2),"")"")"
^ZWCmcd("GAs-vnid","mcod",69)="      I vnid["","" S Q=""Only one subscript handled."""
^ZWCmcd("GAs-vnid","mcod",70)="    S Gna=$P(Gid,""("")"
^ZWCmcd("GAs-vnid","mcod",71)="      I Gna'?.1""^""1A.10AN S Q=Q_"" Gna from Gid( '""_Gna_""' ?"""
^ZWCmcd("GAs-vnid","mcod",72)="    Goto Q"
^ZWCmcd("GAs-vnid","mcod",73)=";*"
^ZWCmcd("GAs-vnid","mcod",74)=""
^ZWCmcd("GAscan","mcod",1)="GAscan(Gna) ;CKW/ESC i29jun22 gmsa/ rmGP3/ ;20220629-55;Scan One MGbl for vn in records"
^ZWCmcd("GAscan","mcod",2)=";  MGbl or Array ?,  Records  (not Zero Node here)"
^ZWCmcd("GAscan","mcod",3)=";  Gid has vnid and Gna used in scan"
^ZWCmcd("GAscan","mcod",4)=";  remove use of Gid, vnid in scan"
^ZWCmcd("GAscan","mcod",5)=";"
^ZWCmcd("GAscan","mcod",6)=";   Scan One Mgb- Gid, count records, which fields in each"
^ZWCmcd("GAscan","mcod",7)=";   Gid, VNv(vn : (vnid, Gna"
^ZWCmcd("GAscan-DVC","mcod",36)=";*     "
^ZWCmcd("GAscan-DVC","mcod",37)="DVC  I $D(VAcv(""None"")) D VNone"
^ZWCmcd("GAscan-DVC","mcod",38)="     I $D(VAcv(""All""))  D VAll"
^ZWCmcd("GAscan-DVC","mcod",39)="     I $D(VAcv(""Some""))  D VSome"
^ZWCmcd("GAscan-DVC","mcod",40)="     I $D(VAcv(""Stray"")) D VStray"
^ZWCmcd("GAscan-DVC","mcod",41)="     Q"
^ZWCmcd("GAscan-GSva","mcod",22)="GSva ; Now show VCgv(vn) counts, vs VAgv(Gna,vn)  type codes {All,None,Some,Stray, ...}"
^ZWCmcd("GAscan-GSva","mcod",23)="     ;    and Sort by codes VAcv(vc,vn)="""""
^ZWCmcd("GAscan-GSva","mcod",24)="     S vn="""" F vi=0:1 S vn=$O(VCgv(Gna,vn)) Q:vn=""""  DO  ;"
^ZWCmcd("GAscan-GSva","mcod",25)="       .S n=$G(VCgv(Gna,vn)),vc="""""
^ZWCmcd("GAscan-GSva","mcod",26)="       .I n=nid S vc=""All"""
^ZWCmcd("GAscan-GSva","mcod",27)="       .E  I 'n S vc=""None"""
^ZWCmcd("GAscan-GSva","mcod",28)="       .E  S vc=""Some"""
^ZWCmcd("GAscan-GSva","mcod",29)="       .S VAgv(Gna,vn)=vc,VAcv(vc,vn)="""""
^ZWCmcd("GAscan-GSva","mcod",30)="       .I $G(VNgv(Gna,vn))="""" S VAcv(""Stray"",vn)=n"
^ZWCmcd("GAscan-Gscan","mcod",13)=";*    vnid, Gna : nid  num records, VCgv(vn)= counts,  VNabs(vn) = {All, None, %} "
^ZWCmcd("GAscan-Gscan","mcod",14)="Gscan  KILL VCgv(Gna),VAgv(Gna),VAcv"
^ZWCmcd("GAscan-Gscan","mcod",15)="     S scid=0 F nid=0:1 S scid=$O(@Gna@(scid)) Q:scid=""""  DO  ;"
^ZWCmcd("GAscan-Q","mcod",31)="Q    Q:$Q Q  I Q'="""" D qd"
^ZWCmcd("GAscan-Q","mcod",32)="     Q"
^ZWCmcd("GAscan-Qbug","mcod",33)="Qbug  D qd Q:$Q Q  Q"
^ZWCmcd("GAscan-Rec","mcod",16)="Rec    .S vn=0 F vi=0:1 S vn=$O(@Gna@(scid,vn)) Q:vn=""""  DO  ;"
^ZWCmcd("GAscan-VAll","mcod",47)="VAll    USE $P W:$X ! W ""Normal, all defined- "",!"
^ZWCmcd("GAscan-VAll","mcod",48)="        S vn=0 F vi=0:1 S vn=$O(VAcv(""All"",vn)) Q:vn=""""  W vn,"", "" W:$X>80 !,""  """
^ZWCmcd("GAscan-VAll","mcod",49)="        Q"
^ZWCmcd("GAscan-VNone","mcod",42)=";*"
^ZWCmcd("GAscan-VNone","mcod",43)=";*"
^ZWCmcd("GAscan-VNone","mcod",44)="VNone   USE $P W:$X ! W ""No vals for the following-"",!"
^ZWCmcd("GAscan-VNone","mcod",45)="        S vn=0 F vi=0:1 S vn=$O(VAcv(""None"",vn)) Q:vn=""""  W vn,"", "" W:$X>80 !,""  """
^ZWCmcd("GAscan-VNone","mcod",46)="        Q"
^ZWCmcd("GAscan-VSome","mcod",50)="VSome   USE $P W:$X ! W ""Some, not all- "",!"
^ZWCmcd("GAscan-VSome","mcod",51)="        S vn=0 F vi=0:1 S vn=$O(VAcv(""Some"",vn)) Q:vn=""""  DO  ;"
^ZWCmcd("GAscan-VSome","mcod",52)="        .S np=vn_""?"",nv=$G(VAcv(vn))"
^ZWCmcd("GAscan-VSome","mcod",53)="        .I nv,nid S np=(nv/nid*100\1)_""%"""
^ZWCmcd("GAscan-VSome","mcod",54)="        .W vn,"" - "",np,"" "" W:$X>80 !,""  """
^ZWCmcd("GAscan-VSome","mcod",55)="        Q"
^ZWCmcd("GAscan-VStray","mcod",56)="VStray  USE $P W:$X ! W ""Stray fields, not in any *FL list-"",!"
^ZWCmcd("GAscan-VStray","mcod",57)="        S vn=0 F vi=0:1 S vn=$O(VAcv(""Stray"",vn)) Q:vn=""""  DO  ;"
^ZWCmcd("GAscan-VStray","mcod",58)="          .S n=$G(VAcv(""Stray"",vn))"
^ZWCmcd("GAscan-VStray","mcod",59)="          .W:$X ! W ""  "",vn,""  x"",n,"" occurrences."""
^ZWCmcd("GAscan-VStray","mcod",60)="        Q"
^ZWCmcd("GAscan-dbg","mcod",61)=";*"
^ZWCmcd("GAscan-dbg","mcod",62)=";*      * * * * *  test/dbg  * * * * *"
^ZWCmcd("GAscan-dbg","mcod",63)=";*   "
^ZWCmcd("GAscan-dbg","mcod",64)="dbg  S Gna=""^ZWRM"" D ^GAscan(Gna),^GAH(Gna)"
^ZWCmcd("GAscan-dbg","mcod",65)="     S Gna=""^ZWCB"" D ^GAscan(Gna),^GAH(Gna)"
^ZWCmcd("GAscan-dbg","mcod",66)="     S Gna=""^ZWD"" D ^GAscan(Gna),^GAH(Gna)"
^ZWCmcd("GAscan-dbg","mcod",67)="     S Gna=""^ZWZ"" D ^GAscan(Gna),^GAH(Gna)"
^ZWCmcd("GAscan-dbg","mcod",68)="     ;"
^ZWCmcd("GAscan-dbg","mcod",69)="     zwr VCgv"
^ZWCmcd("GAscan-dbg","mcod",70)="     D DVC"
^ZWCmcd("GAscan-dbg","mcod",71)="     Q"
^ZWCmcd("GAscan-dbg","mcod",72)="     "
^ZWCmcd("GAscan-qd","mcod",34)="qd   D b^dv(""Err ^""_$T(+0),""Q,Gid,vnid,Gna,VCgv"")"
^ZWCmcd("GAscan-qd","mcod",35)="     Q"
^ZWCmcd("GAscan-top","mcod",8)="top   NEW Q I $$arg^GAs(""Gna"") Goto Qbug"
^ZWCmcd("GAscan-top","mcod",9)="      I $G(Gna)="""" S Q=""No Gna from Gid"" Goto Qbug"
^ZWCmcd("GAscan-top","mcod",10)="      I $D(@Gna)=0 S Q=""MGbl/ARY ""_Gna_""' is UNDEF."" Goto Q"
^ZWCmcd("GAscan-top","mcod",11)="      G Gscan ; continue vs fall thru...(sic)"
^ZWCmcd("GAscan-top","mcod",12)=";;   G, : VCgv(Gna,vn) count or Abstraction All,None, Some n/%"
^ZWCmcd("GAscan-vn","mcod",17)="vn       ..S VCgv(Gna,vn)=$G(VCgv(Gna,vn))+1  ;just count nodes by name"
^ZWCmcd("GAscan-vn","mcod",18)="         ..S val=$G(@Gna@(scid,vn))"
^ZWCmcd("GAscan-vn","mcod",19)="         ..; val type, count by type n, i, str $L<10, long str avg length"
^ZWCmcd("GAscan-vn","mcod",20)="     S ^ZWG(Gna,""nid"")=nid"
^ZWCmcd("GAscan-vn","mcod",21)="     I 'nid  S Q=""No records."" Goto Q"
^ZWCmcd("GP6","mcod",1)="GP6(GBL,devg) ;CKW/ESC  ir15aug20 gmsa/ rmGP3/ ; 20220613-75;HGen MGbl Dumps, two-level"
^ZWCmcd("GP6","mcod",2)=" ;"
^ZWCmcd("GP6","mcod",3)=" ;"
^ZWCmcd("GP6","mcod",4)=" ; GBL  is Global Base- Name, or Node, Used in @GBL@ syntax"
^ZWCmcd("GP6","mcod",5)=" ; S1 is Subscript 1 below GBL, Ref in G1 ~ @GBL@(S1)"
^ZWCmcd("GP6","mcod",6)=" ;   V1 is Value in a Node"
^ZWCmcd("GP6","mcod",7)=" ;   D1 is $D of Node --or""T"" (10) Tree and ""V"" Value (1)"
^ZWCmcd("GP6","mcod",8)=" ; Although they should be treated Separately, ie not in same breath !"
^ZWCmcd("GP6","mcod",9)=" ;"
^ZWCmcd("GP6","mcod",10)=" ; Global Scan Syntax - relates to Above and Ranges for Si Subscripts"
^ZWCmcd("GP6","mcod",11)=" ;   Range as Start, End values, Pattern,  or all, or all-except zero,"
^ZWCmcd("GP6","mcod",12)=" ;      type like integer, non-zero"
^ZWCmcd("GP6","mcod",13)=" ;"
^ZWCmcd("GP6","mcod",14)=" I $G(devg)="""" S devg=""x/MGbl-""_GBL_"".2.html"""
^ZWCmcd("GP6","mcod",15)="  ;"
^ZWCmcd("GP6","mcod",16)=" ; Field Dictionary-test values,"
^ZWCmcd("GP6","mcod",17)=" ; expand vals (output transforms included, eg dates)"
^ZWCmcd("GP6","mcod",18)="    ;HG(GBL,SIMO,S1rs,S1re,S1rn,Fil) S Fil=$G(Fil) "
^ZWCmcd("GP6","mcod",19)="    I $zro'[""rd3hg"",$zro'[""rmGP"" DO  Q"
^ZWCmcd("GP6","mcod",20)="           .S zro=$zro "
^ZWCmcd("GP6","mcod",21)="           .D b^dv(""^GP6 $zro needs vers rd3hg or rmGP*  of HGen  ^hgh* etc."",""zro"")"
^ZWCmcd("GP6","mcod",22)="        ;   "
^ZWCmcd("GP6","mcod",23)=" S S1rs=$G(S1rs),S1re=$G(S1re),S1rn=$G(S1rn),S1MO=$G(S1MO)"
^ZWCmcd("GP6","mcod",24)="        D Init^hgh  ; TI(), HT()  etc"
^ZWCmcd("GP6","mcod",25)="          I $E(GBL)=""^"" S TI(""hd"")=""MGbl ""_GBL"
^ZWCmcd("GP6","mcod",26)="          E  S TI(""hd"")=""Array ""_GBL"
^ZWCmcd("GP6","mcod",27)="          S TI(""title"")=GBL"
^ZWCmcd("GP6","mcod",28)="          S TI(""VVL"")=""byGP"",byGP=""by ^""_$T(+0)"
^ZWCmcd("GP6","mcod",29)="        S gbHFL=""S1:10,V1:30""   D I^hght(gbHFL)  ; Compile"
^ZWCmcd("GP6","mcod",30)="        D Icss"
^ZWCmcd("GP6","mcod",31)=" S Q=$$HGS^hgh I Q'="""" D b^dv(""Err HGS"",""Q,devg"") Q"
^ZWCmcd("GP6","mcod",32)=" D PR(GBL,S1MO,S1rs,S1re,S1rn)  ; guts : HT()"
^ZWCmcd("GP6","mcod",33)=" S Q=$$HGE^hgh I Q'=""""  ;?"
^ZWCmcd("GP6","mcod",34)=" S Q=$$WH^hgh(devg) I Q'="""" D b^dv(""Err Writing out devg"",""Q,devg"") Q"
^ZWCmcd("GP6","mcod",35)=" Q"
^ZWCmcd("GP6","mcod",36)=" ;"
^ZWCmcd("GP6","mcod",37)=" ; WRITES  converted to ^hgh  (wrapped in html by caller(S) )"
^ZWCmcd("GP6-BrLn","mcod",95)=";* devg : Braceline"
^ZWCmcd("GP6-BrLn","mcod",96)="BrLn    S n=$L(devg,""/""),brFol=$P(devg,""/"",n-1),brB=$P(devg,""/"",3,n-2)"
^ZWCmcd("GP6-BrLn","mcod",97)="        S brDt=$ZD($H,""DAY 12AM DD-MON-YYYY"","""",""Sun,Mon,Tue,Wed,Thu,Fri,Sat"")"
^ZWCmcd("GP6-BrLn","mcod",98)="        S h=""   { ""_brB_""/,   ""_$$LNK^hgh(brFol_""/*"",""./"")_""  } ""_brDt"
^ZWCmcd("GP6-BrLn","mcod",99)="        D ot^hgh(""#brln""),sv^hgh(h),ct^hgh(""#brln"")"
^ZWCmcd("GP6-BrLn","mcod",100)="        "
^ZWCmcd("GP6-DS2","mcod",86)=";*  Gnm2, S2"
^ZWCmcd("GP6-DS2","mcod",87)="DS2     I S2="""" Q"
^ZWCmcd("GP6-DS2","mcod",88)="        D ot^hgh(""#P2"")"
^ZWCmcd("GP6-DS2","mcod",89)="        D ot^hgh("".g2""),sv^hgh(Gnm),ct^hgh("".g2"")"
^ZWCmcd("GP6-DS2","mcod",90)=" D ot^hgh("".s2""),sv^hgh(""""""""_S2_""""""""),ct^hgh("".s2"")"
^ZWCmcd("GP6-DS2","mcod",91)=" I D2t D ot^hgh("".pls""),sv^hgh(""+ ""),ct^hgh("".pls"")"
^ZWCmcd("GP6-DS2","mcod",92)="        I D2v D ot^hgh("".v2""),sv^hgh("")==""),sv^hgh(V2),ct^hgh("".v2"")"
^ZWCmcd("GP6-DS2","mcod",93)="        D ct^hgh(""#P2"")"
^ZWCmcd("GP6-DS2","mcod",94)=" Q"
^ZWCmcd("GP6-Icss","mcod",101)=";*   "
^ZWCmcd("GP6-Icss","mcod",102)="Icss    ;  .P1 [ .g1, .s1, .pls, .v1, .P2  [ .g2, .s2, .v2 ] ]"
^ZWCmcd("GP6-Icss","mcod",103)="        D css^hgh(""body"",""max-width: 800px;"")"
^ZWCmcd("GP6-Icss","mcod",104)="        D css^hgh("".g1"",""background-color: #D7BDE2;"")         "
^ZWCmcd("GP6-Icss","mcod",105)="        D css^hgh("".s1"",""background-color: #D7BDE2;"")"
^ZWCmcd("GP6-Icss","mcod",106)="        D css^hgh("".v1"",""background-color: #D7BDE2;"")  ; lt blue       "
^ZWCmcd("GP6-Icss","mcod",107)="        D flexrow^hgh("".P1"","".g1 .s1 .v1"")"
^ZWCmcd("GP6-Icss","mcod",108)="        D flexrow^hgh("".P2"","".g2 .s2 .pls .v2"")        "
^ZWCmcd("GP6-Icss","mcod",109)="        D css^hgh("".g2"",""background-color: #D7BDE2;"")"
^ZWCmcd("GP6-Icss","mcod",110)="        D css^hgh("".s2"",""background-color: #D7FFFF; text-align: right;"")"
^ZWCmcd("GP6-Icss","mcod",111)="        D css^hgh("".pls"",""background-color: #D7BDE2;"")        "
^ZWCmcd("GP6-Icss","mcod",112)="        D css^hgh("".v2"",""background-color:yellow;flex: 8;"")"
^ZWCmcd("GP6-Icss","mcod",113)="        Q"
^ZWCmcd("GP6-P1","mcod",64)="P1 D ot^hgh("".P1"")"
^ZWCmcd("GP6-P1","mcod",65)=" I D1v DO  ;"
^ZWCmcd("GP6-P1","mcod",66)="      .D ot^hgh("".s1""),sv^hgh(Gnm),ct^hgh("".s1"")"
^ZWCmcd("GP6-P1","mcod",67)="      .D ot^hgh("".v1""),sv^hgh(V1),ct^hgh("".v1"")"
^ZWCmcd("GP6-P1","mcod",68)=" I D1t D P2"
^ZWCmcd("GP6-P1","mcod",69)=" D ct^hgh("".P1"")"
^ZWCmcd("GP6-P1","mcod",70)=" Q"
^ZWCmcd("GP6-P1E","mcod",56)=";*$$Q ;Next S1, Range/Quit Tests -> Q"
^ZWCmcd("GP6-P1E","mcod",57)="P1E() S Q=0 I S1="""" Q 1"
^ZWCmcd("GP6-P1E","mcod",58)=" I S1re'=""""&(S1]S1re) Q 2"
^ZWCmcd("GP6-P1E","mcod",59)=" I S1rn&(S1'<S1rn) Q 3"
^ZWCmcd("GP6-P1E","mcod",60)=" S GBLundef='NS1"
^ZWCmcd("GP6-P1E","mcod",61)=" Q """""
^ZWCmcd("GP6-P1E","mcod",62)=" ;"
^ZWCmcd("GP6-P1E","mcod",63)=" ; GBL : Gnm, S1, D1, V1"
^ZWCmcd("GP6-P2","mcod",71)=";*"
^ZWCmcd("GP6-P2","mcod",72)=";*   *** ??? Second variable subscript"
^ZWCmcd("GP6-P2","mcod",73)="P2 S S2="""""
^ZWCmcd("GP6-P2","mcod",74)=" F N2=0:1 S S2=$O(@GBL@(S1,S2)) Q:S2=""""  D SN2,DS2  ;"
^ZWCmcd("GP6-P2","mcod",75)=" Q"
^ZWCmcd("GP6-PR","mcod",38)="PR(GBL,SIMO,S1rs,S1re,S1rn)  S S1rs=$G(S1rs),S1re=$G(S1re),S1rn=$G(S1rn),S1MO=$G(S1MO)"
^ZWCmcd("GP6-PR","mcod",39)="        D BrLn"
^ZWCmcd("GP6-PR","mcod",40)=" S S1=S1rs F NS1=0:1 D SN1 S S1=$O(@GBL@(S1)) Q:S1=""""    Q:$$P1E"
^ZWCmcd("GP6-PR","mcod",41)=" I NS1=0 W:$X ! W !,""MGlobal '"",GBL,""'  is UnDefined."",!"
^ZWCmcd("GP6-PR","mcod",42)=" Q"
^ZWCmcd("GP6-SN1","mcod",43)=";*  GBL : Gnm, D1, D1t, D1v, V1"
^ZWCmcd("GP6-SN1","mcod",44)="SN1     I S1="""" Q"
^ZWCmcd("GP6-SN1","mcod",45)="        S D1=$D(@GBL@(S1)),V1=$G(@GBL@(S1))"
^ZWCmcd("GP6-SN1","mcod",46)="        S D1t=D1>9  ; 0/1 "
^ZWCmcd("GP6-SN1","mcod",47)="        S D1v=D1#2  ; 0/1"
^ZWCmcd("GP6-SN1","mcod",48)="        I D1v,V1="""" S V1="" - Null Stored."""
^ZWCmcd("GP6-SN1","mcod",49)=" I GBL'[""("" S Gnm=""("""
^ZWCmcd("GP6-SN1","mcod",50)=" E  S Gnm="","""
^ZWCmcd("GP6-SN1","mcod",51)=" S Gnm=Gnm_""""""""_S1_"""""""""
^ZWCmcd("GP6-SN1","mcod",52)=" I D1v S Gnm=Gnm_"")="""
^ZWCmcd("GP6-SN1","mcod",53)=" ;D b^dv(""Log S1"",""GBL,Gnm,D1,D1t,D1v,S1,V1"")"
^ZWCmcd("GP6-SN1","mcod",54)=" D P1"
^ZWCmcd("GP6-SN1","mcod",55)="    Q"
^ZWCmcd("GP6-SN2","mcod",76)=";*  GBL, Gnm, S1, S2 : Gnm2, D2, D2t, D2v, V2"
^ZWCmcd("GP6-SN2","mcod",77)="SN2     S D2=$D(@GBL@(S1,S2)),V2=$G(@GBL@(S1,S2))"
^ZWCmcd("GP6-SN2","mcod",78)="        S D2t=D2>9  ; 0/1 "
^ZWCmcd("GP6-SN2","mcod",79)="        S D2v=D2#2  ; 0/1"
^ZWCmcd("GP6-SN2","mcod",80)="        I D2v,V2="""" S V2="" - Null Stored."""
^ZWCmcd("GP6-SN2","mcod",81)=" S Gnm2=Gnm_"","""
^ZWCmcd("GP6-SN2","mcod",82)=" ;S Gnm2=Gnm2_""""""""_S2_"""""""""
^ZWCmcd("GP6-SN2","mcod",83)=" ;D b^dv(""Log S2"",""GBL,Gnm2,D2,D2t,D2v,S2,V2"")"
^ZWCmcd("GP6-SN2","mcod",84)="        Q"
^ZWCmcd("GP6-SN2","mcod",85)=""
^ZWCmcd("GP6-T","mcod",114)=";*"
^ZWCmcd("GP6-T","mcod",115)="T()     Q 1  ; See tgp6^GPTest  Test & debug"
^ZWCmcd("HG7","mcod",1)="HG7(G,Gfmt) ;CKW/ESC i30may22 gmsa/ rMgb3/ ;20220530-48; HGen *FL-based Global Dump"
^ZWCmcd("HG7","mcod",2)=";"
^ZWCmcd("HG7","mcod",3)=";"
^ZWCmcd("HG7","mcod",4)=";   G is Global Base, for @G  including subscript(s), eg _piece 2 of *FL"
^ZWCmcd("HG7","mcod",5)=";"
^ZWCmcd("HG7","mcod",6)=";   HGen  nicely formatted html, css highlights,?links"
^ZWCmcd("HG7","mcod",7)=";      multi-short fields per line, incr compactness"
^ZWCmcd("HG7","mcod",8)=";      width managed, per field, audit first"
^ZWCmcd("HG7","mcod",9)=";"
^ZWCmcd("HG7","mcod",10)=";Slam dunk for primary databases ^ZWRM, ^ZWCB"
^ZWCmcd("HG7","mcod",11)=";  ^RCP(rid,*   a littl more challenging, useful for ^RCP(rid,0  attr"
^ZWCmcd("HG7","mcod",12)=";"
^ZWCmcd("KG0","mcod",1)="KG0(Gna,gFil)  ;CKW/ESC ix25jul22 gmma/ rmGP3/  ; mGlobal lister, Non-interactive"
^ZWCmcd("KG0","mcod",2)=";Gna syntax is zwr syntax, variable MGbl names and subscripts, * stems and a:b ranges"
^ZWCmcd("KG0","mcod",3)=";  zrid/^ZWZ(zrid,  W2B "
^ZWCmcd("KG0","mcod",4)=";  %ZD was output -> devG   --Input devG not just Fil, Caller manage base ---"
^ZWCmcd("KG0","mcod",5)="        NEW %in,%ZL,%ZD"
^ZWCmcd("KG0","mcod",6)="        NEW Q I $$arg^mws(""Gna,W2B"") Goto Qbug"
^ZWCmcd("KG0","mcod",7)="        ;I '$d(%zdebug) n $et s $et=""zg ""_$zl_"":ERR^%G"" u $p:(ctrap=$c(3):exc=""zg ""_$zl_"":LOOP^%G"")"
^ZWCmcd("KG0","mcod",8)="        S gFil=$G(gFil) I gFil'="""" DO  ;"
^ZWCmcd("KG0","mcod",9)="          .I gFil'[""-"" S gFil=""ag-MGbl-""_gFil"
^ZWCmcd("KG0","mcod",10)="          .I gFil'[""mg2.txt"" S gFil=gFil_"".mg2.txt"""
^ZWCmcd("KG0","mcod",11)="        I $G(W2B)="""" DO  ;"
^ZWCmcd("KG0","mcod",12)="          .I $G(zrid) S W2B=$G(^ZWZ(zrid,""W2B""))"
^ZWCmcd("KG0","mcod",13)="          .I $G(W2B)="""" D IB^mwIpg"
^ZWCmcd("KG0","mcod",14)="          .I $G(W2B)="""" D ^devIB S W2B=PB_""ww2mbr/"""
^ZWCmcd("KG0","mcod",15)="          .D ^dvstk,b^dv(""Forced default W2B ??"",""W2B,zrid,PB,SB"")"
^ZWCmcd("KG0","mcod",16)="        ;"
^ZWCmcd("KG0","mcod",17)="        D SdevG ; Gna : devG"
^ZWCmcd("KG0","mcod",18)="        D base"
^ZWCmcd("KG0","mcod",19)="        D CFM^devIO(devG)"
^ZWCmcd("KG0-ERR","mcod",59)="ERR     u $p w !,$p($zs,"","",2,99),!"
^ZWCmcd("KG0-ERR","mcod",60)="        s $ecode="""""
^ZWCmcd("KG0-ERR","mcod",61)="        ; Warning - Fall-through"
^ZWCmcd("KG0-EXIT","mcod",62)="EXIT    i $d(%ZD),%ZD'=$p c %ZD"
^ZWCmcd("KG0-EXIT","mcod",63)="        u $p:(ctrap="""":exc="""")"
^ZWCmcd("KG0-EXIT","mcod",64)="        q"
^ZWCmcd("KG0-G1","mcod",33)=";*  Gna  MGbl or Array Name, ?node"
^ZWCmcd("KG0-G1","mcod",34)="G1      "
^ZWCmcd("KG0-G1","mcod",35)="        s:Gna=""*"" Gna=""?.E(*)"""
^ZWCmcd("KG0-G1","mcod",36)="        s:$p(Gna,""("")=""*"" $p(Gna,""("")=""?.E"""
^ZWCmcd("KG0-G1","mcod",37)="        s:$e(Gna)'=""^"" Gna=""^""_Gna"
^ZWCmcd("KG0-G1","mcod",38)="        n $et s $et=""ZG ""_$ZL_"":badzwr"""
^ZWCmcd("KG0-G1","mcod",39)="        USE devG I $D(@Gna)=0 W !,Gna,"" is UNDEF."",!! Q"
^ZWCmcd("KG0-G1","mcod",40)="          W !,Gna,"" - "",!"
^ZWCmcd("KG0-G1","mcod",41)="          zwr @Gna W !!"
^ZWCmcd("KG0-G1","mcod",42)="          USE $P"
^ZWCmcd("KG0-G1","mcod",43)="        Q"
^ZWCmcd("KG0-LOOP","mcod",65)="LOOP    if 1'=$zeof d base"
^ZWCmcd("KG0-LOOP","mcod",66)="        q"
^ZWCmcd("KG0-Q","mcod",20)="Q     Q:$Q Q  Q:Q=""""  D qd Q"
^ZWCmcd("KG0-Qbug","mcod",21)="Qbug  D qd Q:$Q Q Q"
^ZWCmcd("KG0-SdevG","mcod",24)=";*  Gna : devG, opened"
^ZWCmcd("KG0-SdevG","mcod",25)="SdevG   NEW Q S Q=""""  KILL %ZD  ;safety"
^ZWCmcd("KG0-SdevG","mcod",26)="        I gFil="""" S gFil=""ag-MGbl-""_$TR(Gna,""^"","""")_"".mg2.txt"""
^ZWCmcd("KG0-SdevG","mcod",27)="        S devG=W2B_gFil"
^ZWCmcd("KG0-SdevG","mcod",28)="        S Q=$$OFW^devIO(devG) I Q'="""" Goto Qbug"
^ZWCmcd("KG0-SdevG","mcod",29)="        Goto Q"
^ZWCmcd("KG0-badzwr","mcod",44)="badzwr  u $p w !,$p($zs,"","",3,99),!"
^ZWCmcd("KG0-badzwr","mcod",45)="        s $ec="""""
^ZWCmcd("KG0-badzwr","mcod",46)="        d EXIT"
^ZWCmcd("KG0-badzwr","mcod",47)="        q"
^ZWCmcd("KG0-base","mcod",30)=";*        "
^ZWCmcd("KG0-base","mcod",31)="base    D G1"
^ZWCmcd("KG0-base","mcod",32)="        Q"
^ZWCmcd("KG0-help","mcod",48)="help    w !,""VALID Gna values"",!!"
^ZWCmcd("KG0-help","mcod",49)="        w !,""[global name]"",?16,""the MUMPS name for the global e.g. ABC, or"""
^ZWCmcd("KG0-help","mcod",50)="        w !?16,""a MUMPS pattern to match selected globals e.g. ?1""""A"""".E, or"""
^ZWCmcd("KG0-help","mcod",51)="        w !?16,""""""*"""" as a wildcard for all globals"""
^ZWCmcd("KG0-help","mcod",52)="        w !?16,""the global name may be followed by: """
^ZWCmcd("KG0-help","mcod",53)="        w !?16,""subscript(s) in parentheses"""
^ZWCmcd("KG0-help","mcod",54)="        w !?16,""a subscript is a MUMPS expression e.g. """"joe"""",10,$e(a,1),"""
^ZWCmcd("KG0-help","mcod",55)="        w !?16,""a """"*"""" as a subscript causes all descendents to be included,"""
^ZWCmcd("KG0-help","mcod",56)="        w !?16,""or by a range of subscripts in parentheses"""
^ZWCmcd("KG0-help","mcod",57)="        w !?16,""expressed as [expr]:[expr] e.g 1:10 """"a"""":""""d"""""",!"
^ZWCmcd("KG0-help","mcod",58)="        Q"
^ZWCmcd("KG0-qd","mcod",22)="qd    D b^dv(""Err %Gmod devG "",""Q,devG"")"
^ZWCmcd("KG0-qd","mcod",23)="      Q  "
^ZWCmcd("KGD","mcod",1)="KGD     ;CKW/ESC i26jul22  gmma/ rmGP3/ ;20220726-12; GT.M %GD utility - global directory"
^ZWCmcd("KGD","mcod",2)="; mod from %GD, %GSEL combined and non-interactive, hgen"
^ZWCmcd("KGD","mcod",3)="        ;"
^ZWCmcd("KGD","mcod",4)="        NEW %ZG,%ZL"
^ZWCmcd("KGD","mcod",5)="        I '$D(%zdebug) NEW $et S $et=""zg ""_$zl_"":ERRgd^KGD"" USE $p:(ctrap=$c(3):exc=""KILL %ZG ZG ""_$ZL_"":LOOPgd^KGD"")"
^ZWCmcd("KGD","mcod",6)="        W !,""Global Directory"",!"
^ZWCmcd("KGD","mcod",7)="        D GD^KGSEL,EXITgd"
^ZWCmcd("KGD","mcod",8)="        Q"
^ZWCmcd("KGD-CALL","mcod",36)="CALL    ;invoke KGSEL without clearing %ZG (%ZG stores the list of globals from KGSEL searches)"
^ZWCmcd("KGD-CALL","mcod",37)="        NEW add,beg,cnt,d,end,g,gd,gdf,k,out,pat,stp,nfe"
^ZWCmcd("KGD-CALL","mcod",38)="        S (cnt,gd)=0"
^ZWCmcd("KGD-CALL","mcod",39)="        I $D(%ZG)>1 S g="""" FOR  S g=$O(%ZG(g)) Q:'$L(g)  S cnt=cnt+1"
^ZWCmcd("KGD-CALL","mcod",40)="        I $G(%ZG)'?.N S out=0 D setup,it S %ZG=cnt Q"
^ZWCmcd("KGD-CALL","mcod",41)="        S out=1"
^ZWCmcd("KGD-CALL","mcod",42)="        D main"
^ZWCmcd("KGD-CALL","mcod",43)="        USE:$D(d(""use"")) @d(""use"")"
^ZWCmcd("KGD-CALL","mcod",44)="        USE:$D(d(""io"")) d(""io"")"
^ZWCmcd("KGD-CALL","mcod",45)="        Q"
^ZWCmcd("KGD-ERR","mcod",185)="ERR     ;"
^ZWCmcd("KGD-ERR","mcod",186)="        USE:$D(d(""use"")) @d(""use"")"
^ZWCmcd("KGD-ERR","mcod",187)="        USE:$D(d(""io"")) d(""io"")"
^ZWCmcd("KGD-ERR","mcod",188)="        S $ECODE="""""
^ZWCmcd("KGD-ERR","mcod",189)="        Q"
^ZWCmcd("KGD-ERR","mcod",190)=" "
^ZWCmcd("KGD-ERRgd","mcod",9)="ERRgd     USE $P W !,$P($ZS,"","",2,99),!"
^ZWCmcd("KGD-ERRgd","mcod",10)="        S $ec="""""
^ZWCmcd("KGD-ERRgd","mcod",11)="        ; Warning: Fall-through!"
^ZWCmcd("KGD-EXITgd","mcod",12)="EXITgd    USE $p:(ctrap="""":exc="""")"
^ZWCmcd("KGD-EXITgd","mcod",13)="        Q"
^ZWCmcd("KGD-GD","mcod",25)="GD      ;"
^ZWCmcd("KGD-GD","mcod",26)="        NEW add,beg,cnt,d,end,g,gd,gdf,k,out,pat,stp,nfe"
^ZWCmcd("KGD-GD","mcod",27)="        S cnt=0,(out,gd,gdf)=1"
^ZWCmcd("KGD-GD","mcod",28)="        D main"
^ZWCmcd("KGD-GD","mcod",29)="        I gdf S %ZG=""*"" DO  ;"
^ZWCmcd("KGD-GD","mcod",30)="           .D setup,it "
^ZWCmcd("KGD-GD","mcod",31)="           .W !,""Total of "",cnt,"" global"",$S(cnt=1:""."",1:""s.""),!"
^ZWCmcd("KGD-GD","mcod",32)="        USE:$D(d(""use"")) @d(""use"")"
^ZWCmcd("KGD-GD","mcod",33)="        USE:$D(d(""io"")) d(""io"")"
^ZWCmcd("KGD-GD","mcod",34)="        Q"
^ZWCmcd("KGD-GD","mcod",35)=" "
^ZWCmcd("KGD-KGSEL","mcod",16)=";*        "
^ZWCmcd("KGD-KGSEL","mcod",17)="KGSEL   ;GT.M %GSEL utility - global select into a local array"
^ZWCmcd("KGD-KGSEL","mcod",18)="        ;invoke ^KGSEL to create %ZG - a local array of existing globals, interactively"
^ZWCmcd("KGD-KGSEL","mcod",19)="        ;"
^ZWCmcd("KGD-KGSEL","mcod",20)="        NEW add,beg,cnt,d,end,g,gd,gdf,k,out,pat,stp,nfe"
^ZWCmcd("KGD-KGSEL","mcod",21)="        D init,main"
^ZWCmcd("KGD-KGSEL","mcod",22)="        USE:$D(d(""use"")) @d(""use"")"
^ZWCmcd("KGD-KGSEL","mcod",23)="        USE:$D(d(""io"")) d(""io"")"
^ZWCmcd("KGD-KGSEL","mcod",24)="        Q"
^ZWCmcd("KGD-LOOP","mcod",191)="LOOP"
^ZWCmcd("KGD-LOOP","mcod",192)="        D main"
^ZWCmcd("KGD-LOOP","mcod",193)="        USE $P:(ctrap=$CHAR(3,4):exc="""")"
^ZWCmcd("KGD-LOOP","mcod",194)="        Q"
^ZWCmcd("KGD-LOOP","mcod",195)=" "
^ZWCmcd("KGD-LOOP","mcod",196)=";       Error message texts"
^ZWCmcd("KGD-LOOPgd","mcod",14)="LOOPgd    D GD^KGSEL,EXITgd"
^ZWCmcd("KGD-LOOPgd","mcod",15)="        Q"
^ZWCmcd("KGD-U257","mcod",197)="U257    ;""-E-ILLEGALUSE Illegal use of """"?"""". Only valid as 1st character when """"?D"""" or """"?d"""""""
^ZWCmcd("KGD-U258","mcod",198)="U258    ;""-E-INVALIDGBL Search string either uses invalid characters or is improperly formated"""
^ZWCmcd("KGD-U258","mcod",199)=""
^ZWCmcd("KGD-cur","mcod",168)="cur     ;"
^ZWCmcd("KGD-cur","mcod",169)="        S g="""""
^ZWCmcd("KGD-cur","mcod",170)="        FOR  S g=$O(%ZG(g)) Q:'$L(g)  W:$X>70 ! W g,?($X\10+1*10)"
^ZWCmcd("KGD-cur","mcod",171)="        W !,$S(gd:""T"",1:""Current t""),""otal of "",cnt,"" global"",$S(cnt=1:""."",1:""s.""),!"
^ZWCmcd("KGD-cur","mcod",172)="        Q"
^ZWCmcd("KGD-cur","mcod",173)="        I gd W ""Total of "",cnt,"" MGlobal"""
^ZWCmcd("KGD-cur","mcod",174)="        E   W ""Current total of "",cnt,"" MGlobal"""
^ZWCmcd("KGD-cur","mcod",175)="        W:cnt>1 ""s""  W ""."",!"
^ZWCmcd("KGD-cur","mcod",176)="        Q"
^ZWCmcd("KGD-help","mcod",156)="help    ;"
^ZWCmcd("KGD-help","mcod",157)="        W !,?2,""<RET>"",?25,""to leave"",!,?2,""""""*"""""",?25,""for all"""
^ZWCmcd("KGD-help","mcod",158)="        W !,?2,""global"",?25,""for 1 global"""
^ZWCmcd("KGD-help","mcod",159)="        W !,?2,""global1:global2"",?25,""for a range"""
^ZWCmcd("KGD-help","mcod",160)="        W !,?2,""""""*"""" as a wildcard"",?25,""permitting any number of characters"""
^ZWCmcd("KGD-help","mcod",161)="        W !,?2,""""""%"""" as a wildcard"",?25,""for a single character in positions other than the first"""
^ZWCmcd("KGD-help","mcod",162)="        W !,?2,""""""?"""" as a wildcard"",?25,""for a single character in positions other than the first"""
^ZWCmcd("KGD-help","mcod",163)="        Q:gd"
^ZWCmcd("KGD-help","mcod",164)="        W !,?2,""""""'"""" as the 1st character"",!,?25,""to remove globals from the list"""
^ZWCmcd("KGD-help","mcod",165)="        W !,?2,""?D"",?25,""for the currently selected globals"",!"
^ZWCmcd("KGD-help","mcod",166)="        Q"
^ZWCmcd("KGD-help","mcod",167)=" "
^ZWCmcd("KGD-init","mcod",46)=";*"
^ZWCmcd("KGD-init","mcod",47)="init    ;"
^ZWCmcd("KGD-init","mcod",48)="        KILL %ZG"
^ZWCmcd("KGD-init","mcod",49)="        S (cnt,gd)=0,out=1"
^ZWCmcd("KGD-init","mcod",50)="        Q"
^ZWCmcd("KGD-init","mcod",51)=" "
^ZWCmcd("KGD-inter","mcod",67)="inter   ;"
^ZWCmcd("KGD-inter","mcod",68)="        S nfe=0"
^ZWCmcd("KGD-inter","mcod",69)="        READ !,""Global ^"",%ZG,! Q:'$L(%ZG)"
^ZWCmcd("KGD-inter","mcod",70)="        I $E(%ZG)=""?"",$L(%ZG)=1 D help Q"
^ZWCmcd("KGD-inter","mcod",71)="        I (%ZG=""?D"")!(%ZG=""?d"") D cur Q"
^ZWCmcd("KGD-inter","mcod",72)="        I $E(%ZG)=""?"" S nfe=1 D nonfatal Q"
^ZWCmcd("KGD-inter","mcod",73)="        D setup I nfe>0 S nfe=0,gdf=0 Q"
^ZWCmcd("KGD-inter","mcod",74)="        D it"
^ZWCmcd("KGD-inter","mcod",75)="        W !,$S(gd:""T"",1:""Current t""),""otal of "",cnt,"" global"",$S(cnt=1:""."",1:""s.""),!"
^ZWCmcd("KGD-inter","mcod",76)="        Q"
^ZWCmcd("KGD-inter","mcod",77)=" "
^ZWCmcd("KGD-it","mcod",110)="it      ;"
^ZWCmcd("KGD-it","mcod",111)="        S gdf=0"
^ZWCmcd("KGD-it","mcod",112)="        I end'?.""*"",end']beg Q"
^ZWCmcd("KGD-it","mcod",113)="        S g=beg D pat"
^ZWCmcd("KGD-it","mcod",114)="        I pat["""""""" D start FOR  D search Q:'$L(g)  D save"
^ZWCmcd("KGD-it","mcod",115)="        I pat["""""""",'$L(end) Q"
^ZWCmcd("KGD-it","mcod",116)="        S beg=stp"
^ZWCmcd("KGD-it","mcod",117)="        S:'$L(g) g=stp"
^ZWCmcd("KGD-it","mcod",118)="        S pat="".E"",stp=""^""_$E(end)_$TR($E(end,2,9999),""%"",""z"")"
^ZWCmcd("KGD-it","mcod",119)="        D start FOR  D search Q:'$L(g)  D save"
^ZWCmcd("KGD-it","mcod",120)="        S g=end D pat"
^ZWCmcd("KGD-it","mcod",121)="        I pat["""""""" S:beg]g g=beg D start FOR  D search Q:'$L(g)  D save"
^ZWCmcd("KGD-it","mcod",122)="        Q"
^ZWCmcd("KGD-it","mcod",123)=" "
^ZWCmcd("KGD-main","mcod",52)="main    ;"
^ZWCmcd("KGD-main","mcod",53)="        S d(""io"")=$IO"
^ZWCmcd("KGD-main","mcod",54)="        I '$D(%zdebug) NEW $ETRAP S $ETRAP=""ZGOTO ""_$ZL_"":ERR^""_$T(+0) DO  ;"
^ZWCmcd("KGD-main","mcod",55)="        . NEW x"
^ZWCmcd("KGD-main","mcod",56)="        . ZSHOW ""d"":d       ; save original $p settings"
^ZWCmcd("KGD-main","mcod",57)="        . S x=$P($P(d(""D"",1),""CTRA="",2),"" "")"
^ZWCmcd("KGD-main","mcod",58)="        . S:""""=x x="""""""""""""
^ZWCmcd("KGD-main","mcod",59)="        . S d(""use"")=""$P:(CTRAP=""_x_"":EXCEPTION="",x=$P(d(""D"",1),""EXCE="",2),x=$ZWR($E(x,2,$L(x)-1))"
^ZWCmcd("KGD-main","mcod",60)="        . S:""""=x x="""""""""""""
^ZWCmcd("KGD-main","mcod",61)="        . S d(""use"")=d(""use"")_x_"":""_$S($F(d(""D"",1),""NOCENE""):""NOCENABLE"",1:""CENABLE"")_"")"""
^ZWCmcd("KGD-main","mcod",62)="        . USE $P:(CTRAP=$C(3,4):EXCEPTION="""":NOCENABLE)"
^ZWCmcd("KGD-main","mcod",63)="        FOR  D inter Q:'$L(%ZG)  ; Q:%ZG="""""
^ZWCmcd("KGD-main","mcod",64)="        S %ZG=cnt"
^ZWCmcd("KGD-main","mcod",65)="        Q"
^ZWCmcd("KGD-main","mcod",66)=" "
^ZWCmcd("KGD-nonfatal","mcod",177)="nonfatal"
^ZWCmcd("KGD-nonfatal","mcod",178)="        NEW ecde"
^ZWCmcd("KGD-nonfatal","mcod",179)="        S $ECODE="""""
^ZWCmcd("KGD-nonfatal","mcod",180)="        I nfe=1 S ecde=""U257"""
^ZWCmcd("KGD-nonfatal","mcod",181)="        ELSE  I nfe=2 S ecde=""U258"""
^ZWCmcd("KGD-nonfatal","mcod",182)="        W $T(+0),@$P($T(@ecde),"";"",2),!"
^ZWCmcd("KGD-nonfatal","mcod",183)="        Q"
^ZWCmcd("KGD-nonfatal","mcod",184)=" "
^ZWCmcd("KGD-pat","mcod",124)="pat     ;"
^ZWCmcd("KGD-pat","mcod",125)="        NEW tmpstp"
^ZWCmcd("KGD-pat","mcod",126)="        S:""%""=$E(g) g=""!""_$E(g,2,9999)"
^ZWCmcd("KGD-pat","mcod",127)="        S pat=g"
^ZWCmcd("KGD-pat","mcod",128)="        FOR  Q:$L(g,""%"")<2  DO  ;"
^ZWCmcd("KGD-pat","mcod",129)="        .S g=$P(g,""%"",1)_""#""_$P(g,""%"",2,999),pat=$P(pat,""%"",1)_""""""1E1""""""_$P(pat,""%"",2,999)"
^ZWCmcd("KGD-pat","mcod",130)="        FOR  Q:$L(g,""*"")<2  DO  ;"
^ZWCmcd("KGD-pat","mcod",131)="        .S g=$P(g,""*"",1)_""$""_$P(g,""*"",2,999),pat=$P(pat,""*"",1)_"""""".E1""""""_$P(pat,""*"",2,999)"
^ZWCmcd("KGD-pat","mcod",132)="        S:""!""=$E(g) g=""%""_$E(g,2,9999),pat=""%""_$E(pat,2,9999)"
^ZWCmcd("KGD-pat","mcod",133)="        I pat["""""""" S pat=""1""""^""_pat_"""""""""
^ZWCmcd("KGD-pat","mcod",134)="        S tmpstp=""z"",$P(tmpstp,""z"",30)=""z"""
^ZWCmcd("KGD-pat","mcod",135)="        S g=""^""_$P($P(g,""#""),""$""),stp=g_$E(tmpstp,$L(g)-1,31)"
^ZWCmcd("KGD-pat","mcod",136)="        Q"
^ZWCmcd("KGD-pat","mcod",137)=" "
^ZWCmcd("KGD-prt","mcod",152)="prt     ;"
^ZWCmcd("KGD-prt","mcod",153)="        W:$X>70 ! W g,?$X\10+1*10"
^ZWCmcd("KGD-prt","mcod",154)="        Q"
^ZWCmcd("KGD-prt","mcod",155)=" "
^ZWCmcd("KGD-save","mcod",147)="save    ;"
^ZWCmcd("KGD-save","mcod",148)="        I add,'$D(%ZG(g)) S %ZG(g)="""",cnt=cnt+1 D prt:out"
^ZWCmcd("KGD-save","mcod",149)="        I 'add,$D(%ZG(g)) KILL %ZG(g) S cnt=cnt-1 D prt:out"
^ZWCmcd("KGD-save","mcod",150)="        Q"
^ZWCmcd("KGD-save","mcod",151)=" "
^ZWCmcd("KGD-search","mcod",143)="search  ;"
^ZWCmcd("KGD-search","mcod",144)="        FOR  S g=$O(@g) S:g]stp g="""" Q:g?@pat!'$L(g)  ;Q:g=""""  Q:g?@pat"
^ZWCmcd("KGD-search","mcod",145)="        Q"
^ZWCmcd("KGD-search","mcod",146)=" "
^ZWCmcd("KGD-setup","mcod",78)="setup   ;Handles the base case of no range"
^ZWCmcd("KGD-setup","mcod",79)="        NEW g1,et"
^ZWCmcd("KGD-setup","mcod",80)="        I gd S add=1,cnt=0,g=%ZG KILL %ZG S %ZG=g"
^ZWCmcd("KGD-setup","mcod",81)="        ELSE  I ""'-""[$E(%ZG) S add=0,g=$E(%ZG,2,999)"
^ZWCmcd("KGD-setup","mcod",82)="        ELSE  S add=1,g=%ZG"
^ZWCmcd("KGD-setup","mcod",83)="        S g1=$TR(g,""?%*"",""aaa"") ;Substitute wildcards for valid characters"
^ZWCmcd("KGD-setup","mcod",84)="        DO  ;"
^ZWCmcd("KGD-setup","mcod",85)="        . S et=$ETRAP NEW $ETRAP,$ESTACK S $ETRAP=""S $ECODE="""""""",$ETRAP=et D setup2"",g1=$QSUBSCRIPT(g1,1)"
^ZWCmcd("KGD-setup","mcod",86)="        . S:$F(g,""("")'=0 $E(g,$F(g,""("")-1,$L(g))="""""
^ZWCmcd("KGD-setup","mcod",87)="        . S:$E(g)=""^"" $E(g)="""""
^ZWCmcd("KGD-setup","mcod",88)="        I ""?""=$E(g,$F(g,"":"")) S nfe=1 D nonfatal Q"
^ZWCmcd("KGD-setup","mcod",89)="        S g=$TR(g,""?"",""%""),beg=$P(g,"":"",1),end=$P(g,"":"",2)"
^ZWCmcd("KGD-setup","mcod",90)="        I end=beg S end="""""
^ZWCmcd("KGD-setup","mcod",91)="        Q"
^ZWCmcd("KGD-setup","mcod",92)=" "
^ZWCmcd("KGD-setup2","mcod",93)="setup2  ;Handles the case of a range argument"
^ZWCmcd("KGD-setup2","mcod",94)="        NEW p,q,x,di,beg1"
^ZWCmcd("KGD-setup2","mcod",95)="        S p=$L(g1,"":"")"
^ZWCmcd("KGD-setup2","mcod",96)="        I p<2 S nfe=2 D nonfatal Q"
^ZWCmcd("KGD-setup2","mcod",97)="        ELSE  I p>2 S q=$L(g1,"""""""")-1 F x=2:2:q S $P(g1,"""""""",x)=$TR($P(g1,"""""""",x),"":"",""a"")"
^ZWCmcd("KGD-setup2","mcod",98)="        DO  ;"
^ZWCmcd("KGD-setup2","mcod",99)="        . S beg=$P(g1,"":"",1),end=$P(g1,"":"",2)"
^ZWCmcd("KGD-setup2","mcod",100)="        . NEW $ETRAP,$ESTACK S $ETRAP=""S nfe=2 D nonfatal"",beg1=$QSUBSCRIPT(beg,0),end=$QSUBSCRIPT(end,0)"
^ZWCmcd("KGD-setup2","mcod",101)="        Q:nfe>0"
^ZWCmcd("KGD-setup2","mcod",102)="        S di=$L(beg),beg=$E(g,1,di),end=$E(g,di+2,$L(g))"
^ZWCmcd("KGD-setup2","mcod",103)="        S:$F(beg,""("")'=0 $E(beg,$F(beg,""("")-1,$L(beg))="""""
^ZWCmcd("KGD-setup2","mcod",104)="        S:$E(beg)=""^"" $E(beg)="""""
^ZWCmcd("KGD-setup2","mcod",105)="        S:$F(end,""("")'=0 $E(end,$F(end,""("")-1,$L(end))="""""
^ZWCmcd("KGD-setup2","mcod",106)="        S:$E(end)=""^"" $E(end)="""""
^ZWCmcd("KGD-setup2","mcod",107)="        S g=beg_"":""_end"
^ZWCmcd("KGD-setup2","mcod",108)="        Q"
^ZWCmcd("KGD-setup2","mcod",109)=" "
^ZWCmcd("KGD-start","mcod",138)="start   ;"
^ZWCmcd("KGD-start","mcod",139)="        S:""^""=g g=""^%"""
^ZWCmcd("KGD-start","mcod",140)="        I g?@pat,$D(@g) D save"
^ZWCmcd("KGD-start","mcod",141)="        Q"
^ZWCmcd("KGD-start","mcod",142)=" "
^ZWCmcd("TOIT2","mcod",1)="TOIT2  ;CKW/ESC  i11oct19  ; 20191013-04;Test ^TOI ver2  $T and TCL() driven"
^ZWCmcd("TOIT2","mcod",2)="   ; in gmsa/  rTOI7/   No Refs... in gmsa./  30mar23"
^ZWCmcd("TOIT2","mcod",3)=";"
^ZWCmcd("TOIT2","mcod",4)=";"
^ZWCmcd("TOIT2","mcod",5)=";  Menu Op  toit.  FE  fl4Menu"
^ZWCmcd("TOIT2-CA","mcod",43)=";* Compile TOIa"
^ZWCmcd("TOIT2-CA","mcod",44)="CA  I t2'="""" S sTFL=t2  ; sTFL on CA!line"
^ZWCmcd("TOIT2-CA","mcod",45)="    I $G(sTFL)="""" D b^dv(""Need tsidT and sTFL before CA!"",""tsid,tsidT,sTFL"") Q"
^ZWCmcd("TOIT2-CA","mcod",46)="    NEW (tFL,sTFL,tsidT,toiFL)  "
^ZWCmcd("TOIT2-CA","mcod",47)="    S Q=$$^TOIa(sTFL,tsidT)"
^ZWCmcd("TOIT2-CA","mcod",48)="       I Q'="""" D b^dv(""Err ^TOIa"",""Q,tsidT"") Q"
^ZWCmcd("TOIT2-CA","mcod",49)="    S rja1=$$jL(toiFL)"
^ZWCmcd("TOIT2-CA","mcod",50)="      I rja1="""" D b^dv(""rja1 @toiFL null?"",""rja1,sTFL,toiFL,"")"
^ZWCmcd("TOIT2-CA","mcod",51)="    KILL TGs MERGE TGs=^TG(tsidT)"
^ZWCmcd("TOIT2-CA","mcod",52)="    I '$D(TGs) D b^dv(""No ^TG, TGs tsidT"")"
^ZWCmcd("TOIT2-CA","mcod",53)="    S rja2=$$jA(""TGs"")"
^ZWCmcd("TOIT2-CA","mcod",54)="    Q"
^ZWCmcd("TOIT2-ITC","mcod",131)=";*"
^ZWCmcd("TOIT2-ITC","mcod",132)="ITC  KILL VNT  S TvnFL=""tsidT,sTFL,eja1,eja2,ejln,Tin"""
^ZWCmcd("TOIT2-ITC","mcod",133)="     F vi=1:1:$L(TvnFL,"","") DO  ;"
^ZWCmcd("TOIT2-ITC","mcod",134)="       .S vn=$P(TvnFL,"","",vi)"
^ZWCmcd("TOIT2-ITC","mcod",135)="       .S VNT(vn)=vn"
^ZWCmcd("TOIT2-ITC","mcod",136)="       .S vnc=$$LC^dvs(vn),VNT(vnc)=vn"
^ZWCmcd("TOIT2-ITC","mcod",137)="     S (rja1,rja2,rjln)="""""
^ZWCmcd("TOIT2-ITC","mcod",138)="     S (eja1,eja2,ejln)="""""
^ZWCmcd("TOIT2-ITC","mcod",139)="     S tsidT=""??"",Tset=""??"""
^ZWCmcd("TOIT2-ITC","mcod",140)="     Q"
^ZWCmcd("TOIT2-PL","mcod",67)=";*$$  Process Line Tin, tsidT vs @tFL from TOIp"
^ZWCmcd("TOIT2-PL","mcod",68)="PL(Qi) NEW Qp,t,Q  S Qp=$G(Qi)"
^ZWCmcd("TOIT2-PL","mcod",69)="    D NFL^TOIs(tFL)"
^ZWCmcd("TOIT2-PL","mcod",70)="    S Q=$$^TOIp(Tin,tsidT)"
^ZWCmcd("TOIT2-PL","mcod",71)="      I Q'="""" S:Qp'="""" Qp=Qp_"","" S Qp=Qp_Q Q Qp"
^ZWCmcd("TOIT2-PL","mcod",72)="      I tFL="""" DO   Q Qp_"",NulltFL"""
^ZWCmcd("TOIT2-PL","mcod",73)="        .D b^dv(""Must have tFL from sTFL/CA ??"",""tFL,sTFL"")"
^ZWCmcd("TOIT2-PL","mcod",74)="    S rjln=$$jL(tFL)"
^ZWCmcd("TOIT2-PL","mcod",75)="      I rjln="""" DO  S Qp=Qp_Q   Q Qp"
^ZWCmcd("TOIT2-PL","mcod",76)="        .S Q="" Err null rjln of tFL"""
^ZWCmcd("TOIT2-PL","mcod",77)="        .D b^dv(Qp,""rjln,tFL,Tin"") "
^ZWCmcd("TOIT2-PL","mcod",78)="    S rjdt=$$jAG(dtFL)"
^ZWCmcd("TOIT2-PL","mcod",79)="    S rjdlst=$$jAG(dtFL,""_Dlst"")"
^ZWCmcd("TOIT2-PL","mcod",80)="    Q Qp"
^ZWCmcd("TOIT2-PTL","mcod",60)=";*$$ COmbined PL and TL  PTL!"
^ZWCmcd("TOIT2-PTL","mcod",61)="PTL(Qi) S Qp=$G(Qi)"
^ZWCmcd("TOIT2-PTL","mcod",62)="    I t2'="""" S Tin=t2"
^ZWCmcd("TOIT2-PTL","mcod",63)="    S Qp=$$PL(Qp)  ; Tin, @toiFL  TOIp"
^ZWCmcd("TOIT2-PTL","mcod",64)="      I Qp'="""" Q Qp  ; b^dv in PL"
^ZWCmcd("TOIT2-PTL","mcod",65)="    S Qp=$$TL(Qp)"
^ZWCmcd("TOIT2-PTL","mcod",66)="    Q Qp    "
^ZWCmcd("TOIT2-RTX","mcod",124)=";*  Read $T to TCL()"
^ZWCmcd("TOIT2-RTX","mcod",125)="RTX  "
^ZWCmcd("TOIT2-RTX","mcod",126)="   KILL TCL S TCL=0"
^ZWCmcd("TOIT2-RTX","mcod",127)="   F iT=1:1 S T=$T(TESpat+iT) Q:T'["";;""  DO  ;"
^ZWCmcd("TOIT2-RTX","mcod",128)="     .S L=$P(T,"";;"",2,9) I L="""" Q"
^ZWCmcd("TOIT2-RTX","mcod",129)="     .S TCL=TCL+1,TCL(TCL)=L"
^ZWCmcd("TOIT2-RTX","mcod",130)="   Q"
^ZWCmcd("TOIT2-T1","mcod",13)=";*$$      Basic TOIa, TOIp Tests, PATtes below"
^ZWCmcd("TOIT2-T1","mcod",14)="T1(Qt) S Qt=$G(Qt)"
^ZWCmcd("TOIT2-T1","mcod",15)="      D RTX  ; $T(+I) -> TCL()"
^ZWCmcd("TOIT2-T1","mcod",16)="      S Qt=$$TTOI(Qt)"
^ZWCmcd("TOIT2-T1","mcod",17)="      Q Qt"
^ZWCmcd("TOIT2-T2","mcod",18)=";*$$  PATtes^TOIT3 "
^ZWCmcd("TOIT2-T2","mcod",19)="T2(Qt) S Qt=$G(Qt)"
^ZWCmcd("TOIT2-T2","mcod",20)="      D RTX^TOIT3  ; Exhaustive TOId Tests"
^ZWCmcd("TOIT2-T2","mcod",21)="      S Qt=$$TTOI(Qt)"
^ZWCmcd("TOIT2-T2","mcod",22)="      Q Qt"
^ZWCmcd("TOIT2-TA","mcod",55)=";*$$ Test TOIa Compile vs Expected"
^ZWCmcd("TOIT2-TA","mcod",56)="TA(Qi)  NEW Qt S Qt=$G(Qi)"
^ZWCmcd("TOIT2-TA","mcod",57)="    I rja1'=eja1 S:Qt'="""" Qt=Qt_"","" S Qt=Qt_""errA1"""
^ZWCmcd("TOIT2-TA","mcod",58)="    I rja2'=eja2 S:Qt'="""" Qt=Qt_"","" S Qt=Qt_""errA2"""
^ZWCmcd("TOIT2-TA","mcod",59)="    Q Qt"
^ZWCmcd("TOIT2-TESpat","mcod",141)=";*"
^ZWCmcd("TOIT2-TESpat","mcod",142)=";*  Test ^TOI Pattern List (Null Tset)"
^ZWCmcd("TOIT2-TESpat","mcod",143)="TESpat ;  Either vn:value or Tcmd!   vn in TvnFL  test vis VNT(vn)=vn"
^ZWCmcd("TOIT2-TESpat","mcod",144)=";;tsidT:TestTOI1"
^ZWCmcd("TOIT2-TESpat","mcod",145)=";;sTFL:tesde,tesab.,/tescat,tesd12:dts_TES(tsid)"
^ZWCmcd("TOIT2-TESpat","mcod",146)=";;CA!"
^ZWCmcd("TOIT2-TESpat","mcod",147)=";;eja1:"
^ZWCmcd("TOIT2-TESpat","mcod",148)=";;eja2:"
^ZWCmcd("TOIT2-TESpat","mcod",149)=";;TA!"
^ZWCmcd("TOIT2-TESpat","mcod",150)=";;ejln:tesde:'Test One Results',tesab:'tes.',tescat:'/cat1',tesd12:'201910011200'"
^ZWCmcd("TOIT2-TESpat","mcod",151)=";;Tin:tes. 10/1/19 12pm /cat1 Test One Results"
^ZWCmcd("TOIT2-TESpat","mcod",152)=";;PL!"
^ZWCmcd("TOIT2-TESpat","mcod",153)=";;TL!"
^ZWCmcd("TOIT2-TESpat","mcod",154)=";;PL!tes. /cat1 1oct19 12pm Test One Results"
^ZWCmcd("TOIT2-TESpat","mcod",155)=";;PL!   /cat1 1oct19 tes. 12pm Test  One   Results"
^ZWCmcd("TOIT2-TESpat","mcod",156)=";;PL!12pm   /cat1 1oct19 tes.  Test One Results  "
^ZWCmcd("TOIT2-TESpat","mcod",157)=";;PL!Test One Results  tes. /cat1 1oct19 12pm "
^ZWCmcd("TOIT2-TESpat","mcod",158)=";;PL!tes. /cat1 1oct19 12pm Test One Results  "
^ZWCmcd("TOIT2-TL","mcod",81)=";*$$"
^ZWCmcd("TOIT2-TL","mcod",82)="TL(Qi) NEW Qt  S Qt=$G(Qi)"
^ZWCmcd("TOIT2-TL","mcod",83)="   I rjln'=ejln S Qt=Qt_""errTOIp"" DO  "
^ZWCmcd("TOIT2-TL","mcod",84)="     .USE $P D WTOIp^TOIw"
^ZWCmcd("TOIT2-TL","mcod",85)="     .W:$X ! W ""rjln="",$G(rjln),!,""ejln="",$G(ejln),!"
^ZWCmcd("TOIT2-TL","mcod",86)="     .D b^dv(""Pause TOIp Error"",""Qp,tsidT,tci,TC,Tin,sTFL"")"
^ZWCmcd("TOIT2-TL","mcod",87)="  I $G(ejdt)'="""" I ejdt'=rjdt D b^dt(""Diff *jdt"",""ejdt,rjdt,tci,tsidT,Tin"")"
^ZWCmcd("TOIT2-TL","mcod",88)="   Q Qt"
^ZWCmcd("TOIT2-TOIt","mcod",6)="TOIt  S Qt="""""
^ZWCmcd("TOIT2-TOIt","mcod",7)="      S Qt=$$T1(Qt)"
^ZWCmcd("TOIT2-TOIt","mcod",8)="      S Qt=$$T2(Qt)"
^ZWCmcd("TOIT2-TOIt","mcod",9)="      USE $P W:$X ! W ""Completed TOI Test Series - """
^ZWCmcd("TOIT2-TOIt","mcod",10)="      I Qt'="""" W ""Failed-"",!,Qt,!!"
^ZWCmcd("TOIT2-TOIt","mcod",11)="      I Qt="""" W ""Passed All."",!"
^ZWCmcd("TOIT2-TOIt","mcod",12)="      Q"
^ZWCmcd("TOIT2-TTOI","mcod",23)=";*$$  err"
^ZWCmcd("TOIT2-TTOI","mcod",24)="TTOI(Qi,Tset)  S Qt=$G(Qi)  D ITC,^TOIimg"
^ZWCmcd("TOIT2-TTOI","mcod",25)="    I $D(TCL)'>9 S Q=""Failed to find Test Set"" D b^dv(Q,""TCL,Tset"") Q Q"
^ZWCmcd("TOIT2-TTOI","mcod",26)="    KILL Ddef,Dlst ;Std No left over defaults"
^ZWCmcd("TOIT2-TTOI","mcod",27)="    F tci=1:1:TCL S TC=$G(TCL(tci)) DO  ;"
^ZWCmcd("TOIT2-TTOI","mcod",28)="      .I TC["":"" S Tvn=$P(TC,"":"") I Tvn'="""" S v=$G(VNT(Tvn)) DO  ;"
^ZWCmcd("TOIT2-TTOI","mcod",29)="        ..I v="""" DO  Q"
^ZWCmcd("TOIT2-TTOI","mcod",30)="            ...I Tvn'?2.8A.2n Q  ; Ignore, eg colon in Tin or vn val eg json"
^ZWCmcd("TOIT2-TTOI","mcod",31)="            ...D b^dv(""Err Tvn: not in TvnFL "",""Tvn,TvnFL,Tset,tci,TC"")"
^ZWCmcd("TOIT2-TTOI","mcod",32)="        ..S Tvn=v,@Tvn=$P(TC,"":"",2,99)"
^ZWCmcd("TOIT2-TTOI","mcod",33)="      .I TC[""!"" S t=$P(TC,""!"") I t'="""" S Tcmd=t DO  ;"
^ZWCmcd("TOIT2-TTOI","mcod",34)="        ..S t2=$P(TC,""!"",2,99),t2=$$DSP^TOIs(t2)"
^ZWCmcd("TOIT2-TTOI","mcod",35)="        ..I Tcmd=""CA"" D CA Q"
^ZWCmcd("TOIT2-TTOI","mcod",36)="        ..I Tcmd=""TA"" S Qt=$$TA(Qt) Q"
^ZWCmcd("TOIT2-TTOI","mcod",37)="        ..I Tcmd=""PTL"" S Qt=$$PTL(Qt) Q  ; One Liner Tin after PTL!        "
^ZWCmcd("TOIT2-TTOI","mcod",38)="        ..I Tcmd=""PL"" S Qt=$$PL(Qt) Q"
^ZWCmcd("TOIT2-TTOI","mcod",39)="        ..I Tcmd=""TL"" S Qt=$$TL(Qt) Q"
^ZWCmcd("TOIT2-TTOI","mcod",40)="        ..D b^dv(""Unrecog TCmd ! "",""Tcmd"")"
^ZWCmcd("TOIT2-TTOI","mcod",41)="    USE $P W:$X ! W ""Completed Test Series TCL, Tset:"",$G(Tset),!"
^ZWCmcd("TOIT2-TTOI","mcod",42)="    Q Qt"
^ZWCmcd("TOIT2-jA","mcod",108)=";* Array to json"
^ZWCmcd("TOIT2-jA","mcod",109)="jA(A) Q """""
^ZWCmcd("TOIT2-jA","mcod",110)="    S j1=""{"",j2=""}"" I $G(A)="""" D ^dvstk,b^dv(""Err arg jA array name"",""A"") Q ""?1"" "
^ZWCmcd("TOIT2-jA","mcod",111)="    S D=$D(@A) I D<9 D b^dv(""Non Array arg"",""A,j"") Q ""?2"""
^ZWCmcd("TOIT2-jA","mcod",112)="    I D#2 S v=$G(@A),j=A_"":'""_v_""'"""
^ZWCmcd("TOIT2-jA","mcod",113)="    S ky="""" I $O(@A@(""""))'="""" S j1=j1_""{"",j2=""}""_j2"
^ZWCmcd("TOIT2-jA","mcod",114)="      F ki=0:1 S ky=$O(@A@(ky)) Q:ky=""""  DO"
^ZWCmcd("TOIT2-jA","mcod",115)="      .S v=$G(@A@(ky)),d=$D(@A@(ky))"
^ZWCmcd("TOIT2-jA","mcod",116)="      .S:ki j1=j1_"","" S j1=j1_""'""_ky_""'""_"":'""_v_""'""      "
^ZWCmcd("TOIT2-jA","mcod",117)="      .I d<9 S j1=j1_""'""_ky_""':'""_v_""'"" "
^ZWCmcd("TOIT2-jA","mcod",118)="      .S ky2="""",j1=j1_""{"",j2=""}""_j2  F kj=0:1 S ky2=$O(@A@(ky,ky2)) Q:ky2=""""  DO"
^ZWCmcd("TOIT2-jA","mcod",119)="         ..S v2=$G(@A@(ky,ky2))"
^ZWCmcd("TOIT2-jA","mcod",120)="         ..S:kj j1=j1_"","" S j1=""'""_ky2_""':'""_v2_""'"""
^ZWCmcd("TOIT2-jA","mcod",121)="    S j=j1_j2"
^ZWCmcd("TOIT2-jA","mcod",122)="    D b^dv(""Log jA "",""A,D,j,j1,j2,ki,ky,kj,ky2"")"
^ZWCmcd("TOIT2-jA","mcod",123)="    Q j   "
^ZWCmcd("TOIT2-jAG","mcod",98)=";*"
^ZWCmcd("TOIT2-jAG","mcod",99)="; super var list to json from Array or MGbl not via @vn local"
^ZWCmcd("TOIT2-jAG","mcod",100)="jAG(FL,G2) I $G(FL)="""" D ^dvstk,b^dv(""jL arg FL must not be null"",""FL"") Q ""1?"""
^ZWCmcd("TOIT2-jAG","mcod",101)="    NEW:0 G,vi,vn,v  S G=$P(FL,""_"",2),FL=$P(FL,""_"")"
^ZWCmcd("TOIT2-jAG","mcod",102)="      I $G(G2)'="""" S G=$P(G2,""_"",2)"
^ZWCmcd("TOIT2-jAG","mcod",103)="    S vn=$P(FL,"","")"
^ZWCmcd("TOIT2-jAG","mcod",104)="      I vn'?1.A.3n D b^dv(""vn1 fmt in FL"",""vn,FL"") Q ""2?"""
^ZWCmcd("TOIT2-jAG","mcod",105)="    S j=vn_"":'""_$G(@G@(vn))_""'"""
^ZWCmcd("TOIT2-jAG","mcod",106)="    F vi=2:1:$L(FL,"","") S vn=$P(FL,"","",vi) I vn'="""" S v=$G(@G@(vn)),j=j_"",""_vn_"":'""_v_""'"""
^ZWCmcd("TOIT2-jAG","mcod",107)="    Q j    "
^ZWCmcd("TOIT2-jL","mcod",89)=";*$$ FL, local vars @FL  : j  json, sgl quotes  simple list, list order"
^ZWCmcd("TOIT2-jL","mcod",90)="; super var list to json"
^ZWCmcd("TOIT2-jL","mcod",91)="jL(FL) I $G(FL)="""" D ^dvstk,b^dv(""jL arg FL must not be null"",""FL"") Q ""1?"""
^ZWCmcd("TOIT2-jL","mcod",92)="    NEW:0 G,vi,vn,v  S G=$P(FL,""_"",2),FL=$P(FL,""_"")"
^ZWCmcd("TOIT2-jL","mcod",93)="    S vn=$P(FL,"","")"
^ZWCmcd("TOIT2-jL","mcod",94)="      I vn'?1.A.3n D b^dv(""vn1 fmt in FL"",""vn,FL"") Q ""2?"""
^ZWCmcd("TOIT2-jL","mcod",95)="    S j=vn_"":'""_$G(@vn)_""'"""
^ZWCmcd("TOIT2-jL","mcod",96)="    F vi=2:1:$L(FL,"","") S vn=$P(FL,"","",vi) I vn'="""" S v=$G(@vn),j=j_"",""_vn_"":'""_v_""'"""
^ZWCmcd("TOIT2-jL","mcod",97)="    Q j"
^ZWCmcd("TOIT3","mcod",1)="TOIT3  ;CKW/ESC  i13oct19 ; 20191013-05 ; FUrther Test Profiles for ^TOI*"
^ZWCmcd("TOIT3","mcod",2)="   ; in gmsa/  rTOI7/   data like ^TOIT2"
^ZWCmcd("TOIT3-RTX","mcod",3)="RTX  ; Tset ?"
^ZWCmcd("TOIT3-RTX","mcod",4)="     KILL TCL  S TCL=0"
^ZWCmcd("TOIT3-RTX","mcod",5)="     F iT=1:1 S T=$T(TESpat+iT)  Q:T'["";;""  DO  ;"
^ZWCmcd("TOIT3-RTX","mcod",6)="     .S L=$P(T,"";;"",2,9) I L="""" Q"
^ZWCmcd("TOIT3-RTX","mcod",7)="     .S TCL=TCL+1,TCL(TCL)=L"
^ZWCmcd("TOIT3-RTX","mcod",8)="   Q"
^ZWCmcd("TOIT3-TESpat","mcod",9)=";*"
^ZWCmcd("TOIT3-TESpat","mcod",10)=";*  Test ^TOI Pattern List (Null Tset)"
^ZWCmcd("TOIT3-TESpat","mcod",11)=";  Note PL!Tin  does all 3 Sets Tin=t2, PL!  and TL!   for efficiency"
^ZWCmcd("TOIT3-TESpat","mcod",12)=";  Same line result (ejln:  once), variant formats"
^ZWCmcd("TOIT3-TESpat","mcod",13)="TESpat ;  Either vn:value or Tcmd!   vn in TvnFL  test vis VNT(vn)=vn"
^ZWCmcd("TOIT3-TESpat","mcod",14)=";;tsidT:TestTOId"
^ZWCmcd("TOIT3-TESpat","mcod",15)=";;sTFL:tesd12:dts,tesde,tesab.,/tescat_TES(tsid)"
^ZWCmcd("TOIT3-TESpat","mcod",16)=";;CA!"
^ZWCmcd("TOIT3-TESpat","mcod",17)=";;eja1:"
^ZWCmcd("TOIT3-TESpat","mcod",18)=";;eja2:"
^ZWCmcd("TOIT3-TESpat","mcod",19)=";;TA!"
^ZWCmcd("TOIT3-TESpat","mcod",20)=";;ejln:tesd12:'201910011200',tesde:'Test Date Results',tesab:'',tescat:''"
^ZWCmcd("TOIT3-TESpat","mcod",21)=";;Tin:10/1/19 12pm  Test Date Results"
^ZWCmcd("TOIT3-TESpat","mcod",22)=";;PL!"
^ZWCmcd("TOIT3-TESpat","mcod",23)=";;TL!"
^ZWCmcd("TOIT3-TESpat","mcod",24)=";;ejln:tesd12:'201910011200',tesde:'Test One Results',tesab:'tes.',tescat:'/cat1'"
^ZWCmcd("TOIT3-TESpat","mcod",25)=";;PTL!10/1 12pm Test One Results  /cat1 tes.  # def year last of 7 is tesab"
^ZWCmcd("TOIT3-TESpat","mcod",26)=";;PTL!10/1 12pm Test One Results  tes. /cat1 # def year"
^ZWCmcd("TOIT3-TESpat","mcod",27)=";;PTL!  tes.   10/1 12pm Test /cat1 One  Results  # def year"
^ZWCmcd("TOIT3-TESpat","mcod",28)=";;PTL!tes. /cat1 1Oct 12pm Test One Results  # def year"
^ZWCmcd("TOIT3-TESpat","mcod",29)=";;ejln:tesd12:'201910011200',tesde:'Test One Results',tesab:'tes.',tescat:'/cat1'"
^ZWCmcd("TOIT3-TESpat","mcod",30)=";;PTL!tes. /cat1 10/1/19 12pm Test One Results  "
^ZWCmcd("TOIT3-TESpat","mcod",31)=";;ejln:tesd12:'201910011200',tesde:'Test One Results',tesab:'tes.',tescat:'/cat1'"
^ZWCmcd("TOIT3-TESpat","mcod",32)=";;PTL! tes. /cat1 10/1/2019 12pm Test One Results  "
^ZWCmcd("TOIT3-TESpat","mcod",33)=";;ejln:tesd12:'201910010700',tesde:'descr',tesab:'',tescat:''"
^ZWCmcd("TOIT3-TESpat","mcod",34)=";;PTL!  201910010700  descr    # test date variants (only)"
^ZWCmcd("TOIT3-TESpat","mcod",35)=";;PTL!  20191001 7am  descr"
^ZWCmcd("TOIT3-TESpat","mcod",36)=";;PTL!  10/1 7  descr"
^ZWCmcd("TOIT3-TESpat","mcod",37)=";;PTL!  10/1 7a  descr"
^ZWCmcd("TOIT3-TESpat","mcod",38)=";;PTL!  10/1 07:00  descr"
^ZWCmcd("TOIT3-TESpat","mcod",39)=";;PTL!  10/1 7:00  descr"
^ZWCmcd("TOIT3-TESpat","mcod",40)=";;PTL!  10/1 0700  descr"
^ZWCmcd("TOIT3-TESpat","mcod",41)=";;PTL!  2019  descr"
^ZWCmcd("TOIT3-TESpat","mcod",42)=";;PTL!  7am  descr"
^ZWCmcd("TOIT3-TESpat","mcod",43)=";;PTL!  2019 wk40 Tue descr"
^ZWCmcd("TOIT3-TESpat","mcod",44)=";;ejln:tesd12:'201910011900',tesde:'descr',tesab:'',tescat:''"
^ZWCmcd("TOIT3-TESpat","mcod",45)=";;PTL!  20191001 7pm  descr"
^ZWCmcd("TOIT3-TESpat","mcod",46)=";;PTL!  10/1 19  descr"
^ZWCmcd("TOIT3-TESpat","mcod",47)=";;PTL!  10/1 7p  descr"
^ZWCmcd("TOIT3-TESpat","mcod",48)=";;PTL!  10/1 19:00  descr"
^ZWCmcd("TOIT3-TESpat","mcod",49)=";;PTL!  10/1 7:00pm  descr"
^ZWCmcd("TOIT3-TESpat","mcod",50)=";;PTL!  10/1 1900  descr"
^ZWCmcd("TOIT3-TESpat","mcod",51)=";;PTL!  2019  descr          # def last time"
^ZWCmcd("TOIT3-TESpat","mcod",52)=";;ejln:tesd12:'201910011901',tesde:'descr',tesab:'',tescat:''"
^ZWCmcd("TOIT3-TESpat","mcod",53)=";;PTL!  20191001 701pm  descr"
^ZWCmcd("TOIT3-TESpat","mcod",54)=";;PTL!  10/1 1901  descr"
^ZWCmcd("TOIT3-TESpat","mcod",55)=";;PTL!  10/1 701p  descr"
^ZWCmcd("TOIT3-TESpat","mcod",56)=";;PTL!  10/1 19:01  descr"
^ZWCmcd("TOIT3-TESpat","mcod",57)=";;PTL!  10/1 7:01pm  descr"
^ZWCmcd("TOIT3-TESpat","mcod",58)=";;PTL!  2019  descr          # def last time, Dlst()"
^ZWCmcd("TOIa","mcod",1)="TOIa(TOIsyn,tsidp)   ;CKW/ESC $$ i27may16  ; 20191004-75 ; Init/Compile TOI Process"
^ZWCmcd("TOIa","mcod",2)="  ;  in gmsa/  rTOI7/      10oct19, 8aug19    "
^ZWCmcd("TOIa","mcod",3)="  ;  from gmsa/  rTOI3ucal/"
^ZWCmcd("TOIa","mcod",4)="  ;RefBy:  KAcf/ rcash/...  Dev"
^ZWCmcd("TOIa","mcod",5)="  ;"
^ZWCmcd("TOIa","mcod",6)="  ;    Some uCal-specific Kludges, commented [uCal"
^ZWCmcd("TOIa","mcod",7)="  ;"
^ZWCmcd("TOIa-III","mcod",29)=";*"
^ZWCmcd("TOIa-III","mcod",30)="III     S (Cpx,Csx)="""",tFL=""""  ;Accumulate all vn in tFL"
^ZWCmcd("TOIa-III","mcod",31)="        KILL ^TG(tsid)"
^ZWCmcd("TOIa-III","mcod",32)="        D NFL^TOIs(toiFL),NFL^TOIs(dtFL)  ; variant No G test/break"
^ZWCmcd("TOIa-III","mcod",33)="        D ITG^TOIimg  ; Static parts of ^TG TOIa support"
^ZWCmcd("TOIa-III","mcod",34)="        D ITVN  ; Apx,Asx, patL, pa ^TG(0,"
^ZWCmcd("TOIa-III","mcod",35)="        Q"
^ZWCmcd("TOIa-ITVN","mcod",95)=";*        "
^ZWCmcd("TOIa-ITVN","mcod",96)=";*  : pnaL, Apx, Asx, patL ^TG(0,""PTYpx""  & ""PTsx""   Link Punct to PunctName"
^ZWCmcd("TOIa-ITVN","mcod",97)=";*   Apx Allowed Prefix Punct   ie esp not + -   special-care $"
^ZWCmcd("TOIa-ITVN","mcod",98)="ITVN  NEW vn,pi,p,pk,fs,ty,tys"
^ZWCmcd("TOIa-ITVN","mcod",99)="      S pnaL="".dot,/slash,\bkslash,<lt,>gt,&amp,~tilde,`bktic,!bang,#hash,@at,$dol,%per,^caret,*ast,-hyp,_und,=eq,+plus,|vbar,:colon,;semicolon"""
^ZWCmcd("TOIa-ITVN","mcod",100)="      S Apx=""/$#@&*=~\"" D SV0(Apx,""px"")"
^ZWCmcd("TOIa-ITVN","mcod",101)="      S Asx=""/.!#:"" D SV0(Asx,""sx"")"
^ZWCmcd("TOIa-ITVN","mcod",102)="      S patL=""dts,d12,email,tel,url,nalf,nafl""      "
^ZWCmcd("TOIa-ITVN","mcod",103)="      F vn=""pnaL"",""Apx"",""Asx"",""patL"" S ^TG(0,vn)=@vn"
^ZWCmcd("TOIa-ITVN","mcod",104)="      Q"
^ZWCmcd("TOIa-Q","mcod",81)=";*"
^ZWCmcd("TOIa-Q","mcod",82)="Q     Q:$Q Q Q:Q="""""
^ZWCmcd("TOIa-Qbug","mcod",83)="Qbug  D qd Q:$Q Q  Q"
^ZWCmcd("TOIa-SV0","mcod",105)=";*  ^TG(0, ""PTYpx""   and ""PTYsx"",p)=ty  (eg. pxslash  for prefix ""/"" )"
^ZWCmcd("TOIa-SV0","mcod",106)="SV0(L,pre) F pi=1:1:$L(L) S p=$E(L,pi) DO  ;"
^ZWCmcd("TOIa-SV0","mcod",107)="         .S pk=$F(pnaL,p) I 'pk D bug^dv Q"
^ZWCmcd("TOIa-SV0","mcod",108)="         .S fs=$E(pnaL,pk,999),ty=$P(fs,"","")"
^ZWCmcd("TOIa-SV0","mcod",109)="         .I ty="""" D bug^dv Q"
^ZWCmcd("TOIa-SV0","mcod",110)="         .S tys=pre_ty"
^ZWCmcd("TOIa-SV0","mcod",111)="         .S ^TG(0,""PTY""_pre,p)=tys"
^ZWCmcd("TOIa-SV0","mcod",112)="      Q"
^ZWCmcd("TOIa-SV0","mcod",113)=";*"
^ZWCmcd("TOIa-XTG","mcod",36)=";*"
^ZWCmcd("TOIa-XTG","mcod",37)="XTG(TSL) I $G(TSL)="""" D bug^dv Q"
^ZWCmcd("TOIa-XTG","mcod",38)="        NEW vn,G,TL,wj,pvn,px,sx,ty,tys,vn,an,val,Vsq"
^ZWCmcd("TOIa-XTG","mcod",39)="        S G=$P(TSL,""_"",2),TL=$P(TSL,""_""),Vsq=0"
^ZWCmcd("TOIa-XTG","mcod",40)="          ; D b^dv(""Log XTG"",""TSL,TL"")"
^ZWCmcd("TOIa-XTG","mcod",41)="        F wj=1:1:$L(TL,"","") S pvn=$P(TL,"","",wj) DO"
^ZWCmcd("TOIa-qd","mcod",84)="qd   D b^dv(""Err ""_$T(+0),""Q,tsid,tFL"") Q"
^ZWCmcd("TOIa-t1","mcod",42)="t1        .S px=$E(pvn) I px?1P S Q="""" DO  Q:Q'="""""
^ZWCmcd("TOIa-t1","mcod",43)="             ..S ty=$G(^TG(0,""PTYpx"",px))  ;vs Apx"
^ZWCmcd("TOIa-t1","mcod",44)="             .. I ty="""" D b^dv(""Unregis px punct"",""px,pvn,wj,TSL"") Q"
^ZWCmcd("TOIa-t1","mcod",45)="             ..S vn=$E(pvn,2,99),Qv=$$vvn(vn) ; vn', vty"
^ZWCmcd("TOIa-t1","mcod",46)="             ..  I Qv'="""" S ty="""" Q"
^ZWCmcd("TOIa-t1","mcod",47)="             ..S ^TG(tsid,""PX"",px)=vn"
^ZWCmcd("TOIa-t1","mcod",48)="             ..S Cpx=Cpx_px,Q=1"
^ZWCmcd("TOIa-t2","mcod",49)="t2        .S sx=$E(pvn,$L(pvn)),Q="""" I sx?1P DO   Q:Q ; Q success, done with pvn"
^ZWCmcd("TOIa-t2","mcod",50)="             ..;S ty=$G(^TG(0,""PTYsx"",sx)) ; vs Asx"
^ZWCmcd("TOIa-t2","mcod",51)="             ..; I ty="""" D b^dv(""Unregis sx punct"",""sx,pvn,wj,TSL"") Q"
^ZWCmcd("TOIa-t2","mcod",52)="             ..I Asx'[sx D b^dv(""Unregis sx punct"",""sx,Asx,pvn,wj,TSL"") Q             "
^ZWCmcd("TOIa-t2","mcod",53)="             .. S vn=$E(pvn,1,$L(pvn)-1),Qv=$$vvn(vn) I Qv'="""" Q"
^ZWCmcd("TOIa-t2","mcod",54)="             ..S ^TG(tsid,""SX"",sx)=vn,Csx=Csx_sx,Q=1"
^ZWCmcd("TOIa-t3b","mcod",55)="t3b        .I pvn[""="" S Q="""" DO  Q:Q  ; VNmode, ..."
^ZWCmcd("TOIa-t3b","mcod",56)="             ..S vn=$P(pvn,""=""),val=$P(pvn,""="",2,9)"
^ZWCmcd("TOIa-t3b","mcod",57)="             ..I vn="""" D bug^dv Q  ; =prefix in sTFL ?"
^ZWCmcd("TOIa-t3b","mcod",58)="             ..S Qv=$$vvn(vn) I Qv'="""" D bug^dv Q  ;already b^dv"
^ZWCmcd("TOIa-t3b","mcod",59)="             ..S x=$G(^TG(0,""AN"",vn)) I x="""" D b^dv(""Unrecog Var="",""an,wj,TSL"") Q"
^ZWCmcd("TOIa-t3b","mcod",60)="             ..  ; sic this is same fn, diff method ???"
^ZWCmcd("TOIa-t3b","mcod",61)="             ..S F=0 F fi=1:1:$L(toiFL,"","") I $P(toiFL,"","",fi)=vn S F=1 Q"
^ZWCmcd("TOIa-t3b","mcod",62)="             ..I 'F D b^dv("" Var an not in toiFL?"",""an,toiFL,wj,TSL"") Q"
^ZWCmcd("TOIa-t3b","mcod",63)="             ..S ^TG(tsid,""VEQ"",vn)=val,Q=1  ; @vn=val by TOIp  fixed value"
^ZWCmcd("TOIa-t4","mcod",64)="t4        .I pvn?1.L.2N S Q="""" DO  Q:Q'=""""  ; simple vn, assign in order wds left, always Quits"
^ZWCmcd("TOIa-t4","mcod",65)="             ..S vn=pvn,Qv=$$vvn(vn) I Qv'="""" Q  ; b^dv in vvn"
^ZWCmcd("TOIa-t4","mcod",66)="             ..S Vsq=Vsq+1,^TG(tsid,""VQ"",Vsq)=vn,vqlst=vn,wklst=wj,Q=1  ;number (Vsq) vs ty"
^ZWCmcd("TOIa-t5","mcod",67)="t5        .I pvn["":"" DO   S pvn=$TR(pvn,"":"",""/"")      ;Dup syntax   Kludge"
^ZWCmcd("TOIa-t5","mcod",68)="                ..;D b^dv(""Log pvn colon to /"",""pvn"")"
^ZWCmcd("TOIa-t5","mcod",69)="          .I pvn[""/"" S Q="""" DO  Q:Q'=""""   ;; special var after / or : eg d12 in "
^ZWCmcd("TOIa-t5","mcod",70)="             ..S vnty=$P(pvn,""/"",2) I vnty="""" D b^dv(""End sx slash / not suffix"",""pvn,vnty,wj,TL"") Q  ;end / not sx ?"
^ZWCmcd("TOIa-t5","mcod",71)="             ..S vntyL=""dts,d12,d8,d8s,nalf,nafl,n,int,num,dol,de,email,tel,url,tty""  ; sic config here vs ITVN"
^ZWCmcd("TOIa-t5","mcod",72)="             ..I "",""_vntyL_"",""'[("",""_$P(vnty,""."")_"","") D b^dv(""Err allowed /var "",""vnty,vntyL,wj,TL"") Q"
^ZWCmcd("TOIa-t5","mcod",73)="             ..S vn=$P(pvn,""/""),Qv=$$vvn(vn)"
^ZWCmcd("TOIa-t5","mcod",74)="             ..  I Qv'="""" D b^dv(""Err in : or / vn ?"",""vnty,vntyL,vn,Q,wj,TL"") Q"
^ZWCmcd("TOIa-t5","mcod",75)="             ..I vnty=""d12""!(vnty=""dts"")!(vnty[""d8"") S vndt=1  ; vndt is general date flag 1/0null was vnd12"
^ZWCmcd("TOIa-t5","mcod",76)="             ..S vnty0=$G(^TG(tsid,""VCU"",vnty)) I vnty0'="""" S vnty=vnty0_"",""_vnty"
^ZWCmcd("TOIa-t5","mcod",77)="             ..S ^TG(tsid,""VCU"",vnty)=vn,Q=1"
^ZWCmcd("TOIa-t5","mcod",78)="          .S Q=""Extra Unrecog src "" D b^dv(Q,""Q,pvn,wj,TL,TSL"")"
^ZWCmcd("TOIa-t5","mcod",79)="        I Q=1 S Q=""""  ;Kludge convert Q=1 nonstd to std Q success Q="""""
^ZWCmcd("TOIa-t5","mcod",80)="        Goto Q"
^ZWCmcd("TOIa-toiFL","mcod",8)="toiFL ;;sTFL,tFL,VNmode,WQP,dictL,vndt,d8vn,vqlst,Cpx,Csx,cdL,wtL,cTS,ctxde_^TG(tsid)"
^ZWCmcd("TOIa-toiFL","mcod",9)="   ;  TOIsyn is Var List and _2 destination Compile to ^TG(tsid)"
^ZWCmcd("TOIa-toiFL","mcod",10)=" ;     with coded prefix and/or suffix punct to interpret lines"
^ZWCmcd("TOIa-toiFL","mcod",11)=" NEW Q,T,toiFL,dtFL S Q="""""
^ZWCmcd("TOIa-toiFL","mcod",12)=" I $G(tsidp)="""" S tsidp=$G(^TG(0,""tsidCur"")) I tsidp="""" D bug^dv Q ""9-No-tsid in"""
^ZWCmcd("TOIa-toiFL","mcod",13)="          S tsid=tsidp  ; tsid is sys var, tsidp is arrg/new"
^ZWCmcd("TOIa-toiFL","mcod",14)="        D ^TOIimg  ; toiFL, dtFL"
^ZWCmcd("TOIa-toiFL","mcod",15)="         ;  removed  ,pL,pvL,psL,vnL  3oct19"
^ZWCmcd("TOIa-toiFL","mcod",16)="        D III  ; Init for process"
^ZWCmcd("TOIa-toiFL","mcod",17)="        S sTFL=TOIsyn,cTS=$ZD($H)"
^ZWCmcd("TOIa-toiFL","mcod",18)="        U $P W:$X ! W ""^TOIa Compiling '"",tsid,""'  from -"",!"
^ZWCmcd("TOIa-toiFL","mcod",19)="           W ""   '"",sTFL,""' "",!"
^ZWCmcd("TOIa-toiFL","mcod",20)="        ;"
^ZWCmcd("TOIa-toiFL","mcod",21)="        S ^TG(0,""tsidCur"")=tsid"
^ZWCmcd("TOIa-toiFL","mcod",22)=" D XTG(TOIsyn)  ;  : ^TG(tsid,"
^ZWCmcd("TOIa-toiFL","mcod",23)=" I $G(VNmode)="""" S VNmode=""L"""
^ZWCmcd("TOIa-toiFL","mcod",24)=" I $E(tFL)'="","" S Q=""Err tFL"" Goto Qbug"
^ZWCmcd("TOIa-toiFL","mcod",25)=" S tFL=$E(tFL,2,9999)  ;Remove Init comma"
^ZWCmcd("TOIa-toiFL","mcod",26)=" D SFL^dvs(toiFL) ; tsid, @toiFL : ^TG(tsid=tsidp) updated vars"
^ZWCmcd("TOIa-toiFL","mcod",27)=" ;KILL @$P(toiFL,""_""),@$P(dtFL,""_"")  ; Sic  temp cleanup  vs NFL^"
^ZWCmcd("TOIa-toiFL","mcod",28)=" Goto Q"
^ZWCmcd("TOIa-vvn","mcod",85)=";*"
^ZWCmcd("TOIa-vvn","mcod",86)=";*$$ test format, registration TOI-var for vn, Accum vn List in tFL"
^ZWCmcd("TOIa-vvn","mcod",87)=";*    vn~vna  : vn',  vty, tFL'"
^ZWCmcd("TOIa-vvn","mcod",88)="vvn(vna)  I $G(vna)="""" S Q=""vn Null !"" D ^dvstk,b^dv(Q,""Q,vna,an,wj,TL,TSL,Q"") Q Q"
^ZWCmcd("TOIa-vvn","mcod",89)="         S vn=vna"
^ZWCmcd("TOIa-vvn","mcod",90)="         I vn["":"" S vn=$TR(vn,"":"",""/"") D b^dv(""Sub : to / in TOIa TFL"",""vn"")"
^ZWCmcd("TOIa-vvn","mcod",91)="         S vty="""" I vn[""/"" S vty=$P(vn,""/"",2),vn=$P(vn,""/"")"
^ZWCmcd("TOIa-vvn","mcod",92)="         I $G(vn)'?1.2L.7A.2n S Q=""Unrecog Var Fmt ?1.2L.7A.2n ?"" D b^dv(Q,""Q,vn,wj,TL,TSL"") Q Q"
^ZWCmcd("TOIa-vvn","mcod",93)="         S tFL=tFL_"",""_vn"
^ZWCmcd("TOIa-vvn","mcod",94)="         Q """""
^ZWCmcd("TOIaid","mcod",1)="TOIaid(tsida)  ;CKW/ESC  i4apr18 ; 20180404-55 ; List & Audit ^TG(0 and tsid,"
^ZWCmcd("TOIaid","mcod",2)="  ;      in gmsa/ rTOI3ucal/ "
^ZWCmcd("TOIaid","mcod",3)="  ;   SIC:  ^TG(0  and ^TG(tsid,  @toiFL  are TWO SEPARATE THINGS "
^ZWCmcd("TOIaid","mcod",4)="  ;      and within ^TG(0, (units and tsidCur ?)"
^ZWCmcd("TOIaid","mcod",5)="  ;"
^ZWCmcd("TOIaid","mcod",6)="  ; Refs by ^cqDG  Menu: dix.  Duc."
^ZWCmcd("TOIaid","mcod",7)="  I $G(tsida)="""" S tsida=$G(^TG(0,""tsidCur"")) I tsida="""" D bug^dv Q"
^ZWCmcd("TOIaid","mcod",8)="  S tsid=tsida"
^ZWCmcd("TOIaid","mcod",9)="  I $D(^TG(tsid))=0 D b^dv(""tsid is UNDEF in ^TG"",""tsid,tsida"") Q"
^ZWCmcd("TOIaid","mcod",10)="  D D1,D2"
^ZWCmcd("TOIaid","mcod",11)="  Q"
^ZWCmcd("TOIaid","mcod",12)=";;toiFL:sTFL,tFL,VNmode,WQP,dictL,vnd12,d8vn,vqlst,Cpx,Csx,cdL,wtL,cTS,ctxde_^TG(tsid)  "
^ZWCmcd("TOIaid-D1","mcod",13)=";* tsid"
^ZWCmcd("TOIaid-D1","mcod",14)="D1  D ^TOIimg  ; toiFL, dtFL"
^ZWCmcd("TOIaid-D1","mcod",15)="    D GFL^dvs(toiFL) ; tsid : @toiFL"
^ZWCmcd("TOIaid-D1","mcod",16)="    D ^dv(""summary ^TG(tsid, all of toiFL "",""tsid,toiFL,""_toiFL)"
^ZWCmcd("TOIaid-D1","mcod",17)="    Q"
^ZWCmcd("TOIaid-D2","mcod",18)=";*  Structures  PTYpx, PTYsx, WDt(), Dict ?"
^ZWCmcd("TOIaid-D2","mcod",19)="D2  F ax=""PTYpx"",""PTYsx"" DO  ;"
^ZWCmcd("TOIaid-D2","mcod",20)="       .I $D(^TG(tsid,ax)) W:$X ! zwr ^TG(tsid,ax) W ! Q"
^ZWCmcd("TOIaid-D2","mcod",21)="       .W:$X ! W ""UNDEF:  ^TG(tsid,'' "",ax,!"
^ZWCmcd("TOIaid-D2","mcod",22)="    W ! Q"
^ZWCmcd("TOIaid-TG0","mcod",23)=";*"
^ZWCmcd("TOIaid-TG0","mcod",24)=";*"
^ZWCmcd("TOIaid-TG0","mcod",25)=";*     ****************"
^ZWCmcd("TOIaid-TG0","mcod",26)=";*  ; ^TG(0,"
^ZWCmcd("TOIaid-TG0","mcod",27)="TG0  KILL tsid W:$X ! W ""Base ^TG(0 -"",!"
^ZWCmcd("TOIaid-TG0","mcod",28)="    F ax=""px"",""sx"",""XUw"",""XUv"",""XUl"",""DWL"",""MOL"" I $D(^TG(0,ax)) W:$X ! zwr ^TG(0,ax) W !"
^ZWCmcd("TOIaid-TG0","mcod",29)="    Q  "
^ZWCmcd("TOIcom","mcod",1)="TOIcom(Txi)  ;CKW/ESC  i12aug18 gmsa/ rTOI7/ ; 20180812-32 ; Modify Txi for Comment, $C(9,13)"
^ZWCmcd("TOIcom","mcod",2)="  ;       Call by Ref dot Txi;  20sep20 dverr -> deverr"
^ZWCmcd("TOIcom","mcod",3)="  ;"
^ZWCmcd("TOIcom-A","mcod",4)="A   I $G(Txi)="""" D:$D(Txi)=0 ER(""Undef Text ?"",""Txi"") S Txi="""" Q"
^ZWCmcd("TOIcom-A","mcod",5)="    S Tcom="""""
^ZWCmcd("TOIcom-A","mcod",6)="    I Txi[""#"" S:$E(Txi)=""#"" Tcom=Txi,Txi="""" S:Txi["" # "" Tcom=$P(Txi,"" # "",2,9),Txi=$P(Txi,"" # "") Q:Txi="""""
^ZWCmcd("TOIcom-A","mcod",7)="    S Txi=$TR(Txi,$C(9,13),"" "")"
^ZWCmcd("TOIcom-A","mcod",8)="    Q"
^ZWCmcd("TOIcom-ER","mcod",9)=";*"
^ZWCmcd("TOIcom-ER","mcod",10)="ER(M,VL) D ^deverr($G(M),$G(VL)) Q"
^ZWCmcd("TOIcom-ER","mcod",11)=""
^ZWCmcd("TOIcom-ER","mcod",12)="     "
^ZWCmcd("TOId2","mcod",1)="TOId2   ;CKW/ESC   i22jan18  gmsa/  rTOI7/ ; 20191002-94 ; Find a Date Field TOI"
^ZWCmcd("TOId2","mcod",2)="  ; 20sep20 cqlog-> devlog   rev 9oct Use WD() not L2  8aug19    "
^ZWCmcd("TOId2","mcod",3)="  ; At least one / or - not just day of month vs amt/num"
^ZWCmcd("TOId2","mcod",4)=";    Wpnd(wki)-> wki, WD(wki)"
^ZWCmcd("TOId2","mcod",5)=";  Defaults  Ddef(vn)=val  Dlst()  vn in {yr,mo,wkn,dat,apm,  d12, dj, wh}"
^ZWCmcd("TOId2-A","mcod",6)="A    D B,Def,dtm,Sdef,SDlst"
^ZWCmcd("TOId2-A","mcod",7)="     Q"
^ZWCmcd("TOId2-B","mcod",8)=";* d2 Variant One wki at a time to coclusions, Wty, Wr"
^ZWCmcd("TOId2-B","mcod",9)="B    ;I $G(toiFL)="""" D ^TOIimg  ; : dtFL, toiFL ^TG(0"
^ZWCmcd("TOId2-B","mcod",10)="     NEW d8,wh,djw,dQ D II"
^ZWCmcd("TOId2-B","mcod",11)="     ;;dQ 1 date found, exit series of format tests"
^ZWCmcd("TOId2-B","mcod",12)="     S qD=0,wki=0 F wn=0:1 S wki=$O(Wpnd(wki)) Q:wki=""""  DO  ;"
^ZWCmcd("TOId2-B","mcod",13)="       .S wd=$G(Wdlc(wki)) I wd="""" Q"
^ZWCmcd("TOId2-B","mcod",14)="       .S wd=$TR(wd,""-"",""/"")  ;treat / and - the same, switch to /"
^ZWCmcd("TOId2-B","mcod",15)="       .I wd[""/"" D dayp I dQ S dwki=wki D S9^TOIp(""d8"",d8) D b^dv(""Log dayp"",""dwki,d8,d12"") Q"
^ZWCmcd("TOId2-B","mcod",16)="       .D dtn Q:dQ"
^ZWCmcd("TOId2-B","mcod",17)="       .D dydt Q:dQ"
^ZWCmcd("TOId2-B","mcod",18)="     S wki=0 F wn=0:1 S wki=$O(Wpnd(wki)) Q:wki=""""  DO  ;Ck wds following d8"
^ZWCmcd("TOId2-B","mcod",19)="       .S tm1=$G(Wd(wki)) I tm1'="""" DO  ;"
^ZWCmcd("TOId2-B","mcod",20)="          ..D time"
^ZWCmcd("TOId2-B","mcod",21)="          ..S dtm=hr_min"
^ZWCmcd("TOId2-B","mcod",22)="           ..I dtm'?4n D b^dv(""Err time ?4n"",""dtm,hr,min,d8,d12,dQ,wki,ri,L"") Q"
^ZWCmcd("TOId2-B","mcod",23)="           ..S d12=d8_dtm"
^ZWCmcd("TOId2-B","mcod",24)="          ..D S9^TOIp(""dtm"",dtm)"
^ZWCmcd("TOId2-B","mcod",25)="          ..D b^dv(""Log time"",""hr,min,dtm,d12,d8"")  ;not tested yet"
^ZWCmcd("TOId2-B","mcod",26)="              ; Now combine all date-time vars, @DVL,  and -> Wty"
^ZWCmcd("TOId2-B","mcod",27)="              ;  yr,mn,day, apm,hr,min  : d8,d12 ?week also"
^ZWCmcd("TOId2-Def","mcod",50)=";*  Derive Defaults from Ddef(), where day, hr etc are still null"
^ZWCmcd("TOId2-Def","mcod",51)="Def  I yr="""" S yr=$G(Ddef(""yr""))"
^ZWCmcd("TOId2-Def","mcod",52)="     I day="""" S day=$G(Dlst(""day"")) I day S mn=$G(Dlst(mn)),yr=$G(Dlst(""yr""))"
^ZWCmcd("TOId2-Def","mcod",53)="     I day="""" S day=$G(Ddef(""day"")) I day>0 S mn=$G(Ddef(""mn"")),yr=$G(Ddef(""yr""))"
^ZWCmcd("TOId2-Def","mcod",54)="     I mn="""" S mn=$G(Dlst(""mn"")) D dpr(""deflstmn"") I mn S:$G(Dlst(""yr"")) yr=Dlst(""yr"")"
^ZWCmcd("TOId2-Def","mcod",55)="     I mn="""" S mn=$G(Ddef(""mn"")) D dpr(""defdefmn"") I mn S:$G(Ddef(""yr"")) yr=Ddef(""yr"")"
^ZWCmcd("TOId2-Def","mcod",56)="     I yr="""" S yr=$G(Dlst(""yr"")) D dpr(""defyr"") I yr="""" S yr=$G(Ddef(""yr""))"
^ZWCmcd("TOId2-Def","mcod",57)="     I day="""" D dpr(""defday"") DO  "
^ZWCmcd("TOId2-Def","mcod",58)="        .I $G(Ddef(""d12"")) S d12=Ddef(""d12"") I d12?12n D d12p Q"
^ZWCmcd("TOId2-Def","mcod",59)="        .I $G(Dlst(""d12"")) S d12=Dlst(""d12"") I d12?12n D d12p Q"
^ZWCmcd("TOId2-Def","mcod",60)="        .I $G(Ddef(""day"")) S day=Ddef(""day""),mn=$G(Ddef(""mn"")),yr=$G(Ddef(""yr""))"
^ZWCmcd("TOId2-Def","mcod",61)="     I hr="""" S hr=$G(Dlst(""hr"")),min=$G(Dlst(""min"")) I hr="""" S hr=""00"",min=""00"""
^ZWCmcd("TOId2-Def","mcod",62)="     ;I wh="""",d12?12n S whj=$$d8whj^dd($E(d12,1,8)),wh=+whj,djw=$P(whj,""-"",2)"
^ZWCmcd("TOId2-Def","mcod",63)="     Q"
^ZWCmcd("TOId2-II","mcod",45)=";*"
^ZWCmcd("TOId2-II","mcod",46)="II   S AZ=""ABCDEFGHIJKLMNOPQRSTUVWXYZ"",Az=""abcdefghijklmnopqrstuvwxyz"""
^ZWCmcd("TOId2-II","mcod",47)="     S dyL=""mon,tue,wed,thu,fri,sat,sun,"""
^ZWCmcd("TOId2-II","mcod",48)="     S moL=""jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec,"""
^ZWCmcd("TOId2-II","mcod",49)="     Q"
^ZWCmcd("TOId2-SDlst","mcod",64)=";* Save Dlst()  LAST vs Default   vs end of dtm already, redone here"
^ZWCmcd("TOId2-SDlst","mcod",65)="SDlst KILL Dlst I d12?12n S Dlst(""d12"")=d12 ;D d12p "
^ZWCmcd("TOId2-SDlst","mcod",66)="     S Dlst(""yr"")=yr,Dlst(""mn"")=mn,Dlst(""day"")=day"
^ZWCmcd("TOId2-SDlst","mcod",67)="     S Dlst(""hr"")=hr,Dlst(""min"")=min,Dlst(""apm"")=apm"
^ZWCmcd("TOId2-SDlst","mcod",68)="     I $G(wh) S Dlst(""wh"")=wh"
^ZWCmcd("TOId2-SDlst","mcod",69)="     Q"
^ZWCmcd("TOId2-Sdef","mcod",70)=";*   from end of dtm"
^ZWCmcd("TOId2-Sdef","mcod",71)="Sdef  F vn=""d12"",""yr"",""mn"",""day"",""hr"",""min"" S Dlst(vn)=$G(@vn)  ; sic vs dtFL ? not wh"
^ZWCmcd("TOId2-Sdef","mcod",72)="      Q"
^ZWCmcd("TOId2-Se","mcod",101)=";*"
^ZWCmcd("TOId2-Se","mcod",102)="Se(cd) I $G(cd)="""" D bug^dv Q"
^ZWCmcd("TOId2-Se","mcod",103)="       I dE="""" S dE=cd Q"
^ZWCmcd("TOId2-Se","mcod",104)="       S dE=dE_"",""_cd"
^ZWCmcd("TOId2-Se","mcod",105)="       Q"
^ZWCmcd("TOId2-WKN","mcod",149)=";*  dy1~wk41 : wh for use with day of week, "
^ZWCmcd("TOId2-WKN","mcod",150)="WKN  S w=+$E(dt1,3,9)"
^ZWCmcd("TOId2-WKN","mcod",151)="     I (w<1)!(w>53) D b^dv(""Err wkn 1-53"",""dt1,w"") Q"
^ZWCmcd("TOId2-WKN","mcod",152)="     S:w?1n w=0_w S wjy=w,w6=yr_wjy"
^ZWCmcd("TOId2-WKN","mcod",153)="       I w6'?6n D b^dv(""Err w6 fmt"",""w6,w"")"
^ZWCmcd("TOId2-WKN","mcod",154)="     S wh=$$w6wh^dd(w6)"
^ZWCmcd("TOId2-WKN","mcod",155)="     Q"
^ZWCmcd("TOId2-Xdate","mcod",125)=";* dt1 : yr, mo, day,  opt: hr,min"
^ZWCmcd("TOId2-Xdate","mcod",126)="Xdate  S day="""" ; I dt1[""/"" D day1 Q  ; may or may not have found date, day"
^ZWCmcd("TOId2-Xdate","mcod",127)="      I dt1?1.2n3A.4n D nMon I day D dpr(""nJan"") Q"
^ZWCmcd("TOId2-Xdate","mcod",128)="      I dt1?1""wk""1.2n D WKN I wh D dpr(""WKn"")  Q"
^ZWCmcd("TOId2-Xdate","mcod",129)="      I dt1?12n S hr=$E(dt1,9,10),min=$E(dt1,11,12),dt1=$E(dt1,1,8) D dpr(""n12"") Q"
^ZWCmcd("TOId2-Xdate","mcod",130)="      I dt1?8n S yr=$E(dt1,1,4),mn=$E(dt1,5,6),day=$E(dt1,7,8) D dpr(""n8"") Q"
^ZWCmcd("TOId2-Xdate","mcod",131)="      I dt1?4n D dpr(""4nyr"") D year(dt1) I yr Q  ;No day yet, mark used 2019 not time"
^ZWCmcd("TOId2-Xdate","mcod",132)="      D dpr(""date-not"")"
^ZWCmcd("TOId2-Xdate","mcod",133)="     ; Didnt find a date in this WD"
^ZWCmcd("TOId2-Xdate","mcod",134)="     Q"
^ZWCmcd("TOId2-Xdate","mcod",135)="    "
^ZWCmcd("TOId2-cdjw","mcod",187)=";*  : d8b, djw, day'"
^ZWCmcd("TOId2-cdjw","mcod",188)="cdjw(d8a) I $G(d8a)'?8n D b^dv(""cdjw-arg-not?8n"") Q"
^ZWCmcd("TOId2-cdjw","mcod",189)="        S dh=$$d8dh^dd(d8a)"
^ZWCmcd("TOId2-cdjw","mcod",190)="        S whj=$$dhwhj^dd(dh)"
^ZWCmcd("TOId2-cdjw","mcod",191)="        S djw=$P(whj,""-"",2)"
^ZWCmcd("TOId2-cdjw","mcod",192)="        S d8b=$$whjd8^dd(+whj,djwq)  ;diff day of week -> d8"
^ZWCmcd("TOId2-cdjw","mcod",193)="        D dpr(""d12-d8-wh-d8"")"
^ZWCmcd("TOId2-cdjw","mcod",194)="        S day=$E(d8b,7,8)  ;d8 may be null"
^ZWCmcd("TOId2-cdjw","mcod",195)="        I day="""" D b^dv(""wed -> d8 err"",""day,d8a,dh,wh,djw,djwq,L2,L0,ri"")"
^ZWCmcd("TOId2-cdjw","mcod",196)="      Q"
^ZWCmcd("TOId2-d12p","mcod",73)=";*  d12 -> yr,mn,day, hr,min"
^ZWCmcd("TOId2-d12p","mcod",74)="d12p S day=$E(d12,7,8),mn=$E(d12,5,6),yr=$E(d12,1,4)"
^ZWCmcd("TOId2-d12p","mcod",75)="     S hr=$E(d12,9,10),min=$E(d12,11,12)"
^ZWCmcd("TOId2-d12p","mcod",76)="     Q"
^ZWCmcd("TOId2-day","mcod",115)=";*"
^ZWCmcd("TOId2-day","mcod",116)="day(d) I $G(d)="""" D bug^dv Q"
^ZWCmcd("TOId2-day","mcod",117)="       I d>31 Q """""
^ZWCmcd("TOId2-day","mcod",118)="       S ndm=$P(""31,28,31,30,31,30,31,31,30,31,30,31"","","",mn)"
^ZWCmcd("TOId2-day","mcod",119)="       I ndm=28,yr#4,'(yr#400) S ndm=29"
^ZWCmcd("TOId2-day","mcod",120)="       I d>ndm Q """""
^ZWCmcd("TOId2-day","mcod",121)="       S:d?1n d=0_d "
^ZWCmcd("TOId2-day","mcod",122)="       Q d"
^ZWCmcd("TOId2-dayp","mcod",77)=";*"
^ZWCmcd("TOId2-dayp","mcod",78)=";*  wd split by/ 2 or 3  : dQ, yr, mn, day"
^ZWCmcd("TOId2-dayp","mcod",79)="dayp  S Ln=$L(wd,""/""),p1=$P(wd,""/""),p2=$P(wd,""/"",2),p3=$P(wd,""/"",3)"
^ZWCmcd("TOId2-dayp","mcod",80)="        ;I p1'?1.2n!(p2'?1.2n) Q  ; some other use of /"
^ZWCmcd("TOId2-dayp","mcod",81)="      I Ln=3 S yr=$$yr(p3),mn=$$mn(p1),day=$$day(p2) DO  Q:dQ"
^ZWCmcd("TOId2-dayp","mcod",82)="          .S d8=yr_mn_day_""_"" D dpr(""3/d8"")"
^ZWCmcd("TOId2-dayp","mcod",83)="          .I d8?8n1""_"" D S9^TOIp(""d8"",d8)"
^ZWCmcd("TOId2-dayp","mcod",84)="      I Ln=2  DO  Q:dQ"
^ZWCmcd("TOId2-dayp","mcod",85)="        .S mn=$$mn(p1),day=$$day(p2)"
^ZWCmcd("TOId2-dayp","mcod",86)="        .I 'yr DO  "
^ZWCmcd("TOId2-dayp","mcod",87)="           ..S yr=$G(Ddef(""yr"")) I yr D dpr(""defyr"") Q"
^ZWCmcd("TOId2-dayp","mcod",88)="           ..S yr=$G(Dlst(""yr"")) D dpr(""yrDlst"")"
^ZWCmcd("TOId2-dayp","mcod",89)="        .S d8=yr_mn_day_""_""  I d8'?8n1p D b^dv(""Err d8"",""dQ,d8,d12,wd,p1,p2,p3,wki,ri"") Q"
^ZWCmcd("TOId2-dayp","mcod",90)="        .D dpr(""2/md"")"
^ZWCmcd("TOId2-dayp","mcod",91)="        .D S9^TOIp(""d8"",d8)  ; S9(Wty,Wr)"
^ZWCmcd("TOId2-dayp","mcod",92)="      D b^dv(""Err matching /"",""dQ,wd,wki,d8,d12,L,ri"")"
^ZWCmcd("TOId2-dayp","mcod",93)="      Q"
^ZWCmcd("TOId2-dpr","mcod",212)=";*"
^ZWCmcd("TOId2-dpr","mcod",213)=";*  Add process log cd to  Lpr  (identical to dpr() in ^qdTOIin"
^ZWCmcd("TOId2-dpr","mcod",214)="dpr(cd) I Lpr'="""" S Lpr=Lpr_"", ""_cd Q"
^ZWCmcd("TOId2-dpr","mcod",215)="        S Lpr=cd Q"
^ZWCmcd("TOId2-dpr","mcod",216)=";*    * * * * *"
^ZWCmcd("TOId2-dpr","mcod",217)=""
^ZWCmcd("TOId2-dpr","mcod",218)="      "
^ZWCmcd("TOId2-dtm","mcod",28)="dtm   S (d12,d8)="""" D dpr(""dtm"") "
^ZWCmcd("TOId2-dtm","mcod",29)="      I mn?1n S mn=""0""_mn D dpr(""lzmn"")  D b^dv(""err vs $$mn"",""mn,L,ri"")"
^ZWCmcd("TOId2-dtm","mcod",30)="      I day?1n S day=""0""_day D dpr(""lzday"") D b^dv(""err vs $$day"",""day,L,ri"")"
^ZWCmcd("TOId2-dtm","mcod",31)="      I yr?2n S yr=""20""_yr D dpr(""yrl20"")  D b^dv(""err vs $$yr"",""yr,L,ri"")"
^ZWCmcd("TOId2-dtm","mcod",32)="      S d=yr_mn_day I d?8n S d8=d_""_"""
^ZWCmcd("TOId2-dtm","mcod",33)="      I hr?1n S hr=""0""_hr D dpr(""lzhr"")"
^ZWCmcd("TOId2-dtm","mcod",34)="      I min?1n S min=""0""_min D dpr(""lzmin"")"
^ZWCmcd("TOId2-dtm","mcod",35)="      S d=yr_mn_day_""_""_hr_min "
^ZWCmcd("TOId2-dtm","mcod",36)="      I d?8n1""_""4n S d12=d"
^ZWCmcd("TOId2-dtm","mcod",37)="        I d12'?8n1""_""4nn D ^deverr(""d12 err "",""d12,d,yr,mn,day,hr,min,dt1,dt2,ri,L0,L2"") Q"
^ZWCmcd("TOId2-dtm","mcod",38)="        I d8'?8n1""_"" D ^deverr(""d8 err"",""d8,d12,d,yr,mn,day,ri,L0,L2,L"") Q"
^ZWCmcd("TOId2-dtm","mcod",39)="      ;"
^ZWCmcd("TOId2-dtm","mcod",40)="      I dwki'=wki D b^dv(""ck need for dwki"",""dwki,wki,ri,L0"")"
^ZWCmcd("TOId2-dtm","mcod",41)="      I dwki="""" D b^dv(""Err no dwki"",""dwki,wki,nsp,d8,d12,ri"") Q"
^ZWCmcd("TOId2-dtm","mcod",42)="      S wki=dwki "
^ZWCmcd("TOId2-dtm","mcod",43)="      D S9^TOIp(""d8"",d8)"
^ZWCmcd("TOId2-dtm","mcod",44)="      Q"
^ZWCmcd("TOId2-dtn","mcod",94)=";*"
^ZWCmcd("TOId2-dtn","mcod",95)="dtn(d) I $G(d)="""" D bug^dv Q"
^ZWCmcd("TOId2-dtn","mcod",96)="      I d'?4.12n Q """""
^ZWCmcd("TOId2-dtn","mcod",97)="      I d?12n S d12p=$E(d,1,8)_""_""_$E(d,9,12) D S9^TOIp(""d12"",d12p) Q d12p"
^ZWCmcd("TOId2-dtn","mcod",98)="      I d?8n S d8p=d_""_"" D S9^TOIp(""d8p"",d8p) Q d8p"
^ZWCmcd("TOId2-dtn","mcod",99)="      I d?4n S y=$$yr(yr) I y S d8y=y D S9^TOIp(""yr"",d8y) Q d8p"
^ZWCmcd("TOId2-dtn","mcod",100)="      Q """""
^ZWCmcd("TOId2-dydt","mcod",156)=";*"
^ZWCmcd("TOId2-dydt","mcod",157)=";*  dt2, dyL  :  day of week (""wed""), wh(week#)  -> day,mn,yr, d8m~d8"
^ZWCmcd("TOId2-dydt","mcod",158)="dydt  S djwq=$F(dyL,dt2_"","")-1\4 I djwq DO  Q:dQ"
^ZWCmcd("TOId2-dydt","mcod",159)="        .; Calc day from day of week (djwq) +  Week as wh"
^ZWCmcd("TOId2-dydt","mcod",160)="        .S d8=$$whjd8^dd(wh,djwq)"
^ZWCmcd("TOId2-dydt","mcod",161)="        .I d8'?8n D b^dv(""Err cal date from week & day of week"",""d8,wh,djwq"") Q"
^ZWCmcd("TOId2-dydt","mcod",162)="        .S yr=$E(d8,1,4),mn=$E(d8,5,6),day=$E(d8,7,8)"
^ZWCmcd("TOId2-dydt","mcod",163)="        .D S9^TOIp(""d8"",d8)"
^ZWCmcd("TOId2-dydt","mcod",164)="      I day  Q  ; Ignore if have date, redundant - vs ck consistent-- below"
^ZWCmcd("TOId2-dydt","mcod",165)="      DO  ; ck day of wk vs d8/d12"
^ZWCmcd("TOId2-dydt","mcod",166)="        .I d12?12n S d8=$E(d12,1,8)"
^ZWCmcd("TOId2-dydt","mcod",167)="        .E  S:mn?1n mn=0_mn S:day?1n day=0_day S:yr?2n yr=20_yr S d8=yr_mn_day"
^ZWCmcd("TOId2-dydt","mcod",168)="        .D cdjw(d12) ; d8, djwq  seq week #"
^ZWCmcd("TOId2-dydt","mcod",169)="        .I djw=djwq Q  ;redundant, all is ok"
^ZWCmcd("TOId2-dydt","mcod",170)="        .D dpr(""day-not-eq"") "
^ZWCmcd("TOId2-dydt","mcod",171)="        .D b^dv(""mon NOT eq m/d"",""djw,djwq,day,L2,L0,ri"")"
^ZWCmcd("TOId2-dydt","mcod",172)="      I day="""" DO  Q"
^ZWCmcd("TOId2-dydt","mcod",173)="        .NEW dh,d8a,d8b,d12d"
^ZWCmcd("TOId2-dydt","mcod",174)="        .S xwh=$G(Ddef(""wh"")) I xwh DO   I d8 Q"
^ZWCmcd("TOId2-dydt","mcod",175)="           ..S d8=$$whjd8^dd(xwh,djwq)"
^ZWCmcd("TOId2-dydt","mcod",176)="           ..I d8'?8n D b^dv(""Err def day"",""d8,xwh,wh,djwq"") Q"
^ZWCmcd("TOId2-dydt","mcod",177)="           ..S yr=$E(d8,1,4),mn=$E(d8,5,6),day=$E(d8,7,8)"
^ZWCmcd("TOId2-dydt","mcod",178)="        .S d12d=$G(Dlst(""d12"")) I d12d="""" S d12d=$G(Dlst(""d12""))"
^ZWCmcd("TOId2-dydt","mcod",179)="        .S d8a=$E(d12d,1,8) I d8a'?8n Q"
^ZWCmcd("TOId2-dydt","mcod",180)="        .D cdjw(d8a)"
^ZWCmcd("TOId2-dydt","mcod",181)="        .S d12=d8b_$E(d12,9,12)"
^ZWCmcd("TOId2-dydt","mcod",182)="        .S day=$E(d12,7,8)"
^ZWCmcd("TOId2-dydt","mcod",183)="        .D ^devlog(""Log mon -> day"",""day,djwq,wh"")"
^ZWCmcd("TOId2-dydt","mcod",184)="      S:mn?1n mn=0_mn S:day?1n day=0_day"
^ZWCmcd("TOId2-dydt","mcod",185)="      S d8m=yr_mn_day"
^ZWCmcd("TOId2-dydt","mcod",186)="      Q"
^ZWCmcd("TOId2-mn","mcod",111)=";*$Q=mn'"
^ZWCmcd("TOId2-mn","mcod",112)="mn(m) I $G(m)="""" D bug^dv Q"
^ZWCmcd("TOId2-mn","mcod",113)="       I m?1.2n,m<13 S:m?1n m=0_m Q m"
^ZWCmcd("TOId2-mn","mcod",114)="       Q """""
^ZWCmcd("TOId2-nMon","mcod",136)=";*  10oct or 10oct19 : day, mn, yr"
^ZWCmcd("TOId2-nMon","mcod",137)="nMon  NEW d,m,n,y"
^ZWCmcd("TOId2-nMon","mcod",138)="      S d=+dt1,m=$E(dt1,2,4) S:m m=$E(dt1,3,5)"
^ZWCmcd("TOId2-nMon","mcod",139)="      S m=$$LC^TOIs(m),n=$F(moL,m_"","")\4  ; 1-12 or 0"
^ZWCmcd("TOId2-nMon","mcod",140)="      I 'n D dpr(""xMocd"") Q"
^ZWCmcd("TOId2-nMon","mcod",141)="      S mn=n,day=d"
^ZWCmcd("TOId2-nMon","mcod",142)="      S y=$P(dt1,m,2) I (y?2n)!(y?4n) D year(y) D dpr(""1JanY"") I yr Q"
^ZWCmcd("TOId2-nMon","mcod",143)="      Q"
^ZWCmcd("TOId2-nyr","mcod",123)=";*       "
^ZWCmcd("TOId2-nyr","mcod",124)="nyr(n) I $G(n)'?2.4n D Se(""yr rng '""_n)   ;  No Refs"
^ZWCmcd("TOId2-time","mcod",197)=";* tm1 : hr, min"
^ZWCmcd("TOId2-time","mcod",198)="time  ;"
^ZWCmcd("TOId2-time","mcod",199)="      I $P(tm1,""pm"")_""pm""=tm1 S apm=""pm"",tm1=$P(tm1,""pm"") D dpr(""pm"")"
^ZWCmcd("TOId2-time","mcod",200)="      I $P(tm1,""p"")_""p""=tm1 S apm=""pm"",tm1=$P(tm1,""p"") D dpr(""p"")"
^ZWCmcd("TOId2-time","mcod",201)="      I $P(tm1,""am"")_""am""=tm1 S apm=""am"",tm1=$P(tm1,""am"") D dpr(""am"")"
^ZWCmcd("TOId2-time","mcod",202)="      I $P(tm1,""a"")_""a""=tm1 S apm=""am"",tm1=$P(tm1,""a"") D dpr(""a"")"
^ZWCmcd("TOId2-time","mcod",203)="      I tm1?1.2n1"":""1.2n S hr=$P(tm1,"":""),min=+$P(tm1,"":"",2) D dpr(""n:n"")"
^ZWCmcd("TOId2-time","mcod",204)="      ; Simple numbers- only if no hr yet"
^ZWCmcd("TOId2-time","mcod",205)="      I tm1?3.4n,hr="""" S hr=tm1\100,min=tm1#100 D dpr(""3-4nhrmin"")"
^ZWCmcd("TOId2-time","mcod",206)="      I tm1?1.2n,hr="""" S hr=+tm1,min=""00"" D dpr(""1-2nhrmin00"")"
^ZWCmcd("TOId2-time","mcod",207)="      I apm=""pm"",hr'="""",hr<12 S hr=hr+12 D dpr(""hr+12"")"
^ZWCmcd("TOId2-time","mcod",208)="      S dtm=hr_min"
^ZWCmcd("TOId2-time","mcod",209)="      D S9^TOIp(""dtm"",dtm)"
^ZWCmcd("TOId2-time","mcod",210)="      Q"
^ZWCmcd("TOId2-time","mcod",211)=""
^ZWCmcd("TOId2-year","mcod",144)=";*  ?2n or 4n year ? : yr"
^ZWCmcd("TOId2-year","mcod",145)="year(y)  I y?2n S y=20_y"
^ZWCmcd("TOId2-year","mcod",146)="      I y>1950,y<2100 S yr=y Q"
^ZWCmcd("TOId2-year","mcod",147)="      D dpr(""4nnotYr"")"
^ZWCmcd("TOId2-year","mcod",148)="      Q"
^ZWCmcd("TOId2-yr","mcod",106)=";*$Q=yr'"
^ZWCmcd("TOId2-yr","mcod",107)="yr(y)  I $G(y)="""" D bug^dv Q"
^ZWCmcd("TOId2-yr","mcod",108)="       I y?2n S y=""20""_y"
^ZWCmcd("TOId2-yr","mcod",109)="       I y?4n,y>1900,y<2100 Q y"
^ZWCmcd("TOId2-yr","mcod",110)="       Q """""
^ZWCmcd("TOIda","mcod",1)="TOIda(tsid)  ;CKW/ESC i13mar23 gmsa./ rTOI7/ ;20230313-18;Display TOIa Assembly of TOIsyn"
^ZWCmcd("TOIda","mcod",2)=";  ^TG(tsid)  TOIsyn, TSL"
^ZWCmcd("TOIda","mcod",3)=";See WTOIa^TOIw     neither current 2apr23"
^ZWCmcd("TOIda","mcod",4)=";"
^ZWCmcd("TOIda-A","mcod",5)="A   D ^GP6(""^TG(tsid,*)"")"
^ZWCmcd("TOIda-A","mcod",6)="    Q"
^ZWCmcd("TOIda-A","mcod",7)=";"
^ZWCmcd("TOIdiff","mcod",1)="TOIdiff(d1,d2)  ;CKW/ESC  i23jan18 ; 20180123-02 ; Diff d2-d1 time interval"
^ZWCmcd("TOIdiff","mcod",2)="  ; d1, d2 both ?12n"
^ZWCmcd("TOIdiff","mcod",3)="  I $G(d1)'?12n D b^dv(""Err d1 fmt ?12n"",""d1,d2"") Q"
^ZWCmcd("TOIdiff","mcod",4)="  I $G(d2)'?12n D b^dv(""Err d2 fmt ?12n"",""d2,d1"") Q"
^ZWCmcd("TOIdiff","mcod",5)=";  d1,d2 :  dy, hr, min  diff d2-d1"
^ZWCmcd("TOIdiff-A","mcod",6)="A  NEW bhr,bdy"
^ZWCmcd("TOIdiff-A","mcod",7)="   S (bhr,bdy)=0"
^ZWCmcd("TOIdiff-A","mcod",8)="   S dh1=$$d8dh^dd($E(d1,1,8)),dh2=$$d8dh^dd($E(d2,1,8))"
^ZWCmcd("TOIdiff-A","mcod",9)="   S min=$E(d2,11,12)-$E(d1,11,12) I min<0 S min=min+60,bhr=-1"
^ZWCmcd("TOIdiff-A","mcod",10)="   S:min?1n min=0_min"
^ZWCmcd("TOIdiff-A","mcod",11)="   S hr=$E(d2,9,10)-$E(d1,9,10)+bhr I hr<0 S bdy=-1,hr=hr+24"
^ZWCmcd("TOIdiff-A","mcod",12)="   S:hr?1n hr=0_hr"
^ZWCmcd("TOIdiff-A","mcod",13)="   S dy=dh2-dh1+bdy"
^ZWCmcd("TOIdiff-A","mcod",14)="   Q"
^ZWCmcd("TOIdiff-T","mcod",15)=";*"
^ZWCmcd("TOIdiff-T","mcod",16)="T  S d1=201801212300,d2=201801220100,A=""0,2,0"" D A,W"
^ZWCmcd("TOIdiff-T","mcod",17)="   S d1=201801212300,d2=201801240100,A=""2,2,0"" D A,W"
^ZWCmcd("TOIdiff-T","mcod",18)="   S d1=201801212300,d2=201801222300,A=""1,0,0"" D A,W"
^ZWCmcd("TOIdiff-T","mcod",19)="   S d1=201801212355,d2=201802220105,A=""31,1,10"" D A,W"
^ZWCmcd("TOIdiff-T","mcod",20)="   W:$X ! W ""Completed Series T^TOIdiff"",!"
^ZWCmcd("TOIdiff-T","mcod",21)="   Q"
^ZWCmcd("TOIdiff-W","mcod",22)=";* Write on Error"
^ZWCmcd("TOIdiff-W","mcod",23)="W  W:$X ! I (+dy'=$P(A,"",""))!(+hr'=$P(A,"","",2))!(+min'=$P(A,"","",3)) DO"
^ZWCmcd("TOIdiff-W","mcod",24)="      .D b^dv(""Err "",""A,dy,hr,min,d1,d2"")"
^ZWCmcd("TOIdiff-W","mcod",25)="   Q"
^ZWCmcd("TOIdiff-W","mcod",26)="   "
^ZWCmcd("TOIdiff-W","mcod",27)="   "
^ZWCmcd("TOIimg","mcod",1)="TOIimg   ;CKW/ESC   i23jan18  ; 20180123-51 ; IMG for ^TOI*"
^ZWCmcd("TOIimg","mcod",2)="  ;  in gmsa/  rTOI7/      8aug19    "
^ZWCmcd("TOIimg","mcod",3)="  ; cp from gmsa/  rTOI3ucal/ "
^ZWCmcd("TOIimg","mcod",4)="  ;    See ^ddvar"
^ZWCmcd("TOIimg","mcod",5)="  ;"
^ZWCmcd("TOIimg-A","mcod",6)="A   S dtFL=""d12,yr,mn,mjy,day,djw,apm,hr,min,wh,Lpr_Ddef""  ; for ^TOId Date-Time defaults"
^ZWCmcd("TOIimg-A","mcod",7)="    D T^dws(""dtFL=d12,yr,mn,mjy,day,djw,apm,hr,min,wh,Lpr_Ddef"")"
^ZWCmcd("TOIimg-A","mcod",8)="    S toiFL=""sTFL,tFL,VNmode,WQP,dictL,vnd12,d8vn,vqlst,Cpx,Csx,cdL,wtL,cTS,ctxde_^TG(tsid)""    "
^ZWCmcd("TOIimg-A","mcod",9)="    D T^dws(""toiFL=sTFL,tFL,VNmode,WQP,dictL,vnd12,d8vn,vqlst,Cpx,Csx,cdL,wtL,cTS,ctxde_^TG(tsid)"")"
^ZWCmcd("TOIimg-A","mcod",10)="    Q"
^ZWCmcd("TOIimg-IAN","mcod",46)=";*  AN  qualifies TG vars for assign vn=val in sTFL for ^TOIa"
^ZWCmcd("TOIimg-IAN","mcod",47)="IAN   KILL ^TG(0,""AN"")  ;redundant"
^ZWCmcd("TOIimg-IAN","mcod",48)="      NEW FL,ai,an"
^ZWCmcd("TOIimg-IAN","mcod",49)="      I $G(toiFL)="""" D ^TOIimg"
^ZWCmcd("TOIimg-IAN","mcod",50)="      S FL=$P(toiFL,""_"")"
^ZWCmcd("TOIimg-IAN","mcod",51)="      F ai=1:1:$L(FL,"","") S an=$P(FL,"","",ai),^TG(0,""AN"",an)=ai"
^ZWCmcd("TOIimg-IAN","mcod",52)="      Q"
^ZWCmcd("TOIimg-IAN","mcod",53)=";"
^ZWCmcd("TOIimg-IDAT","mcod",20)=";*"
^ZWCmcd("TOIimg-IDAT","mcod",21)="IDAT NEW L,i"
^ZWCmcd("TOIimg-IDAT","mcod",22)="     S L=""jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec"""
^ZWCmcd("TOIimg-IDAT","mcod",23)="       F i=1:1:12 S ^TG(0,""MOL"",$P(L,"","",i))=i"
^ZWCmcd("TOIimg-IDAT","mcod",24)="     S L=""january,february,march,april,may,june,july,august,september,october,november,december"""
^ZWCmcd("TOIimg-IDAT","mcod",25)="       F i=1:1:12 S ^TG(0,""MOL"",$P(L,"","",i))=i"
^ZWCmcd("TOIimg-IDAT","mcod",26)="     S L=""mon,tue,wed,thu,fri,sat,sun"" F i=1:1:7 S ^TG(0,""DWL"",$P(L,"","",i))=i"
^ZWCmcd("TOIimg-IDAT","mcod",27)="     D SDW(""tues"",2),SDW(""thur"",4),SDW(""thurs"",4),SDW(""sa"",6),SDW(""su"",7)"
^ZWCmcd("TOIimg-IDAT","mcod",28)="     Q"
^ZWCmcd("TOIimg-ITG","mcod",11)=";*"
^ZWCmcd("TOIimg-ITG","mcod",12)=";*  Init ^TG(0  DWL, MOL, XUw, XUv, XUl"
^ZWCmcd("TOIimg-ITG","mcod",13)=";*  RefBy: ^TOIa"
^ZWCmcd("TOIimg-ITG","mcod",14)="ITG  KILL ^TG(0)  NEW L,i"
^ZWCmcd("TOIimg-ITG","mcod",15)="     D IDAT  ; Days of week, month names"
^ZWCmcd("TOIimg-ITG","mcod",16)="     D IXU   ;Units Conversion: length, wt/mass, vol"
^ZWCmcd("TOIimg-ITG","mcod",17)="     D IAN   ; TOI allowed vn direct set vn='value'"
^ZWCmcd("TOIimg-ITG","mcod",18)="     D ITVN^TOIa  ; ^TOIa support"
^ZWCmcd("TOIimg-ITG","mcod",19)="     Q"
^ZWCmcd("TOIimg-IXU","mcod",32)=";*  Units conversion, XUm  wt/mass, XUv vol, XUl length"
^ZWCmcd("TOIimg-IXU","mcod",33)="IXU  ;KILL ^TG(0,""XUw""),^TG(0,""XUv""),^TG(0,""XUl"")  ; redundant to KILL ^TG(0)"
^ZWCmcd("TOIimg-IXU","mcod",34)="     NEW L,i,p,u,n,x"
^ZWCmcd("TOIimg-IXU","mcod",35)="     S L=""1000 mg,.001 kg,1/454 lb,1/30 oz""  ; 1gm equivalents"
^ZWCmcd("TOIimg-IXU","mcod",36)="     F i=1:1:$L(L,"","") S p=$P(L,"","",i),u=$P(p,"" "",2),n=$P(p,"" "") I u'="""" S ^TG(0,""XUw"",u)=$$xn(n)"
^ZWCmcd("TOIimg-IXU","mcod",37)="     S L=""1/30 T,1/30 TBSP, 1/10 tsp,1/240 cup,1/480 pint,1/960 quart,1/3840 gal""  ; 1ml equivalents"
^ZWCmcd("TOIimg-IXU","mcod",38)="     F i=1:1:$L(L,"","") S p=$P(L,"","",i),u=$P(p,"" "",2),n=$P(p,"" "") I u'="""" S ^TG(0,""XUv"",u)=$$xn(n)"
^ZWCmcd("TOIimg-IXU","mcod",39)="     S L="".01 m,.00001 km,1/2.54 in,12/2.54 ft,36/2.54 yd""  ; 1 mm equivalents"
^ZWCmcd("TOIimg-IXU","mcod",40)="     F i=1:1:$L(L,"","") S p=$P(L,"","",i),u=$P(p,"" "",2),n=$P(p,"" "") I u'="""" S ^TG(0,""XUl"",u)=$$xn(n)"
^ZWCmcd("TOIimg-IXU","mcod",41)="     Q"
^ZWCmcd("TOIimg-SDW","mcod",29)=";*  Set misc day n combos"
^ZWCmcd("TOIimg-SDW","mcod",30)="SDW(cd,n) S ^TG(0,""DWL"",cd)=n"
^ZWCmcd("TOIimg-SDW","mcod",31)="      Q"
^ZWCmcd("TOIimg-dtFL","mcod",54)="dtFL  ;;"
^ZWCmcd("TOIimg-dtFL","mcod",55)=";;yr  year, ?4n  vs temporarily ?2n  (vs y2 ?2n )"
^ZWCmcd("TOIimg-dtFL","mcod",56)=";;mn  month, numerical 1-12 ?2n  saved with leading zero prn"
^ZWCmcd("TOIimg-dtFL","mcod",57)=";;     ~mjy"
^ZWCmcd("TOIimg-dtFL","mcod",58)=";;wjy wkn Week number within year, 1-53, No leading zero,"
^ZWCmcd("TOIimg-dtFL","mcod",59)=";;wh  serail week, $H analog"
^ZWCmcd("TOIimg-dtFL","mcod",60)=";;day Numerical day-of-month, 01-31,?2n (ld zero), depending on month & leapyear"
^ZWCmcd("TOIimg-dtFL","mcod",61)=";;      ~djw"
^ZWCmcd("TOIimg-dtFL","mcod",62)=";;apm am or pm, input, default in qaD(""apm"")"
^ZWCmcd("TOIimg-dtFL","mcod",63)=";;hr  hour 0:23"
^ZWCmcd("TOIimg-dtFL","mcod",64)=";;min minutes, 0-59"
^ZWCmcd("TOIimg-dtFL","mcod",65)=";;Lpr List of input transforms"
^ZWCmcd("TOIimg-dtFL","mcod",66)=""
^ZWCmcd("TOIimg-dtFL","mcod",67)="; Not actually saved in D() - defualts"
^ZWCmcd("TOIimg-dtFL","mcod",68)=";"
^ZWCmcd("TOIimg-dtFL","mcod",69)=";;qaD()   Array of defaults values, from //  line"
^ZWCmcd("TOIimg-dtFL","mcod",70)=";;Dlst()  Prior Line values, ? default"
^ZWCmcd("TOIimg-dtFL","mcod",71)=";;Dlst Array of Values among lines, subsequent, ?usee - not yet"
^ZWCmcd("TOIimg-dtFL","mcod",72)=";;TD(vn)  temporary ^QD(lid)  read-back in ^TOItes"
^ZWCmcd("TOIimg-dtFL","mcod",73)=";;"
^ZWCmcd("TOIimg-dtFL","mcod",74)=";;"
^ZWCmcd("TOIimg-toiFL","mcod",75)="toiFL  ;;"
^ZWCmcd("TOIimg-toiFL","mcod",76)=";;tsid  subscript, mnemonic id, eg uC0, uC2  for uCal"
^ZWCmcd("TOIimg-toiFL","mcod",77)=";;sTFL  Orig Source Config List"
^ZWCmcd("TOIimg-toiFL","mcod",78)=";;pL"
^ZWCmcd("TOIimg-toiFL","mcod",79)=";;psL"
^ZWCmcd("TOIimg-toiFL","mcod",80)=";;"
^ZWCmcd("TOIimg-xn","mcod",42)="xn(n)   I n[""/"" X ""S x=""_n S x=x*1000000\1/1000000 Q x"
^ZWCmcd("TOIimg-xn","mcod",43)="     Q n"
^ZWCmcd("TOIimg-xn","mcod",44)="     Q  ; safety"
^ZWCmcd("TOIimg-xn","mcod",45)=""
^ZWCmcd("TOIn","mcod",1)="TOIn(WDa)  ;CKW/ESC i14mar23 gmsa./ rTOI7/ ;20230314-88;Process numbers,amts, dollars ?units"
^ZWCmcd("TOIn","mcod",2)=";"
^ZWCmcd("TOIn","mcod",3)=";"
^ZWCmcd("TOIn","mcod",4)=";  wki, WD(wki) 1:1:nsp"
^ZWCmcd("TOIn","mcod",5)=";"
^ZWCmcd("TOIn","mcod",6)=";  WD, wki  : num, nty {int,num,neg,zero,dol""}"
^ZWCmcd("TOIn-Q","mcod",20)=";*"
^ZWCmcd("TOIn-Q","mcod",21)="Q     Q:$Q Q Q:Q="""""
^ZWCmcd("TOIn-Qbug","mcod",22)="Qbug  D qd Q:$Q Q  Q"
^ZWCmcd("TOIn-T","mcod",30)="T(T2) S TWD=$P(T2,""|"") D ^TOIn(TWD) I num'=$P(T2,""|"",2) D b^dv(""Err "",""T2,WD,num"")"
^ZWCmcd("TOIn-T","mcod",31)="      Q"
^ZWCmcd("TOIn-T","mcod",32)=";*"
^ZWCmcd("TOIn-T","mcod",33)=""
^ZWCmcd("TOIn-T","mcod",34)="      "
^ZWCmcd("TOIn-qd","mcod",23)="qd   D b^dv(""Err ""_$T(+0),""Q"") Q"
^ZWCmcd("TOIn-test","mcod",24)=";*"
^ZWCmcd("TOIn-test","mcod",25)=";* * * * tn."
^ZWCmcd("TOIn-test","mcod",26)="test  S T2=""-123|-123"" D T(T2)"
^ZWCmcd("TOIn-test","mcod",27)="      S T2=""123|123"" D T(T2)"
^ZWCmcd("TOIn-test","mcod",28)="      Q"
^ZWCmcd("TOIn-test","mcod",29)=";"
^ZWCmcd("TOIn-top","mcod",7)="top   NEW Q S Q="""" "
^ZWCmcd("TOIn-top","mcod",8)="      S W2=$G(WDa),C=$E(W2),nty="""" I C=""-"" S nty=""neg"",W2=$E(W2,2,999),C=$E(W2)"
^ZWCmcd("TOIn-top","mcod",9)="      I C=""$"" DO  ; SHould do this with quote processing, vs KLUDGE here"
^ZWCmcd("TOIn-top","mcod",10)="        .S W2=$E(W2,2,999),nty=""dol,""_nty,C=$E(W2)      "
^ZWCmcd("TOIn-top","mcod",11)="        .I W2="""" S W2=$G(WD(wki+1)),C=$E(W2) KILL Wpnd(wki+1) ;disappear next, combine"
^ZWCmcd("TOIn-top","mcod",12)="      I C=""("",$E(W2,$L(W2))="")"" S nty=nty_"",neg"",W2=$E(W2,2,$L(W2)-1),C=$E(W2)"
^ZWCmcd("TOIn-top","mcod",13)="      I 'W2,C'=""0"" S Q=""Log non-num"" D b^dv(Q,""C,W2,WD,wki"") Goto Q  ; not a number ?"
^ZWCmcd("TOIn-top","mcod",14)="      I 'W2 S nty=""num,int,zero"" Goto Q  ; zero"
^ZWCmcd("TOIn-top","mcod",15)="      I W2["","" S W2=$TR(W2,"","") ;strip commas"
^ZWCmcd("TOIn-top","mcod",16)="      I +W2=W2 S nty=""num,""_nty,num=+W2 S:nty[""neg"" num=-num Goto Q"
^ZWCmcd("TOIn-top","mcod",17)="      S num=+W2 S:nty[""neg"" num=-num"
^ZWCmcd("TOIn-top","mcod",18)="      D S9^TOIp(nty,num)"
^ZWCmcd("TOIn-top","mcod",19)="      Goto Q"
^ZWCmcd("TOIn2","mcod",1)="TOIn2  ;CKW/ESC"
^ZWCmcd("TOIn2","mcod",2)=";  wd, WD, wki : dQ, Wr"
^ZWCmcd("TOIn2","mcod",3)=";"
^ZWCmcd("TOIn2","mcod",4)=";"
^ZWCmcd("TOIn2-top","mcod",5)="top  S nwd=$TR(wd,"","")"
^ZWCmcd("TOIn2-top","mcod",6)="     I nwd?1.n!(-nwd?1.n) D S9^TOIp(""int"",nwd,""?n"") Q"
^ZWCmcd("TOIn2-top","mcod",7)="     I +wd=wd D S9^TOIp(""num"",wd,""+wd"") Q"
^ZWCmcd("TOIn2-top","mcod",8)="     I wd[""$"" "
^ZWCmcd("TOIn2-top","mcod",9)="      "
^ZWCmcd("TOIp","mcod",1)="TOIp(Tin,tsidp)  ;CKW/ESC i31mar18 gmsa./ rTOI7/ ; 20230101-87;Parse TOI input Tin, Profile tsid/tsidp"
^ZWCmcd("TOIp","mcod",2)=";   rev 1jan23 for fin3/ debug,ReFactor 4oct19 8aug19  "
^ZWCmcd("TOIp","mcod",3)=";"
^ZWCmcd("TOIp","mcod",4)="; Sequence Essential:  1) FQT separate quoted values/WD's, 2)  DSP once!, pre-WD-assignment wki"
^ZWCmcd("TOIp","mcod",5)=";  3) px/sx  Remove/""Used"" before TOId which only looks 1st 3 WD ?   4) TOId  multi-wd, "
^ZWCmcd("TOIp","mcod",6)=";  5) vn to assign wds in order, 6) vqlst  the last of vn in (5)  7)  Save @vn, VN(vn) or @G"
^ZWCmcd("TOIp","mcod",7)=";  Error messages deverr, tied to ri of TOIin file (not explicit herein)"
^ZWCmcd("TOIp","mcod",8)=";"
^ZWCmcd("TOIp","mcod",9)="  ; cp from gmsa/  rTOI3ucal/ then rTOI6/ "
^ZWCmcd("TOIp","mcod",10)="  ;RefBy: FL4/  rfr4/  ^fr4TI1  ^TOIT tests,  TOI6: by KAcf/ rcash/...  Dev"
^ZWCmcd("TOIp","mcod",11)="  ;"
^ZWCmcd("TOIp","mcod",12)="  ;  per VNmode {L,A,G}  ->@vn or VN(vn), sTFL_2 @G "
^ZWCmcd("TOIp","mcod",13)="  ;"
^ZWCmcd("TOIp","mcod",14)="  I $G(tsidp)="""" S tsidp=$G(^TG(0,""tsidCur"")) I tsidp="""" D bug^dv S Q=""9-No-tsid in"" Q"
^ZWCmcd("TOIp","mcod",15)="  S tsid=tsidp  ; tsid is sys var, tsidp is arrg/new"
^ZWCmcd("TOIp","mcod",16)="  KILL TGA MERGE TGA=^TG(tsid)  ; Use Array"
^ZWCmcd("TOIp","mcod",17)="    ;DI(vnty,wd)=Wr  ;by caller, Units here (later)"
^ZWCmcd("TOIp","mcod",18)="    ;  vs DI(wd)=vnty_Wr   combined search, one test vs mult dictionaries"
^ZWCmcd("TOIp","mcod",19)="    ;  or DI(wd,vnty)=Wr  for mult hits"
^ZWCmcd("TOIp","mcod",20)="    ;"
^ZWCmcd("TOIp","mcod",21)="  I $G(Tin)="""" KILL WD,Wdlc,Wvn,Wtr,Wty S TER=""1-No-Tin"" Q   ; Q TER"
^ZWCmcd("TOIp","mcod",22)="  D ^TOIimg  ; toiFL, tr9FL"
^ZWCmcd("TOIp","mcod",23)=";;toiFL:sTFL,tFL,VNmode,WQP,dictL,vndt,d8vn,vqlst,Cpx,Csx,cdL,wtL,cTS,ctxde_^TG(tsid)"
^ZWCmcd("TOIp","mcod",24)="  D GFL^dvs(toiFL)  ; tsid, ^TG(tsid,  all vn null or a value"
^ZWCmcd("TOIp","mcod",25)="  D III"
^ZWCmcd("TOIp","mcod",26)="  S VL=$P(tFL,""_"") F wi=1:1:$L(VL,"","") S vn=$P($P(VL,"","",wi),""/"") DO  ;"
^ZWCmcd("TOIp","mcod",27)="     .I $E(vn)?1p S vn=$E(vn,2,99)"
^ZWCmcd("TOIp","mcod",28)="     .I $E(vn,$L(vn))?1p S vn=$E(vn,1,$L(vn)-1)"
^ZWCmcd("TOIp","mcod",29)="     .I vn'="""" S @vn=""""  ; Init null vs NFL^dvs(dtFL)?"
^ZWCmcd("TOIp","mcod",30)="    ;D b^dv(""Log NFL"",""VL"")  ; also dumps list in VL ! Im so cute! 27mar23"
^ZWCmcd("TOIp","mcod",31)="  S T1=Tin I Tin[""#"" D Lpre  ; Tin : T1, TCom  Comments, tabs, ctrl..."
^ZWCmcd("TOIp","mcod",32)="    S T2=T1"
^ZWCmcd("TOIp","mcod",33)="    ;WQP is quote punctuation char list possibly including "" '     "
^ZWCmcd("TOIp","mcod",34)="  ;I $G(WQP)'="""" D FQT  ;Quotes handling T2 : T2', wpn^ markers in T2, Wqt(wpn)"
^ZWCmcd("TOIp","mcod",35)="  S de="""" I T2["";;"" S wki=98,de=$P(T2,"";;"",2,99),T2=$P(T2,"";;"") D S9(""de"",de)"
^ZWCmcd("TOIp","mcod",36)="  S T2=$$DSP^dvs(T2)"
^ZWCmcd("TOIp","mcod",37)="  I T2="""" DO    Q  ;only spaces or #"
^ZWCmcd("TOIp","mcod",38)="    .;D b^dv(""Net Blank"",""T2,T1,Tin,Tcom"")"
^ZWCmcd("TOIp","mcod",39)="  ;I Tin[""#"" D b^dv(""Test # Com vs pfx/sfx hash"",""Tin,T1,T2,Tcom"")"
^ZWCmcd("TOIp","mcod",40)="  D WCP  ; T2 : nsp, wki WD(wki),Wpnd(),Wdlc"
^ZWCmcd("TOIp","mcod",41)="  I vndt'="""" D ^TOId2 ;Date fields picked out"
^ZWCmcd("TOIp","mcod",42)="  S wki=0 F wn=0:1  S wki=$O(Wpnd(wki)) Q:wki=""""  DO  ;"
^ZWCmcd("TOIp","mcod",43)="    .S WD=WD(wki),wd=Wdlc(wki)  I WD="""" D b^dv(""Redundant test"",""WD,wd,wki"") Q"
^ZWCmcd("TOIp","mcod",44)="    .D PxSx Q:dQ    "
^ZWCmcd("TOIp","mcod",45)="    .D ^TOIn(WD) Q:dQ"
^ZWCmcd("TOIp","mcod",46)="    .F wdty=""tty"",""ac"",""cat"",""ven"" I $G(DI(wdty,wd))'="""" DO  Q:dQ"
^ZWCmcd("TOIp","mcod",47)="       ..S Wr=$G(DI(wdty,wd))"
^ZWCmcd("TOIp","mcod",48)="       ..D S9(wdty,Wr)"
^ZWCmcd("TOIp","mcod",49)="    .D ^TOIpat Q:dQ"
^ZWCmcd("TOIp","mcod",50)="   ;Now match vnty with vn"
^ZWCmcd("TOIp","mcod",51)="  D ^TOIpd  ;Display Status"
^ZWCmcd("TOIp","mcod",52)="  D ^TOIsv  ; Save WD(), Wvn() -> @vn  vs vnMode"
^ZWCmcd("TOIp-ER","mcod",135)=";*"
^ZWCmcd("TOIp-ER","mcod",136)="ER(M,VL) I $G(deverr)'="""" D ^dver($G(M),$G(VL)) Q"
^ZWCmcd("TOIp-ER","mcod",137)="     D ^dv($G(M),$G(VL))"
^ZWCmcd("TOIp-ER","mcod",138)="     D ^dvstk,b^dv(""Log ER"",""M,VL"")"
^ZWCmcd("TOIp-ER","mcod",139)="     Q"
^ZWCmcd("TOIp-FQT","mcod",126)=";*"
^ZWCmcd("TOIp-FQT","mcod",127)=";*  T2 : T2', wqi # found, usu zero quoted values -> QW(-wqi), Replace in T2 with Marker ^Q1, ^Q2"
^ZWCmcd("TOIp-FQT","mcod",128)="; will NOT handle nested quotes, even diff or dbl quotes or escaped quotes..."
^ZWCmcd("TOIp-FQT","mcod",129)="FQT  S wqi=0,pN=""?"""
^ZWCmcd("TOIp-FQT","mcod",130)="     I T2[""^"" D b^dv(""Input text should not include ^ -used as suffix quote marker"",""T2,T2"") Q"
^ZWCmcd("TOIp-FQT","mcod",131)="     F qi=1:1:$L(QP) S P=$E(QP,qi) I T2[P DO"
^ZWCmcd("TOIp-FQT","mcod",132)="       .S nQ=$L(T2,P) I nQ#2=0 D ER(""Unmatch Quotes P"",""P,nQ,T2,T2"") Q"
^ZWCmcd("TOIp-FQT","mcod",133)="       .F iq=2:2:nQ S wqi=wqi+1,Wqt(wqi)=$P(T2,iq),$P(T2,P,iq)=wqi_""^"""
^ZWCmcd("TOIp-FQT","mcod",134)="     Q     "
^ZWCmcd("TOIp-III","mcod",115)=";*"
^ZWCmcd("TOIp-III","mcod",116)=";*  Init sequence"
^ZWCmcd("TOIp-III","mcod",117)="III   KILL Wqt,WD,Wdlc,Wr,WDm,Wpnd,Wvn,Wtr"
^ZWCmcd("TOIp-III","mcod",118)="      I $G(devlog)="""" S Q=$$Ilog() I Q'="""" D b^dv(""Error Opening devlog,deverr "",""devlog"")"
^ZWCmcd("TOIp-III","mcod",119)="      Q"
^ZWCmcd("TOIp-Ilog","mcod",120)=";*$$ err : devlog, deverr"
^ZWCmcd("TOIp-Ilog","mcod",121)="Ilog()  S Q=$$devlog^devIO(""TOIp-log.html"")"
^ZWCmcd("TOIp-Ilog","mcod",122)="        I Q'="""" D b^dv(""Unable to Open devlog"",""devlog"") Q 1"
^ZWCmcd("TOIp-Ilog","mcod",123)="      S Q=$$deverr^devIO(""TOIp-err.txt"")"
^ZWCmcd("TOIp-Ilog","mcod",124)="        I Q'="""" D b^dv(""Unable to Open deverr"",""Q,deverr,devlog"") Q 2"
^ZWCmcd("TOIp-Ilog","mcod",125)="      Q """""
^ZWCmcd("TOIp-LC","mcod",90)=";*$$"
^ZWCmcd("TOIp-LC","mcod",91)="LC(X) Q $TR(X,""ABCDEFGHIJKLMNOPQRSTUVWXYZ"",""abcdefghijklmnopqrstuvwxyz"")"
^ZWCmcd("TOIp-LC","mcod",92)="     Q  ; safety"
^ZWCmcd("TOIp-LC","mcod",93)="; Should be no ^ in actual TOI input ???, would fake out quote marker?, inhibit processing, Test if QP'="""""
^ZWCmcd("TOIp-Lpre","mcod",65)=";* Tin : T1, Tcom"
^ZWCmcd("TOIp-Lpre","mcod",66)="Lpre  I $G(Tin)="""" D bug^dv Q"
^ZWCmcd("TOIp-Lpre","mcod",67)="  NEW c1"
^ZWCmcd("TOIp-Lpre","mcod",68)="  S T1=Tin,Tcom="""" "
^ZWCmcd("TOIp-Lpre","mcod",69)="  I T1["" # "" S Wr(100)=$P(T1,"" # "",2,9),T1=$P(T1,"" # "")"
^ZWCmcd("TOIp-Lpre","mcod",70)="  S c1=$E(T1) I c1=""#"" S Tcom=T1,T1=""""  ; ? vars need setting"
^ZWCmcd("TOIp-Lpre","mcod",71)="  ;D b^dv(""Log Lpre"",""Tin,Tcom,T1,ri"")"
^ZWCmcd("TOIp-Lpre","mcod",72)="  Q"
^ZWCmcd("TOIp-Px","mcod",107)="Px       .S v=$G(TGA(""PX"",p))         "
^ZWCmcd("TOIp-Px","mcod",108)="         .I v="""" D b^dv(""Unrecog prefix"",""sx,v,WD,wki,T2,L0"") Q"
^ZWCmcd("TOIp-Px","mcod",109)="         .S Wvn(wki)=v  ; "
^ZWCmcd("TOIp-Px","mcod",110)="         .S px=p,vn=v,toity=""px"""
^ZWCmcd("TOIp-Px","mcod",111)="         .S WD=$E(WD,2,999)     "
^ZWCmcd("TOIp-Px","mcod",112)="         .D S9(toity,WD)"
^ZWCmcd("TOIp-Px","mcod",113)="         .D b^dv(""Log px "",""wki,ri,p,WD,wd"")         "
^ZWCmcd("TOIp-Px","mcod",114)="     Q"
^ZWCmcd("TOIp-PxSx","mcod",94)=";*"
^ZWCmcd("TOIp-PxSx","mcod",95)=";* Decide from WD Syntax Type, toity"
^ZWCmcd("TOIp-PxSx","mcod",96)="PxSx S toity="""""
^ZWCmcd("TOIp-PxSx","mcod",97)="     S sx="""",p=$E(WD,$L(WD)) I p?1P DO   Q:dQ"
^ZWCmcd("TOIp-PxSx","mcod",98)="         .S dQ=0 I Csx'[p Q  ;Not invoked suffix punct"
^ZWCmcd("TOIp-Q","mcod",53)="Q S Q=""""   Q:$Q """" Q   ; Schizo call D ^TOIp  vs S Q=$$^TOIp..."
^ZWCmcd("TOIp-S9","mcod",54)=";*"
^ZWCmcd("TOIp-S9","mcod",55)="S9(Wty,Wr)"
^ZWCmcd("TOIp-S9","mcod",56)="     S Wty(wki)=Wty"
^ZWCmcd("TOIp-S9","mcod",57)="     S Wr(wki)=Wr"
^ZWCmcd("TOIp-S9","mcod",58)="     S Wtr(wki)=Lpr,Lpr="""""
^ZWCmcd("TOIp-S9","mcod",59)="     I $D(Wpnd(wki))'=1 D b^dv(""Err already done"",""wki,Wpnd(wki)"")"
^ZWCmcd("TOIp-S9","mcod",60)="     KILL Wpnd(wki)"
^ZWCmcd("TOIp-S9","mcod",61)="     S dQ=1"
^ZWCmcd("TOIp-S9","mcod",62)="     Q"
^ZWCmcd("TOIp-S9","mcod",63)=";*"
^ZWCmcd("TOIp-S9","mcod",64)=""
^ZWCmcd("TOIp-Sx","mcod",99)="Sx       .S v=$G(TGA(""SX"",p))         "
^ZWCmcd("TOIp-Sx","mcod",100)="         .I v="""" D b^dv(""Unrecog suffix"",""sx,v,WD,wki,T2,L0"") Q"
^ZWCmcd("TOIp-Sx","mcod",101)="         .S sx=p,vn=v,toity=""sx"""
^ZWCmcd("TOIp-Sx","mcod",102)="         .S WD=$E(WD,1,$L(WD)-1)"
^ZWCmcd("TOIp-Sx","mcod",103)="         .D S9(toity,WD)"
^ZWCmcd("TOIp-Sx","mcod",104)="         .S Wvn(wki)=v"
^ZWCmcd("TOIp-Sx","mcod",105)="     S px="""",p=$E(WD) I p?1p DO  Q:dQ"
^ZWCmcd("TOIp-Sx","mcod",106)="         .S dQ=0 I Cpx'[p Q  ;Not invoked prefix punct  "
^ZWCmcd("TOIp-WCP","mcod",73)=";*  "
^ZWCmcd("TOIp-WCP","mcod",74)=";*  Set WD()  T2 : nsp, WD(), WDt()"
^ZWCmcd("TOIp-WCP","mcod",75)="WCP  I T2[""$ "" DO  ;"
^ZWCmcd("TOIp-WCP","mcod",76)="       .S T=$P(T2,""$ "",2,9)"
^ZWCmcd("TOIp-WCP","mcod",77)="       .F i=1:1:$L(T) I $E(T,i)'="" "" S T=$P(T2,""$ "")_$E(T,i,999) Q"
^ZWCmcd("TOIp-WCP","mcod",78)="       .D b^dv(""Log fudge $-spaces"",""T2,T"")"
^ZWCmcd("TOIp-WCP","mcod",79)="       .S T2=T"
^ZWCmcd("TOIp-WCP","mcod",80)="     S nsp=$L(T2,"" "") I 'nsp D b^dv(""Nothing left in T2"",""Tin,T2,c1"") Q"
^ZWCmcd("TOIp-WCP","mcod",81)="     F wki=1:1:nsp DO  ; ^ is quote marker prefix to Q-name"
^ZWCmcd("TOIp-WCP","mcod",82)="        .S WD=$P(T2,"" "",wki)"
^ZWCmcd("TOIp-WCP","mcod",83)="     .S WD(wki)=WD  ;may be null"
^ZWCmcd("TOIp-WCP","mcod",84)="     .S wd=$$LC(WD)"
^ZWCmcd("TOIp-WCP","mcod",85)="     .S Wdlc(wki)=wd  ; Save vs redo $$LC in W"
^ZWCmcd("TOIp-WCP","mcod",86)="     .S Wpnd(wki)=1   ;Wpnd $O  kill when used, assigned Wty"
^ZWCmcd("TOIp-WCP","mcod",87)="     .I WD="""" Q"
^ZWCmcd("TOIp-WCP","mcod",88)="     .I WD[""^"" S wqi=+WD,WD(wki)=$G(Qwd(wqi)) D b^dv(""Log set from quotes"",""wki,wqi,WD,wd"")"
^ZWCmcd("TOIp-WCP","mcod",89)="     Q"
^ZWCmcd("TOIparse","mcod",1)="TOIparse(Tii)  ;CKW/ESC  i2oct19 ; 20191003-01 ; Temp/Alt  ^TOIp Parse One Line"
^ZWCmcd("TOIparse","mcod",2)="  ; in gmsa/  rTOI7/  really this is new TOIp/test  -> Stick with ^TOIp (rename entry)"
^ZWCmcd("TOIparse","mcod",3)="  ;  TOIp is primary 30mar23"
^ZWCmcd("TOIparse","mcod",4)=";"
^ZWCmcd("TOIparse-I","mcod",5)="I   BREAK  KILL WD,Wd,Wdu,Wvn,Wty"
^ZWCmcd("TOIparse-I","mcod",6)="    I $G(toiFL)="""" D ^TOIimg"
^ZWCmcd("TOIparse-I","mcod",7)="    D GFL^dvs(toiFL)  ; VNmode, ..."
^ZWCmcd("TOIparse-I","mcod",8)="    S Wbp="";^"",Ppx=""/@!*#$%.~\|"",Psx="".\|!#%&*_-""  ; Allowed Punct sx & px"
^ZWCmcd("TOIparse-I","mcod",9)="    ;"
^ZWCmcd("TOIparse-I","mcod",10)="    S T2=$TR(Tii,Wbp,""        ""),T3=$$DSP^dvs(T2)"
^ZWCmcd("TOIparse-I","mcod",11)="    F wi=1:1:$L(T3,"" "") DO  ;"
^ZWCmcd("TOIparse-I","mcod",12)="      .S WD=$P(T3,"" "",wi),px="""",sx="""",ty="""""
^ZWCmcd("TOIparse-I","mcod",13)="      .S Wu(wi)=0"
^ZWCmcd("TOIparse-I","mcod",14)="      .S C=$E(WD) I C?1P,Ppx[C S px=$E(WD),WD=$E(WD,2,999) D PXW"
^ZWCmcd("TOIparse-I","mcod",15)="      .S C=$E(WD,$L(WD)) I C?1P,Psx[C S sx=C,WD=$E(WD,1,$L(WD)-1) D SXW"
^ZWCmcd("TOIparse-I","mcod",16)="      .S WD(wi)=WD"
^ZWCmcd("TOIparse-I","mcod",17)="      .S Wd(wi)=$$LC^dvs(WD)"
^ZWCmcd("TOIparse-I","mcod",18)="    I VNmode[""dt"" D ^TOId"
^ZWCmcd("TOIparse-I","mcod",19)="    I VNmode[""PAT"" D ^TOIpat"
^ZWCmcd("TOIparse-I","mcod",20)="    ; Now line up wds and vn in order til last takes everything else"
^ZWCmcd("TOIparse-I","mcod",21)="    ;Thru each wi, bump vi/vn when not used yet, Wu-null or 0"
^ZWCmcd("TOIparse-I","mcod",22)="    S vi=1,vn=$P(vnL,"","",vi),Qvi=0 "
^ZWCmcd("TOIparse-I","mcod",23)="    F wi=1:1:nwi I 'Wu(wi) DO  Q:Qvi  ;vi done or last wi"
^ZWCmcd("TOIparse-I","mcod",24)="      .S Wvn(wi)=vn,Wu(wi)=1,Wty(wi)=""txt"",Wvn=vn"
^ZWCmcd("TOIparse-I","mcod",25)="      .I $L(vnL,"","")>vi S vi=vi+1,vn=$P(vnL,"","",vi) Q"
^ZWCmcd("TOIparse-I","mcod",26)="      .DO  ;"
^ZWCmcd("TOIparse-I","mcod",27)="         ..S Wty(wi)=""last"",Qvi=1"
^ZWCmcd("TOIparse-I","mcod",28)="         ..S WD=WD(wi)"
^ZWCmcd("TOIparse-I","mcod",29)="         ..F wi2=wi+1:1:nwi S WD=WD_"" ""_WD(wi2),Wu(wi2)=1,Wty(wi2)=""la+"""
^ZWCmcd("TOIparse-I","mcod",30)="         ..S WD(wi)=WD,Wd(wi)=$$LC^dvs(WD)"
^ZWCmcd("TOIparse-I","mcod",31)="         ..S Wvn(wi)=vn"
^ZWCmcd("TOIparse-I","mcod",32)="    ;"
^ZWCmcd("TOIparse-I","mcod",33)="    Q"
^ZWCmcd("TOIparse-PXW","mcod",34)=";* px, WD, wi"
^ZWCmcd("TOIparse-PXW","mcod",35)="PXW  S v=$G(TG(""PXvn"",px)) I v="""" Q  ;not regis pox"
^ZWCmcd("TOIparse-PXW","mcod",36)="     S Wvn(wi)=v,Wty(wi)=""px""_px,Wu(wi)=1"
^ZWCmcd("TOIparse-PXW","mcod",37)="     Q"
^ZWCmcd("TOIparse-SXW","mcod",38)=";*"
^ZWCmcd("TOIparse-SXW","mcod",39)="SXW  S v=$G(TG(""SXvn"",sx)) I v="""" Q ; Not regis sx"
^ZWCmcd("TOIparse-SXW","mcod",40)="     S Wvn(wi)=v,Wty(wi)=""sx""_sx,Wu(wi)=1"
^ZWCmcd("TOIparse-SXW","mcod",41)="     Q"
^ZWCmcd("TOIparse-SXW","mcod",42)=";*"
^ZWCmcd("TOIpat","mcod",1)="TOIpat  ;CKW/ESC i30mar23 gmsa./ rtoi7/ ;20230330-86;Parse Special patterns, email, url, ..."
^ZWCmcd("TOIpat","mcod",2)=";"
^ZWCmcd("TOIpat","mcod",3)=";"
^ZWCmcd("TOIpat","mcod",4)=";   Paralel part of ^TOIp"
^ZWCmcd("TOIpat","mcod",5)=";   Wpnd(wki) -> wki"
^ZWCmcd("TOIpat-EWD","mcod",57)=";*  toity, vn, @vn, dQ"
^ZWCmcd("TOIpat-EWD","mcod",58)="EWD  B  ;S9?"
^ZWCmcd("TOIpat-EWD","mcod",59)="     Q"
^ZWCmcd("TOIpat-PAT","mcod",14)=";*  obs code, replace"
^ZWCmcd("TOIpat-PAT","mcod",15)=";*   wki, WD, wd : toity,    "
^ZWCmcd("TOIpat-PAT","mcod",16)="PAT  I WD?1.n S toity=""int,num,dol"" D EWD Q"
^ZWCmcd("TOIpat-PAT","mcod",17)="     ;  I forgot what this was used for ??:  food units ?"
^ZWCmcd("TOIpat-PAT","mcod",18)="     I WD?1.n1.A.n I $$tncd(wd) S toity=""Icd"" D EWD Q  ;start with n?"
^ZWCmcd("TOIpat-PAT","mcod",19)="     I WD[""@"" I $$tema(WD) S toity=""email"" D EWD Q"
^ZWCmcd("TOIpat-PAT","mcod",20)="     I WD[""("" I $$ttel(WD) S toity=""tel"" D EWD Q"
^ZWCmcd("TOIpat-PAT","mcod",21)="       ;D ER(""Did not recog syntax of WD"",""WD,px,sx"")"
^ZWCmcd("TOIpat-PAT","mcod",22)="     S toity=""txt"",Wty(wki)=""txt"" Q  ; not used uet -> vqlst"
^ZWCmcd("TOIpat-PAT","mcod",23)="     Q"
^ZWCmcd("TOIpat-tema","mcod",33)=";* trigger [""@""  email type <Kirt Walker> ""kw@gmail.com"""
^ZWCmcd("TOIpat-tema","mcod",34)="tema(W)  I $G(W)="""" D bug^dv Q ""?"""
^ZWCmcd("TOIpat-tema","mcod",35)="     S e=W,hna="""" I W[""<"" S e=$P(W,""<"",2),e=$P(e,"">""),hna=$P(W,""<"")"
^ZWCmcd("TOIpat-tema","mcod",36)="     S dom=$P(e,""@"",2),na=$P(e,""@"")"
^ZWCmcd("TOIpat-tema","mcod",37)="     I dom'[""."" S Q=""2 ?domain"" Q Q"
^ZWCmcd("TOIpat-tema","mcod",38)="     I na="""" S Q=""# na in email"" Q Q"
^ZWCmcd("TOIpat-tema","mcod",39)="     S ema=e,toity=""email"" D EWD"
^ZWCmcd("TOIpat-tema","mcod",40)="     Q """""
^ZWCmcd("TOIpat-tncd","mcod",24)=";*"
^ZWCmcd("TOIpat-tncd","mcod",25)=";*$$  $$ null if NOT found!? - tncd -- for T2DM complexity ???"
^ZWCmcd("TOIpat-tncd","mcod",26)="tncd(w) S I=+w,cd="""" F i=1:1:$L(w) I $E(w,i)?1A S cd=$E(w,i,999) Q  ;skip past initial digits"
^ZWCmcd("TOIpat-tncd","mcod",27)="     S xu=$G(^TG(0,""XUw"",cd)) I xu'="""" S V2=cd,srvgm=xu,U2=cd Q 1"
^ZWCmcd("TOIpat-tncd","mcod",28)="     S xu=$G(^TG(0,""XUv"",cd)) I xu'="""" S V2=cd,srvml=xu,U2=cd Q 2"
^ZWCmcd("TOIpat-tncd","mcod",29)="     S xcd=$G(^TG(0,""MO"",cd)) I xcd S vn=""mn"",WD(wki)=xcd,WDt(wki)=""mn"" D EWD Q 3"
^ZWCmcd("TOIpat-tncd","mcod",30)="     S xcd=$G(^TG(0,""DWL"",cd)) I xcd S vn=""dwj"",WD(wki)=xcd,WDt(wki)=""dwk"" D EWD Q 4"
^ZWCmcd("TOIpat-tncd","mcod",31)="     S xcd=$G(^TG(0,""UVN"",cd)) I xcd'="""" S vn=xcd D EWD Q 5"
^ZWCmcd("TOIpat-tncd","mcod",32)="     Q """""
^ZWCmcd("TOIpat-top","mcod",6)="top   S dQ="""""
^ZWCmcd("TOIpat-top","mcod",7)="    S wki=0 F wn=0:1  S wki=$O(Wpnd(wki)) Q:wki=""""  DO  ;"
^ZWCmcd("TOIpat-top","mcod",8)="      .S wd=Wdlc(wki),dQ="""""
^ZWCmcd("TOIpat-top","mcod",9)="      .I wd[""@"" S Q=$$tema I dQ D S9^TOIp(""ema"",ema) Q"
^ZWCmcd("TOIpat-top","mcod",10)="      .I wd[""/"" S Q=$$turl I dQ D S9^TOIp(""url"",url) Q"
^ZWCmcd("TOIpat-top","mcod",11)="      .I wd[""-"" S cd=$$ttel(wd) I dQ D S9^TOIp(""tel"",cd) Q"
^ZWCmcd("TOIpat-top","mcod",12)="      .S xcd=$$tncd(wd) I dQ D S9^TOIp(""amt,un"",xcd) Q"
^ZWCmcd("TOIpat-top","mcod",13)="    Q"
^ZWCmcd("TOIpat-ttel","mcod",52)=";*"
^ZWCmcd("TOIpat-ttel","mcod",53)="ttel(W)  I $G(W)="""" D bug^dv Q ""?"""
^ZWCmcd("TOIpat-ttel","mcod",54)="     S Tn=$TR(W,""()- "","""") I Tn?10n S tel=Tn,toity=""tel"" D EWD Q """""
^ZWCmcd("TOIpat-ttel","mcod",55)="       I Tn?7N S Tn=713_Tn,tel=Tn,Q="""",toity=""tel"" D EWD Q """""
^ZWCmcd("TOIpat-ttel","mcod",56)="     Q Q"
^ZWCmcd("TOIpat-turl","mcod",41)=";*  [""/""  ? url"
^ZWCmcd("TOIpat-turl","mcod",42)="turl(w)  ;"
^ZWCmcd("TOIpat-turl","mcod",43)="     S uty="""" S LUser=""kw"",kwSys=""km3a"",kwMpj=""KAC"",kwPdir=""fin3"""
^ZWCmcd("TOIpat-turl","mcod",44)="     I $G(w)="""" D bug^dv Q"
^ZWCmcd("TOIpat-turl","mcod",45)="     S url=w"
^ZWCmcd("TOIpat-turl","mcod",46)="     S nsl=$L(w,""/""),ndt=$L(w,""."")"
^ZWCmcd("TOIpat-turl","mcod",47)="     S C=$E(w) S:C=""/"" uty=""F"" S:C=""~"" uty=""rHm"",url=""/home/""_LUser_""/""_w"
^ZWCmcd("TOIpat-turl","mcod",48)="     I C=""."" S uty=""rU"""
^ZWCmcd("TOIpat-turl","mcod",49)="     ; : uty, url"
^ZWCmcd("TOIpat-turl","mcod",50)="     Q"
^ZWCmcd("TOIpat-turl","mcod",51)="     "
^ZWCmcd("TOIpd","mcod",1)="TOIpd  ;CKW/ESC i24mar23 rTOI7/ ;20230324-75;Debug Display TOIp results"
^ZWCmcd("TOIpd","mcod",2)=";"
^ZWCmcd("TOIpd","mcod",3)=";  See ^TOIpvn"
^ZWCmcd("TOIpd","mcod",4)=";"
^ZWCmcd("TOIpd","mcod",5)=";  L~Tin,  wki~i words WD,wd, wd2"
^ZWCmcd("TOIpd","mcod",6)=";"
^ZWCmcd("TOIpd-WW","mcod",11)=";*"
^ZWCmcd("TOIpd-WW","mcod",12)="WW    D itb S FL=""wi,WD(wi),Wdlc(wi),Wpnd(wi),Wty(wi),Wr(wi),Wvn(wi),Wtr(wi)"""
^ZWCmcd("TOIpd-WW","mcod",13)="      W:$X ! F wi=1:1:$L(FL,"",""),98,99 S vn=$P(FL,"","",wi) W ?tb(wi),vn,"" "" ;Header"
^ZWCmcd("TOIpd-WW","mcod",14)="      W:$X !"
^ZWCmcd("TOIpd-WW","mcod",15)="      F wi=1:1:nsp DO  ;"
^ZWCmcd("TOIpd-WW","mcod",16)="       .F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) DO  ;"
^ZWCmcd("TOIpd-WW","mcod",17)="         ..S v=$G(@vn) S:v="""" v=""X"" S:$D(@vn)=0 v=""U"""
^ZWCmcd("TOIpd-WW","mcod",18)="         ..W ?tb(vi),v,"" """
^ZWCmcd("TOIpd-WW","mcod",19)="      .W !"
^ZWCmcd("TOIpd-WW","mcod",20)="      Q        "
^ZWCmcd("TOIpd-itb","mcod",21)=";*"
^ZWCmcd("TOIpd-itb","mcod",22)="itb   KILL tb NEW wl,i "
^ZWCmcd("TOIpd-itb","mcod",23)="      S tb=5,wl=""5,10,10,10,15,15,8,10"""
^ZWCmcd("TOIpd-itb","mcod",24)="      F i=1:1:$L(wl,"","") S tb(i)=tb,tb=tb+$P(wl,"","",i)"
^ZWCmcd("TOIpd-itb","mcod",25)="      S tb(98)=tb,tb=tb+10"
^ZWCmcd("TOIpd-itb","mcod",26)="      S tb(99)=tb"
^ZWCmcd("TOIpd-itb","mcod",27)="      Q"
^ZWCmcd("TOIpd-itb","mcod",28)=";*      "
^ZWCmcd("TOIpd-itb","mcod",29)="      "
^ZWCmcd("TOIpd-top","mcod",7)="top   NEW tb,FL,i,vn,v"
^ZWCmcd("TOIpd-top","mcod",8)="      USE $P W:$X ! W $G(TOIsyn),!,$G(Tin),!!"
^ZWCmcd("TOIpd-top","mcod",9)="      D WW"
^ZWCmcd("TOIpd-top","mcod",10)="      Q"
^ZWCmcd("TOIpvn","mcod",1)="TOIpvn ;CKW/ESC i22mar23 gmsa./ rTOI7/ ;20230322-98; Vty, vde for TOI Vars"
^ZWCmcd("TOIpvn","mcod",2)=";"
^ZWCmcd("TOIpvn","mcod",3)=";"
^ZWCmcd("TOIpvn","mcod",4)=";"
^ZWCmcd("TOIpvn-top","mcod",5)="top    D ^kacIMG"
^ZWCmcd("TOIpvn-top","mcod",6)="       Q"
^ZWCmcd("TOIpvn-top","mcod",7)=";*"
^ZWCmcd("TOIpvn-top","mcod",8)=";;toiFL xxFL Simple vars in ^TG(tsid) compiled from TOI TFL Syntax"
^ZWCmcd("TOIpvn-top","mcod",9)=";;"
^ZWCmcd("TOIpvn-top","mcod",10)=";;tsid  identifies a TOI line type/Syntax  by ^TOIa Assemble, used by ^TOIp, ^TOId"
^ZWCmcd("TOIpvn-top","mcod",11)=";;"
^ZWCmcd("TOIpvn-top","mcod",12)=";;sTFL cdl-vnSyntax Syntax for TOI vn List   vn with pfx or sfx punct, /vnty"
^ZWCmcd("TOIpvn-top","mcod",13)=";;~TFL cdl-vn simple vars comma-delimited list"
^ZWCmcd("TOIpvn-top","mcod",14)=";;vki int piece num for var in TFL"
^ZWCmcd("TOIpvn-top","mcod",15)=";;vn vn is the simple field name in piece vki, MGbl subscr and @vn is local var"
^ZWCmcd("TOIpvn-top","mcod",16)=";;vnty vc is the general type to be matched to var vn {de,d12,d8,num,int,dol,nafl,nalf, ema,tel...}"
^ZWCmcd("TOIpvn-top","mcod",17)=";;wki int is word number in Tin/T/L  input string to parse into fields, after $DSP"
^ZWCmcd("TOIpvn-top","mcod",18)=";;Wpnd(wki) Init =1 ea wki, killed when Used and assigned to vnty and maybe vn"
^ZWCmcd("TOIpvn-top","mcod",19)=";;WD(wki) str is cased val ue of word wki"
^ZWCmcd("TOIpvn-top","mcod",20)=";;Wlc(wki) slc is $$LC(WD)  lower case word"
^ZWCmcd("TOIpvn-top","mcod",21)=";;Wr(wki) tvn is result value from word wki, eg d8 ?8n, ..."
^ZWCmcd("TOIpvn-top","mcod",22)=";;Wty(wki) vc {de,num,dol,d12,d8, } is vnty pattern id"
^ZWCmcd("TOIpvn-top","mcod",23)=";;Wvn(wki) vn field name assigned from this word"
^ZWCmcd("TOIpvn-top","mcod",24)=";;Wtr(wki) str is trace of processes, Ltr"
^ZWCmcd("TOIpvn-top","mcod",25)=";;"
^ZWCmcd("TOIs","mcod",1)="TOIs ;CKW/ESC  i27Jan15  ; 20181005-99 ; Std S/R "
^ZWCmcd("TOIs","mcod",2)="  ; in gmsa/  rTOI7/   cp ^dvs 23sep19  to remove dependency of TOI"
^ZWCmcd("TOIs","mcod",3)=";"
^ZWCmcd("TOIs","mcod",4)=";RefBy:  Many to ^dv still, "
^ZWCmcd("TOIs","mcod",5)="  ;  No special mods init 23sep19"
^ZWCmcd("TOIs","mcod",6)="  ;"
^ZWCmcd("TOIs","mcod",7)="  ; Read File to Array Call RF by Ref (devr)  or ^kas(devr) -> RF()"
^ZWCmcd("TOIs","mcod",8)=";RefBy: ^fr4TI1      mod $$ Err result  23sep19"
^ZWCmcd("TOIs-CF","mcod",45)=";*"
^ZWCmcd("TOIs-CF","mcod",46)="CF(devx) USE $P CLOSE devx"
^ZWCmcd("TOIs-CF","mcod",47)="         Q"
^ZWCmcd("TOIs-CFW","mcod",48)="CFW(devw)  USE $P CLOSE devw"
^ZWCmcd("TOIs-CFW","mcod",49)="     W:$X ! W ""Completed writing "",devw,!"
^ZWCmcd("TOIs-CFW","mcod",50)="     Q "
^ZWCmcd("TOIs-CFW","mcod",51)="  ;"
^ZWCmcd("TOIs-DSP","mcod",98)="  ;*  Formatting  TOI"
^ZWCmcd("TOIs-DSP","mcod",99)="  ;"
^ZWCmcd("TOIs-DSP","mcod",100)=" ;Replace all dbl spaces (or more) with single, and remove starting/ending"
^ZWCmcd("TOIs-DSP","mcod",101)="DSP(X) NEW i F i=0:1 Q:X'[""  ""  S X=$P(X,""  "")_"" ""_$P(X,""  "",2,9999)"
^ZWCmcd("TOIs-DSP","mcod",102)=" Q $$TSP(X)"
^ZWCmcd("TOIs-DSP","mcod",103)=" ; Remove start and end spaces (only)"
^ZWCmcd("TOIs-ER","mcod",124)="  ;*"
^ZWCmcd("TOIs-ER","mcod",125)="ER(M) NEW d S d=$I USE 0 W:$X ! W ""ER ^"",$T(+0),""- "",$G(M),! USE d Q"
^ZWCmcd("TOIs-ER","mcod",126)=" Q  ;* safety"
^ZWCmcd("TOIs-ERD","mcod",20)="ERD  CLOSE devr I $G(devrU0)'="""" USE devrU0 KILL devrU0"
^ZWCmcd("TOIs-ERD","mcod",21)="  E  USE 0"
^ZWCmcd("TOIs-ERD","mcod",22)="  Q """""
^ZWCmcd("TOIs-ERO","mcod",23)="ERO  W !!,""Error opening "",devr,! d b^dv(""Open to Read"",""devr"") "
^ZWCmcd("TOIs-ERO","mcod",24)="  Q ""Err Open"""
^ZWCmcd("TOIs-EWO","mcod",35)="  ;*"
^ZWCmcd("TOIs-EWO","mcod",36)="EWO USE 0 D b^dv(""Open File (EWO/OFW) Err"",""devw"")  "
^ZWCmcd("TOIs-EWO","mcod",37)="  CLOSE devw USE $P"
^ZWCmcd("TOIs-EWO","mcod",38)="  Q:$Q ""1-Err Opening File""  ;"
^ZWCmcd("TOIs-EWO","mcod",39)="  Q"
^ZWCmcd("TOIs-EWO","mcod",40)=""
^ZWCmcd("TOIs-EWW","mcod",41)="EWW   S D=$I USE $P D ^dvsch,b^dv(""USE Err, writing to File"",""devw"")"
^ZWCmcd("TOIs-EWW","mcod",42)="  CLOSE devw USE $P"
^ZWCmcd("TOIs-EWW","mcod",43)="  Q:$Q ""2-Err during write?"""
^ZWCmcd("TOIs-EWW","mcod",44)="  Q"
^ZWCmcd("TOIs-GFL","mcod",86)="GFL(SFL,G2)  I $G(SFL)="""" d b^db(""GFL null 1st arg"",""SFL,G2"")  Q"
^ZWCmcd("TOIs-GFL","mcod",87)="  NEW G,FL,vi,vn"
^ZWCmcd("TOIs-GFL","mcod",88)="  I $G(G2)'="""" S:G2[""_"" G2=$P(G2,""_"",2)"
^ZWCmcd("TOIs-GFL","mcod",89)="  S G=$P(SFL,""_"",2),FL=$P(SFL,""_"") I G="""" S G=G2 I G="""" D errFL(""No MGbl Given"")  Q"
^ZWCmcd("TOIs-GFL","mcod",90)="  I FL="""" B  Q"
^ZWCmcd("TOIs-GFL","mcod",91)="  F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) I vn'="""" S @vn=$G(@G@(vn))"
^ZWCmcd("TOIs-GFL","mcod",92)="  Q"
^ZWCmcd("TOIs-GFL","mcod",93)=";eg.  D GFL(""lnfun"",LineFL)  ; uses _2 of LineFL but list lnfun only"
^ZWCmcd("TOIs-LC","mcod",118)="  ;*  Case & Canonic"
^ZWCmcd("TOIs-LC","mcod",119)="LC(X) Q $TR(X,""ABCDEFGHIJKLMNOPQRSTUVWXYZ"",""abcdefghijklmnopqrstuvwxyz"")"
^ZWCmcd("TOIs-LTDSPtb","mcod",109)=";*$$ Actually DSP already does both calls TSP in 2nd line "
^ZWCmcd("TOIs-LTDSPtb","mcod",110)="LTDSPtb(X) NEW i "
^ZWCmcd("TOIs-LTDSPtb","mcod",111)="        S X=$TR(X,$C(9)_$C(10)_$C(13),""   "")  ;replace tab,lf,cr with space"
^ZWCmcd("TOIs-LTDSPtb","mcod",112)="        F i=0:1 Q:X'[""  ""  S X=$P(X,""  "")_"" ""_$P(X,""  "",2,9999)"
^ZWCmcd("TOIs-LTDSPtb","mcod",113)=" ; Remove start and end spaces (only)"
^ZWCmcd("TOIs-LTDSPtb","mcod",114)=" I $E($G(X))="" "" F i=1:1:$L(X) I $E(X,i)'="" "" S X=$E(X,i,999) Q"
^ZWCmcd("TOIs-LTDSPtb","mcod",115)=" I $E(X,$L(X))="" "" F i=$L(X):-1:1 I $E(X,i)'="" "" S X=$E(X,1,i) Q"
^ZWCmcd("TOIs-LTDSPtb","mcod",116)=" I X="" "" S X=""""  ; Funny case all spaces  vs end i=0 second line ?"
^ZWCmcd("TOIs-LTDSPtb","mcod",117)=" Q X "
^ZWCmcd("TOIs-NFL","mcod",52)="  ;* Set local fields/@vars -  @SFL null - Initialize"
^ZWCmcd("TOIs-NFL","mcod",53)="NFL(SFL,L2) I $G(SFL)="""" D b^dv(""NFL 1st FL null"",""SFL,L2"") Q"
^ZWCmcd("TOIs-NFL","mcod",54)="  NEW G,FL,%vi,%vn"
^ZWCmcd("TOIs-NFL","mcod",55)="  I $G(L2)'="""" S G=$P(L2,""_"",2),FL=$P(SFL,""_"",1)"
^ZWCmcd("TOIs-NFL","mcod",56)="  E  S G=$P(SFL,""_"",2),FL=$P(SFL,""_"") ;I G="""" D b^dv(""Net G null"",""FL,G,SFL,L2"")  Q"
^ZWCmcd("TOIs-NFL","mcod",57)="  I FL="""" D b^dv(""Net FL null"",""FL,G,SFL,L2"")  Q"
^ZWCmcd("TOIs-NFL","mcod",58)="  F %vi=1:1:$L(FL,"","") S %vn=$P(FL,"","",%vi) I %vn'="""" S @(%vn)="""""
^ZWCmcd("TOIs-NFL","mcod",59)="  Q"
^ZWCmcd("TOIs-NFL","mcod",60)=";Save loc vars to MGbl via Super-FL-list"
^ZWCmcd("TOIs-OFW","mcod",28)="  ;*  Full FilePath   or simple name -> gtm start, ie p/   eg. km7r/ KA1/ p/"
^ZWCmcd("TOIs-OFW","mcod",29)="  ;* Chg to $$OFW  ret null ok, 1 Open Err, 2 Write err  kw 20feb18 (Lost my head)"
^ZWCmcd("TOIs-OFW","mcod",30)="OFW(devw)  I $G(devw)="""" D b^dv(""devw undef"",""devw,Fil,Fol,FBase"")  Q"
^ZWCmcd("TOIs-OFW","mcod",31)="    CLOSE devw  ; debug"
^ZWCmcd("TOIs-OFW","mcod",32)="  OPEN devw:(newversion:exception=""G EWO"")"
^ZWCmcd("TOIs-OFW","mcod",33)="  USE devw:(exception=""D EWW^""_$T(+0))"
^ZWCmcd("TOIs-OFW","mcod",34)="  Q:$Q """" Q  ;Hopefully compatible if no error !"
^ZWCmcd("TOIs-RDF","mcod",9)=";*$$  "
^ZWCmcd("TOIs-RDF","mcod",10)="RDF(devr)   NEW ri,X   ; : RF()"
^ZWCmcd("TOIs-RDF","mcod",11)="  I $D(RF)  D b^dv(""RF() is not empty. I will Kill it:"",""devr"")  KILL RF "
^ZWCmcd("TOIs-RDF","mcod",12)="  S RF=0,devrU0=$I"
^ZWCmcd("TOIs-RDF","mcod",13)="  CLOSE devr ;debug"
^ZWCmcd("TOIs-RDF","mcod",14)="  OPEN devr:(readonly:exception=""G ERO"") USE devr:exception=""G ERD"""
^ZWCmcd("TOIs-RDF","mcod",15)="  F ri=1:1 USE devr R X USE 0  DO:X[$C(13) X13  D:X[$C(9) X9 S RF(ri)=X,RF=ri"
^ZWCmcd("TOIs-RDF","mcod",16)="  CLOSE devr U $P"
^ZWCmcd("TOIs-RDF","mcod",17)="  I devrU0="""" Q """""
^ZWCmcd("TOIs-RDF","mcod",18)="  USE devrU0"
^ZWCmcd("TOIs-RDF","mcod",19)="  Q """""
^ZWCmcd("TOIs-SFL","mcod",61)="SFL(SFL,L2)  I $G(SFL)="""" D bug^dv  Q"
^ZWCmcd("TOIs-SFL","mcod",62)="  NEW:1 RSZ,A,Rc,TRc,R2c,TR2c,R,FLn,L2n,G,FL,%vi,%vn,%val,%old"
^ZWCmcd("TOIs-SFL","mcod",63)="  I $G(L2)="""" S L2=$P(SFL,""_"",2)  ; sic L@ bad choice vs L, L0, L2"
^ZWCmcd("TOIs-SFL","mcod",64)="  E  S L2=$P(L2,""_"",2)  ;uses arg2 for _2 MGbl Ref"
^ZWCmcd("TOIs-SFL","mcod",65)="  zsh :A DO  ;"
^ZWCmcd("TOIs-SFL","mcod",66)="    .MERGE RSZ=A(""S"")  ;remove first subscr ""S"""
^ZWCmcd("TOIs-SFL","mcod",67)="    .I $G(RSZ(1))'[""SFL"" B"
^ZWCmcd("TOIs-SFL","mcod",68)="    .S Rc=$G(RSZ(2))"
^ZWCmcd("TOIs-SFL","mcod",69)="    .S TRc="""" I Rc[""^"" S TRc=$T(@Rc)"
^ZWCmcd("TOIs-SFL","mcod",70)="    .S R2c="""",TR2c="""" I Rc[""FL"" S R2c=$G(RSZ(3))"
^ZWCmcd("TOIs-SFL","mcod",71)="    .  I R2c[""^"" S R=Rc,Rc=R2c,R2c=R,RcTR2c=TRc,TRc=$T(@Rc)"
^ZWCmcd("TOIs-SFL","mcod",72)="    .S FLn=$P(TRc,""FL("",2),FLn=$P(FLn,"")""),L2n=$P(FLn,"","",2),FLn=$P(FLn,"","")"
^ZWCmcd("TOIs-SFL","mcod",73)="    .;D ^dv(""SFL Log:"",""Rc,TRc,R2c,TR2c,FLn,L2n,SFL,L2"") B"
^ZWCmcd("TOIs-SFL","mcod",74)="    .I FLn'="""",Rc'="""" S RLL(FLn,Rc)=TRc  ; first crack"
^ZWCmcd("TOIs-SFL","mcod",75)="  S G=L2,FL=$P(SFL,""_"") I G="""" D b^dv(""Bug No _2 G"",""G,FL,SFL,L2"")  Q"
^ZWCmcd("TOIs-SFL","mcod",76)="  I FL="""" D b^dv(""Bug No _1 FL"",""G,FL,SFL,L2"")  Q"
^ZWCmcd("TOIs-SFL","mcod",77)="  F %vi=1:1:$L(FL,"","") S %vn=$P(FL,"","",%vi) DO  ;"
^ZWCmcd("TOIs-SFL","mcod",78)="    .I %vn="""" Q  ; ignore and go on..."
^ZWCmcd("TOIs-SFL","mcod",79)="    .S %val=$G(@%vn) I %val'="""" S @G@(%vn)=%val Q"
^ZWCmcd("TOIs-SFL","mcod",80)="    .I $D(@%vn)#2=0 D errFL(""Undef Var ""_%vn) Q  ; Var %vn is UNDEF Usu not, NFL^dvs ?"
^ZWCmcd("TOIs-SFL","mcod",81)="    .S %old=$G(@G@(%vn)) I %old'="""" KILL @G@(%vn)  ; Kill prior value ?"
^ZWCmcd("TOIs-TSP","mcod",104)="TSP(X) NEW i S X=$TR(X,$C(9)_$C(10)_$C(13),""   "")  ;replace tab,lf,cr with space"
^ZWCmcd("TOIs-TSP","mcod",105)=" I $E($G(X))="" "" F i=1:1:$L(X) I $E(X,i)'="" "" S X=$E(X,i,999) Q"
^ZWCmcd("TOIs-TSP","mcod",106)=" I $E(X,$L(X))="" "" F i=$L(X):-1:1 I $E(X,i)'="" "" S X=$E(X,1,i) Q"
^ZWCmcd("TOIs-TSP","mcod",107)=" I X="" "" S X=""""  ; Funny case all spaces  vs end i=0 second line ?"
^ZWCmcd("TOIs-TSP","mcod",108)=" Q X"
^ZWCmcd("TOIs-UC","mcod",120)="UC(X) Q $TR(X,""abcdefghijklmnopqrstuvwxyz"",""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")"
^ZWCmcd("TOIs-UC1","mcod",121)="UC1(X) Q $$UC($E(X))_$$LC($E(X,2,9999))   ; Cap 1st, rest LC"
^ZWCmcd("TOIs-UC1","mcod",122)="  ;"
^ZWCmcd("TOIs-X13","mcod",25)=";*  "
^ZWCmcd("TOIs-X13","mcod",26)="X13 S X=$TR(X,$C(13)_$C(10),"""") Q"
^ZWCmcd("TOIs-X9","mcod",27)="X9 S X=$TR(X,$C(9),"" "") Q"
^ZWCmcd("TOIs-can","mcod",123)="can(X) Q $$LC(X)"
^ZWCmcd("TOIs-errFL","mcod",94)="  ;*"
^ZWCmcd("TOIs-errFL","mcod",95)="errFL(M) NEW D S D=$I USE 0 W:$X ! W ""*FL Error "",M,!"
^ZWCmcd("TOIs-errFL","mcod",96)="    D ^dvsch D b^dv(M,""D"")"
^ZWCmcd("TOIs-errFL","mcod",97)="    Q"
^ZWCmcd("TOIs-zqs","mcod",82)="zqs  Q  ; zb target"
^ZWCmcd("TOIs-zqs","mcod",83)=""
^ZWCmcd("TOIs-zqs","mcod",84)=";Get Loc Vars via Super-FL-List ether in $P_SFL (no G2), G2, or $P_2 of G2"
^ZWCmcd("TOIs-zqs","mcod",85)=";"
^ZWCmcd("TOIsv","mcod",1)="TOIsv ;CKW/ESC i2apr23 gmsa./ rTOI7/ ;20230402-38;End Logic Save per Wvn, Wty, tFL, VNmode"
^ZWCmcd("TOIsv","mcod",2)=";   was SV^TOIp, svlst"
^ZWCmcd("TOIsv","mcod",3)=";"
^ZWCmcd("TOIsv","mcod",4)=";   VNmode [""L"" -> @vn, [""A"" -> VN(vn), [""G"" -> @G@(vn)  MGbl"
^ZWCmcd("TOIsv","mcod",5)=";   *TFL, tFL vn list only"
^ZWCmcd("TOIsv","mcod",6)=";   Wr(wki), Wty(wki), Wvn(wki)"
^ZWCmcd("TOIsv","mcod",7)=";"
^ZWCmcd("TOIsv-SV","mcod",11)=";*"
^ZWCmcd("TOIsv-SV","mcod",12)=";* VNmode, $O-Wvn(), WDm/WD()  Save Ret Vars"
^ZWCmcd("TOIsv-SV","mcod",13)="SV   NEW G  ;,Wval,wki,vki,vqi"
^ZWCmcd("TOIsv-SV","mcod",14)="     ;Wty(wki) -> Xtyw(vnty,wki)="""""
^ZWCmcd("TOIsv-SV","mcod",15)="     F vi=1:1:$L(tFL,"","") S vn=$P(tFL,"","",vi) DO  ;"
^ZWCmcd("TOIsv-SV","mcod",16)="       .I vn="""" D bug^dv Q"
^ZWCmcd("TOIsv-SV","mcod",17)="       .S wki=$G(Xvn(vn))"
^ZWCmcd("TOIsv-SV","mcod",18)="       .I wki D Swki(wki,vn)"
^ZWCmcd("TOIsv-SV","mcod",19)="       .D b^dv(""Log SV lp1 none Xvn"",""wki,vn,vi"")"
^ZWCmcd("TOIsv-SV","mcod",20)="     ; wki 1:1:nsp  - only if Wvn, then ""dts"" etc"
^ZWCmcd("TOIsv-SV","mcod",21)="     S vlft="""",wki=0 F wn=0:1 S wki=$O(Wpnd(wki)) Q:wki=""""  DO  ;"
^ZWCmcd("TOIsv-SV","mcod",22)="       .S wr=$G(Wr(wki)) I wr="""" D b^dv(""Log Wpnd null Wr"",""wr,wki,WD(wki)"")"
^ZWCmcd("TOIsv-SV","mcod",23)="       .S:vlft'="""" vlft=vlft_"", "" S vlft=vlft_wr,lfwki=wki"
^ZWCmcd("TOIsv-SV","mcod",24)="      I wn,vlft'="""" S vnlft=$G(Xty(""lft"")) I vnlft="""" D b^dv(""Err leftover, no vn-lft"",""wki,vnlft,vlft,ri"")"
^ZWCmcd("TOIsv-SV","mcod",25)="      I vnlft'="""" D Swki(wki,vnlft)"
^ZWCmcd("TOIsv-SV","mcod",26)="      "
^ZWCmcd("TOIsv-SV","mcod",27)="     S wki="""" F wn=0:1 S wki=$O(Wvn(wki)) Q:wki=""""  DO  ;"
^ZWCmcd("TOIsv-SV","mcod",28)="       .D b^dv(""Log SV lp3"",""wki,vn"")"
^ZWCmcd("TOIsv-SV","mcod",29)="       .D Swki(wki,vn)"
^ZWCmcd("TOIsv-SV","mcod",30)="     Q"
^ZWCmcd("TOIsv-Swki","mcod",31)=";* VNmode, wki : Wval -> @vv etc"
^ZWCmcd("TOIsv-Swki","mcod",32)="Swki(wki,vn)   S Wr=$G(Wr(wki)) I Wr="""" S WD=$G(WD(wki)) D b^dv(""Err no Wr"",""wki,Wr,WD"") S Wr=WD"
^ZWCmcd("TOIsv-Swki","mcod",33)="       I $G(vn)="""" D bug^dv Q"
^ZWCmcd("TOIsv-Swki","mcod",34)="       I VNmode[""L"" S @vn=Wval"
^ZWCmcd("TOIsv-Swki","mcod",35)="       I VNmode[""A"" S VN(vn)=Wval"
^ZWCmcd("TOIsv-Swki","mcod",36)="       I VNmode[""G"" S G=$P(sTFL,""_"",2) I G'="""" S @G@(vn)=Wval"
^ZWCmcd("TOIsv-Swki","mcod",37)="       ;D b^dv(""Log Save wki"",""vqi,wki,Wval,vn,VNmode"")"
^ZWCmcd("TOIsv-Swki","mcod",38)="       Q"
^ZWCmcd("TOIsv-Swki","mcod",39)=""
^ZWCmcd("TOIsv-sqWD","mcod",40)=";*"
^ZWCmcd("TOIsv-sqWD","mcod",41)="     ; Now set in order, and then rest to the llast var, num nTVN eg cede"
^ZWCmcd("TOIsv-sqWD","mcod",42)=";* vqlst, nsp : @vqlst"
^ZWCmcd("TOIsv-sqWD","mcod",43)="sqWD I vqlst="""" D b^dv(""Err last vqlst"",""tsidT"") Q"
^ZWCmcd("TOIsv-sqWD","mcod",44)="     S n=$L(vqlst,"",""),vnlast=$P(vqlst,"","",n),vqlist=$P(vqlst,"","",1,n-1)"
^ZWCmcd("TOIsv-sqWD","mcod",45)="       DO  ;"
^ZWCmcd("TOIsv-sqWD","mcod",46)="         .USE $P D WTOIp^TOIw"
^ZWCmcd("TOIsv-sqWD","mcod",47)="         .;D b^dv(""debug init vqlst"",""vqlst,vqlist,vnlast"")"
^ZWCmcd("TOIsv-sqWD","mcod",48)="     I vqlist'="""" D vqlist"
^ZWCmcd("TOIsv-sqWD","mcod",49)="     I vnlast'="""" D vnlast"
^ZWCmcd("TOIsv-sqWD","mcod",50)="     USE $P D WTOIp^TOIw  "
^ZWCmcd("TOIsv-sqWD","mcod",51)="       ;D b^dv(""Pause post Last "",""wlki,vn,Wlst,vqlst"")"
^ZWCmcd("TOIsv-sqWD","mcod",52)="     Q"
^ZWCmcd("TOIsv-top","mcod",8)="top   ;"
^ZWCmcd("TOIsv-top","mcod",9)="      D SV"
^ZWCmcd("TOIsv-top","mcod",10)="      Q"
^ZWCmcd("TOIsv-vnlast","mcod",60)=";*"
^ZWCmcd("TOIsv-vnlast","mcod",61)="vnlast  S Wlst="""",vn=vnlast"
^ZWCmcd("TOIsv-vnlast","mcod",62)="       ;USE $P D WTOIp^TOIw  "
^ZWCmcd("TOIsv-vnlast","mcod",63)="       ;D b^dv(""Pause Mid "",""vni,vn,Wlst,vqlst"")"
^ZWCmcd("TOIsv-vnlast","mcod",64)="       S wki=0 F wn=0:1 S wki=$O(Wpnd(wki)) Q:wki=""""  DO  ; The rest of WD's into last vni, eg *de"
^ZWCmcd("TOIsv-vnlast","mcod",65)="         .S Wval=WD(wki) S:Wlst'="""" Wlst=Wlst_"" "" S Wlst=Wlst_Wval"
^ZWCmcd("TOIsv-vnlast","mcod",66)="         .S Wty(wki)=""lastvq"""
^ZWCmcd("TOIsv-vnlast","mcod",67)="         .S wlki=wki"
^ZWCmcd("TOIsv-vnlast","mcod",68)="         .;D ^dv(""Log vnlast "",""wki,wlki,vn,Wval,vqlst"")"
^ZWCmcd("TOIsv-vnlast","mcod",69)="       I Wlst="""" D ^deverr(""debug No Wlst"",""Wlst,vnlast,wlki"") Q "
^ZWCmcd("TOIsv-vnlast","mcod",70)="          S tv=$G(Wvn(wlki)) I tv'="""" D b^dv(""debug wlki vn"",""tv,vn,wlki,wki"")"
^ZWCmcd("TOIsv-vnlast","mcod",71)="       S Wvn(wlki)=vn,WDm(wlki)=Wlst"
^ZWCmcd("TOIsv-vnlast","mcod",72)="       Q"
^ZWCmcd("TOIsv-vqlist","mcod",53)=";*"
^ZWCmcd("TOIsv-vqlist","mcod",54)="vqlist  F vni=1:1:($L(vqlist,"","")) S vn=$P(vqlist,"","",vni) DO  "
^ZWCmcd("TOIsv-vqlist","mcod",55)="          .F wki=1:1:nsp I $D(Wpnd(wki)) DO  Q  ;Only one wki per vni/vn, first unused"
^ZWCmcd("TOIsv-vqlist","mcod",56)="             ..S Wval=WD(wki)"
^ZWCmcd("TOIsv-vqlist","mcod",57)="             ..S Wvn(wki)=vn,Wtr(wki)=""vq""_vni"
^ZWCmcd("TOIsv-vqlist","mcod",58)="             ..D ^dv(""Log sqWD1 "",""wki,vn,Wval,vqlist"")"
^ZWCmcd("TOIsv-vqlist","mcod",59)="        Q"
^ZWCmcd("TOIta","mcod",1)="TOIta   ;CKW/ESC   i11aug18  ; 20180811-93 ; Automated ^TOI Module Testing"
^ZWCmcd("TOIta","mcod",2)="  ;  in gmsa/  rTOI7/      8aug19    "
^ZWCmcd("TOIta","mcod",3)="  ; cp from gmsa/  rTOI3ucal/ "
^ZWCmcd("TOIta","mcod",4)="  ;"
^ZWCmcd("TOIta","mcod",5)="  ; ^TOIp  from Top"
^ZWCmcd("TOIta-A","mcod",6)="A   S vin="""",voutVL=""WD(),@cevFL"""
^ZWCmcd("TOIta-A","mcod",7)="    Q"
^ZWCmcd("TOIta-A","mcod",8)=";*"
^ZWCmcd("TOIta-A","mcod",9)=";*"
^ZWCmcd("TOIta-A","mcod",10)=";*"
^ZWCmcd("TOIta-A","mcod",11)=""
^ZWCmcd("TOIta-EWD","mcod",12)=";*"
^ZWCmcd("TOIta-EWD","mcod",13)="  ;   $$ returns null if ok, 1 or msg if not"
^ZWCmcd("TOIta-EWD","mcod",14)="EWD   "
^ZWCmcd("TOItes","mcod",1)="TOItes  ;CKW/ESC  i16feb18 ; 20180215-56 ; TOI Tests - Std  /*/ lines"
^ZWCmcd("TOItes","mcod",2)="  ;"
^ZWCmcd("TOItes","mcod",3)="  ; RefBy:  uCal Menu ttoi."
^ZWCmcd("TOItes-A","mcod",6)=";*    * * * * * * *"
^ZWCmcd("TOItes-A","mcod",7)=";  In context, totally data driven, expected values"
^ZWCmcd("TOItes-A","mcod",8)=";  Line Syntax /*/  start"
^ZWCmcd("TOItes-A","mcod",9)=";  vn=val   opt quotes for embedded spaces"
^ZWCmcd("TOItes-A","mcod",10)=";"
^ZWCmcd("TOItes-A","mcod",11)=";*   L2  dsp/lc,  L0, ri, rFil"
^ZWCmcd("TOItes-A","mcod",12)="A    I $G(L2)="""" D bug^dv Q"
^ZWCmcd("TOItes-A","mcod",13)="     I $E(L2,1,3)'=""/*/"" D b^dv(""Expected caller to find /*/ starting L2"",""L2,ri,rFil"") Q"
^ZWCmcd("TOItes-A","mcod",14)="     S L3=$E(L2,4,999)  KILL TD"
^ZWCmcd("TOItes-A","mcod",15)="     MERGE TD=^QD(lid)"
^ZWCmcd("TOItes-A","mcod",16)="     F wi=1:1:$L(L3,"" "") S wd=$P(L3,"" "",wi) DO"
^ZWCmcd("TOItes-A","mcod",17)="       .S vn=$P(wd,""=""),val=$P(wd,""="",2)"
^ZWCmcd("TOItes-A","mcod",18)="       .I val="""" Q"
^ZWCmcd("TOItes-A","mcod",19)="       .I vn'?1L.6LN D b^dv(""vn=val fmt ?"",""vn,val,L3"") Q"
^ZWCmcd("TOItes-A","mcod",20)="       .    ;S EV(vn)=val"
^ZWCmcd("TOItes-A","mcod",21)="       .S toiv=$G(TD(vn))"
^ZWCmcd("TOItes-AT","mcod",22)="AT     .I toiv'=val D ERR"
^ZWCmcd("TOItes-AT","mcod",23)="       .; I toiv=val D b^dv(""Log TOItes "",""vn,val,toiv,ri,rFil"")"
^ZWCmcd("TOItes-AT","mcod",24)="     Q"
^ZWCmcd("TOItes-ERR","mcod",25)=";*"
^ZWCmcd("TOItes-ERR","mcod",26)="ERR   D b^dv(""Err exp val vs toiv-"",""vn,val,toiv,L0,ri,rFil"")"
^ZWCmcd("TOItes-ERR","mcod",27)="      Q"
^ZWCmcd("TOItes-TAcq","mcod",4)="TAcq   D TtoiB^cqMa"
^ZWCmcd("TOItes-TAcq","mcod",5)="     Q"
^ZWCmcd("TOIw","mcod",1)="TOIw  ;CKW/ESC  i3oct19 ; 20191013-04 ; Display Parse Arrays"
^ZWCmcd("TOIw","mcod",2)="  ; in gmsa/  rTOI7/     new in v7"
^ZWCmcd("TOIw","mcod",3)=";"
^ZWCmcd("TOIw","mcod",4)=";$I by caller, <pre> if HGen"
^ZWCmcd("TOIw","mcod",5)=";   TIn,T2,L2,   Ins, nsp, nvi   wi, Wu, WD, Wd, WDm, Wvq, Wvn, Wtr"
^ZWCmcd("TOIw","mcod",6)=";"
^ZWCmcd("TOIw","mcod",7)=";Arrays  (wi) each"
^ZWCmcd("TOIw","mcod",8)=";   Wpnd"
^ZWCmcd("TOIw","mcod",9)=";   WD raw word"
^ZWCmcd("TOIw","mcod",10)=";   Wd  $$lc   ?ctrl/tab clean/sub ?"
^ZWCmcd("TOIw","mcod",11)=";   Wr Modified val Result"
^ZWCmcd("TOIw","mcod",12)=";   Wvn  var name destination"
^ZWCmcd("TOIw","mcod",13)=";   Wtr  Trace logic"
^ZWCmcd("TOIw","mcod",14)="; Also: Wind, nsp, nvi"
^ZWCmcd("TOIw-A","mcod",15)="A   D WTOIa"
^ZWCmcd("TOIw-A","mcod",16)="    D WTOIp"
^ZWCmcd("TOIw-A","mcod",17)="    D WFL"
^ZWCmcd("TOIw-A","mcod",18)="    Q"
^ZWCmcd("TOIw-WFL","mcod",85)=";*  tFL"
^ZWCmcd("TOIw-WFL","mcod",86)="WFL NEW FL,vi,vn,v,D"
^ZWCmcd("TOIw-WFL","mcod",87)="    S FL=$P(tFL,""_"") F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) DO  ;"
^ZWCmcd("TOIw-WFL","mcod",88)="      .W:$X ! W vn,""=""  "
^ZWCmcd("TOIw-WFL","mcod",89)="      .S D=$D(@vn) I D=0 W ""UNDEF."",!  ; ?vde"
^ZWCmcd("TOIw-WFL","mcod",90)="      .E  S v=$G(@vn) W ""'"",v,""' "",!"
^ZWCmcd("TOIw-WFL","mcod",91)="    Q"
^ZWCmcd("TOIw-WTOIa","mcod",19)=";*  ^TOIa Write  Compiled-Config Result  ^TG(tsid"
^ZWCmcd("TOIw-WTOIa","mcod",20)=";   sTFL list of vn/vty  with punct"
^ZWCmcd("TOIw-WTOIa","mcod",21)=";   vTFL list of vn only, vki order"
^ZWCmcd("TOIw-WTOIa","mcod",22)=";*  var tsid  or list tsidL arg  (sic)"
^ZWCmcd("TOIw-WTOIa","mcod",23)="WTOIa(tsidL)  "
^ZWCmcd("TOIw-WTOIa","mcod",24)="    NEW (tsidL,tsid)  ; Leave Everything alone, incl @vn, @toiFL, call to debug mid processes"
^ZWCmcd("TOIw-WTOIa","mcod",25)="    D ^TOIimg"
^ZWCmcd("TOIw-WTOIa","mcod",26)="    I $G(tsidL)="""" S tsidL=$G(tsid)"
^ZWCmcd("TOIw-WTOIa","mcod",27)="    F tI=1:1:$L(tsidL,"","") S tsid=$P(tsidL,"","",tI) I tsid'="""" D Wts"
^ZWCmcd("TOIw-WTOIa","mcod",28)="    Q"
^ZWCmcd("TOIw-WTOIp","mcod",48)=";*  ^TOIp results, One Line parse"
^ZWCmcd("TOIw-WTOIp","mcod",49)="WTOIp  "
^ZWCmcd("TOIw-WTOIp","mcod",50)="    NEW (tci,tI,Tin,L2,T2,tFL,sTFL,Wind,nsp,nvi,tsid,Wpnd,WD,Wd,WDm,Wvn,Wty,Wtr,Wvq)"
^ZWCmcd("TOIw-WTOIp","mcod",51)="    ;NEW tb,tbL,hdL,ti,wi,vki,vi,n"
^ZWCmcd("TOIw-WTOIp","mcod",52)="    W:$X ! W ""^TOIp One Line Results-"",!"
^ZWCmcd("TOIw-WTOIp","mcod",53)="    I $G(tci) W ""tci: "",$G(tci),""   "" W:$G(tI)'="""" "" tI:"",$G(tI) W !"
^ZWCmcd("TOIw-WTOIp","mcod",54)="    W !,""Tin:'"",$G(Tin),""'"",!"
^ZWCmcd("TOIw-WTOIp","mcod",55)="    W ""T2:'"",$G(T2),""' "",!"
^ZWCmcd("TOIw-WTOIp","mcod",56)="    W ""L2:'"",$G(L2),""' "",!"
^ZWCmcd("TOIw-WTOIp","mcod",57)="    W:$G(Wind) ""   Indt:"",$G(Wind)"
^ZWCmcd("TOIw-WTOIp","mcod",58)="    W:$G(nsp) ""   nsp:"",$G(nsp)  "
^ZWCmcd("TOIw-WTOIp","mcod",59)="    W:$G(nvi) "",  nvi:"",$G(nvi)"
^ZWCmcd("TOIw-WTOIp","mcod",60)="    W !!"
^ZWCmcd("TOIw-WTOIp","mcod",61)="    S n=$G(nsp) I 'n D b^dv(""Lost nsp ?"",""nsp,WD"") Q"
^ZWCmcd("TOIw-WTOIp","mcod",62)="    S tbL=""4,4,10,10,10,5,8,8,15"""
^ZWCmcd("TOIw-WTOIp","mcod",63)="    S hdL=""wd#,Used,WD,wd,WD',viq,vn,ty,trace"""
^ZWCmcd("TOIw-WTOIp","mcod",64)="    S tb=0 W:$X ! F ti=1:1:$L(tbL,"","") S tb=tb+$P(tbL,"","",ti) W $P(hdL,"","",ti),"" "",?tb"
^ZWCmcd("TOIw-WTOIp","mcod",65)="    S wki=0 F wn=0:1 S wki=$O(Wpnd(wki)) Q:wki=""""  D Wr1(wki)   ;"
^ZWCmcd("TOIw-WTOIp","mcod",66)="    S vki=90 F vi=0:1 S vki=$O(WD(vki)) Q:vki=""""  D Wr1(vki)"
^ZWCmcd("TOIw-WTOIp","mcod",67)="    W !"
^ZWCmcd("TOIw-WTOIp","mcod",68)="    D XREF"
^ZWCmcd("TOIw-WTOIp","mcod",69)="    I Uref'="""" W ""Unreferenced by TOIa *TFL: "",Uref,!"
^ZWCmcd("TOIw-WTOIp","mcod",70)="    I Uset'="""" W ""Un set (not found in Tin): "",Uset,!"
^ZWCmcd("TOIw-WTOIp","mcod",71)="    W !!"
^ZWCmcd("TOIw-WTOIp","mcod",72)="    Q"
^ZWCmcd("TOIw-Wr1","mcod",73)=";*  wi is 1:1:nsp then ""dts"" ..."
^ZWCmcd("TOIw-Wr1","mcod",74)="Wr1(wi)   W:$X ! S tb=0 "
^ZWCmcd("TOIw-Wr1","mcod",75)="      W wi D wt(4)"
^ZWCmcd("TOIw-Wr1","mcod",76)="      W $G(Wpnd(wi)) D wt(4)"
^ZWCmcd("TOIw-Wr1","mcod",77)="      W $G(WD(wi)) D wt(10)"
^ZWCmcd("TOIw-Wr1","mcod",78)="      W $G(Wd(wi)) D wt(10)"
^ZWCmcd("TOIw-Wr1","mcod",79)="      W $G(WDm(wi)) D wt(10)"
^ZWCmcd("TOIw-Wr1","mcod",80)="      W $G(Wvq(wi)) D wt(5)"
^ZWCmcd("TOIw-Wr1","mcod",81)="      W $G(Wvn(wi)) D wt(8)"
^ZWCmcd("TOIw-Wr1","mcod",82)="      W $G(Wty(wi)) D wt(8)"
^ZWCmcd("TOIw-Wr1","mcod",83)="      W $G(Wtr(wi)) D wt(15)  ;tot 67    "
^ZWCmcd("TOIw-Wr1","mcod",84)="    Q"
^ZWCmcd("TOIw-Wts","mcod",29)=";*   tsid, ^TG,    "
^ZWCmcd("TOIw-Wts","mcod",30)="Wts "
^ZWCmcd("TOIw-Wts0","mcod",31)=";*"
^ZWCmcd("TOIw-Wts0","mcod",32)="Wts0    D GFL^dvs(toiFL)  ; tsid, ^TG(tsid) @toiFL x10?"
^ZWCmcd("TOIw-Wts0","mcod",33)="    D T^dws(""toiFL=sTFL,tFL,VNmode,WQP,dictL,vnd12,d8vn,vqlst,Cpx,Csx,cdL,wtL,cTS,ctxde_^TG(tsid)"")"
^ZWCmcd("TOIw-Wts0","mcod",34)="    W:$X ! W !,""TOIa Compiled Config, of '"",$G(tsid),""'  - "",!"
^ZWCmcd("TOIw-Wts0","mcod",35)="    S FL=$P(toiFL,""_"") F ti=1:1:$L(FL,"","") S an=$P(FL,"","",ti) DO    ; GFL ?"
^ZWCmcd("TOIw-Wts0","mcod",36)="      .S v=$G(@an) I v="""",$D(@an)#2=0 S v=""UNDEF."""
^ZWCmcd("TOIw-Wts0","mcod",37)="      .W:$X !,an,""='"",v,""' "",!"
^ZWCmcd("TOIw-Wts0","mcod",38)="    W ""sTFL:"",sTFL,!"
^ZWCmcd("TOIw-Wts0","mcod",39)="    MERGE TG=^TG(tsid)  "
^ZWCmcd("TOIw-Wts0","mcod",40)="    W !!,""^TG(tsid)- as TG - "",!"
^ZWCmcd("TOIw-Wts0","mcod",41)="    I $D(TG) zwr TG W !"
^ZWCmcd("TOIw-Wts0","mcod",42)="    MERGE TGA=^TG(tsid)    "
^ZWCmcd("TOIw-Wts0","mcod",43)="    W !!,""^TG(tsid)- as TGA - "",!"
^ZWCmcd("TOIw-Wts0","mcod",44)="    I $D(TGA) zwr TGA W !"
^ZWCmcd("TOIw-Wts0","mcod",45)="    W:$X !"
^ZWCmcd("TOIw-Wts0","mcod",46)="    Q"
^ZWCmcd("TOIw-Wts0","mcod",47)="    "
^ZWCmcd("TOIw-XREF","mcod",92)=";*    "
^ZWCmcd("TOIw-XREF","mcod",93)="XREF  NEW VN,vn,vi,wdi  S (Uref,Uset)="""""
^ZWCmcd("TOIw-XREF","mcod",94)="    F vi=1:1:$L(tFL,"","") S vn=$P(tFL,"","",vi),VN(vn)=1"
^ZWCmcd("TOIw-XREF","mcod",95)="    S wdi="""" F wi=0:1 S wdi=$O(Wvn(wdi)) Q:wdi=""""  DO  ;"
^ZWCmcd("TOIw-XREF","mcod",96)="      .S vn=$G(Wvn(wdi))"
^ZWCmcd("TOIw-XREF","mcod",97)="      .I $G(VN(vn)) KILL VN(vn) Q"
^ZWCmcd("TOIw-XREF","mcod",98)="      .S Uref=Uref_"",""_vn"
^ZWCmcd("TOIw-XREF","mcod",99)="    S vn="""" F vi=0:1 S vn=$O(VN(vn)) Q:vn=""""  S Uset=Uset_"",""_vn"
^ZWCmcd("TOIw-XREF","mcod",100)="    S Uref=$E(Uref,2,999),Uset=$E(Uset,2,999) ; remove any leading comma"
^ZWCmcd("TOIw-XREF","mcod",101)="    Q"
^ZWCmcd("TOIw-wt","mcod",102)=";*"
^ZWCmcd("TOIw-wt","mcod",103)="wt(n) W:$X=tb ""."" W "" "" S tb=tb+n W ?tb Q  ; tricky when val was null write a dot"
^ZWCmcd("TOIw-wt","mcod",104)=";*"
^ZWCmcd("TOIzb","mcod",1)="TOIzb  ;CKW/ESC   i11aug18  ; 20180811-96  ; zb debug ^TOI*"
^ZWCmcd("TOIzb","mcod",2)="  ;        in gmsa/  rTOI3ucal/      dev site  ala ^cqzb in uCal/rsr/"
^ZWCmcd("TOIzb","mcod",3)="  ;"
^ZWCmcd("TOIzb-A","mcod",4)=";*  RefBy:  Tin^cqMA"
^ZWCmcd("TOIzb-A","mcod",5)="A     zb -*  ;Clear break entries"
^ZWCmcd("TOIzb-A","mcod",6)="        ;zb..."
^ZWCmcd("TOIzb-A","mcod",7)="      Q"
^ZWCmcd("TOIzb-A","mcod",8)=";*"
^ZWCmcd("aydb","mcod",1)="aydb  ;CKW/ESC  i31oct22 rcfg/ ;20221031-07;Start ydb mumps"
^ZWCmcd("aydb","mcod",2)=";"
^ZWCmcd("aydb","mcod",3)="; input config:  $PWD must be umep, $zro bash is primary"
^ZWCmcd("aydb","mcod",4)=";"
^ZWCmcd("aydb-top","mcod",5)="top     S $ETRAP=""B"""
^ZWCmcd("aydb-top","mcod",6)="    ; Following for relative-to-$PWD refs in mumps.gld to g/ydb-mumps.dat"
^ZWCmcd("aydb-top","mcod",7)="    S PWD=$ZTRNLNM(""PWD"")"
^ZWCmcd("aydb-top","mcod",8)="      I $E(PWD)'=""/"" D b^dv(""Err PWD not abs ???"",""PWD"") Q"
^ZWCmcd("aydb-top","mcod",9)="    ;  Note also compiles ^epa ???"
^ZWCmcd("aydb-top","mcod",10)=" D ^dzzl($zro)  ; deletes *.o and recompiles to o/*.o  and ou/*.o  for gmsa, gmma, gmfd, umfd"
^ZWCmcd("aydb-top","mcod",11)="     S zrid=""umep"""
^ZWCmcd("aydb-top","mcod",12)="     S ^ZWZ(zrid,""izro"")=$zro  ; Log zrid,zzro for mbr IB^mwIpg"
^ZWCmcd("aydb-top","mcod",13)="     S ^ZWZ(zrid,""izgl"")=$zgl"
^ZWCmcd("aydb-top","mcod",14)="     S ^ZWZ(0,""zridCur"")=zrid"
^ZWCmcd("aydb-top","mcod",15)="     S ^ZWZ(zrid,""zzro"")=$zro"
^ZWCmcd("aydb-top","mcod",16)="     D ^dzWZuf(zrid)  ; Writes ^ZWZ(zrid,  to file in zzro for MBR"
^ZWCmcd("aydb-top","mcod",17)="        D ^epaMenu  ; Compiles to ^MNU(mSys,   mSys=""tde""   "
^ZWCmcd("aydb-top","mcod",18)="          KILL MU,RM  ; Clean up for ^dmnu  vs change in gmsa/rdv/"
^ZWCmcd("aydb-top","mcod",19)="        D ^dmnu    ; Runs from ^MNU(0,""mSysCur"")  and ^MNU(mSys,"
^ZWCmcd("aydb-top","mcod",20)="        Q"
^ZWCmcd("aydb-top","mcod",21)="       "
^ZWCmcd("aydb-top","mcod",22)="       Q"
^ZWCmcd("dTproto","mcod",1)="dTproto(TRou,Tlab,inL,outL) ;CKW/ESC  i1mar19  ; 20190301-55 ; Prototype Test Utility"
^ZWCmcd("dTproto","mcod",2)="  ; in gmsa/  rudev/   -- Separate later ?"
^ZWCmcd("dTproto","mcod",3)="  ;"
^ZWCmcd("dTproto","mcod",4)="  ;RefBy:  ^fdMenu  $test  td."
^ZWCmcd("dTproto-A","mcod",5)="A   D Sat  zwr ^dtTRef"
^ZWCmcd("dTproto-A","mcod",6)="    D X S tid=10"
^ZWCmcd("dTproto-A","mcod",7)="    D S1(tid)"
^ZWCmcd("dTproto-A","mcod",8)="      zwr ^dtTin"
^ZWCmcd("dTproto-A","mcod",9)="    S Q=$$Test(tid) D Res(""First Test"",Q)"
^ZWCmcd("dTproto-A","mcod",10)="      zwr ^dtTout"
^ZWCmcd("dTproto-A","mcod",11)="    Q"
^ZWCmcd("dTproto-DOI","mcod",66)="DOI    X DOI  ; DOI is a MUMPS Cmd, eg S Q=$$rRD^devIO(@inL))"
^ZWCmcd("dTproto-DOI","mcod",67)="       ;  Now test results"
^ZWCmcd("dTproto-DOI","mcod",68)="       USE $P W !,""RD()="",!  zwr RD  W !!"
^ZWCmcd("dTproto-II","mcod",43)=";*"
^ZWCmcd("dTproto-II","mcod",44)="II   S L=""inL,outL,inV,outV""  Q"
^ZWCmcd("dTproto-Res","mcod",12)=";*"
^ZWCmcd("dTproto-Res","mcod",13)="Res(id,Q) W:$X ! W ""Test:"",id,"" - "" "
^ZWCmcd("dTproto-Res","mcod",14)="    I Q="""" W "" Passed."",!"
^ZWCmcd("dTproto-Res","mcod",15)="    E  W "" Failed: "",Q,!"
^ZWCmcd("dTproto-Res","mcod",16)="    Q"
^ZWCmcd("dTproto-S1","mcod",38)=";* Save vars in MGbl to use  inL,inV,outL,outV"
^ZWCmcd("dTproto-S1","mcod",39)="S1(tid)   KILL ^dtTin(tid),^dtTout(tid) D II"
^ZWCmcd("dTproto-S1","mcod",40)="     F Lv=""inL"",""inV"" S ^dtTin(tid,Lv)=@Lv"
^ZWCmcd("dTproto-S1","mcod",41)="     F Lv=""outL"",""outV"" S ^dtTin(tid,Lv)=@Lv"
^ZWCmcd("dTproto-S1","mcod",42)="     Q"
^ZWCmcd("dTproto-SV","mcod",34)="SV(veqv)"
^ZWCmcd("dTproto-SV","mcod",35)="     S vn=$P(veqv,""=""),val=$P(veqv,""="",2,9)"
^ZWCmcd("dTproto-SV","mcod",36)="     S ^dtTRef(vn)=val"
^ZWCmcd("dTproto-SV","mcod",37)="     Q"
^ZWCmcd("dTproto-Sat","mcod",26)=";*  Ref set of vars - ref by @Filr1   in inV, outV ^dtTRef(vn)=val"
^ZWCmcd("dTproto-Sat","mcod",27)="Sat  KILL ^dtTRef"
^ZWCmcd("dTproto-Sat","mcod",28)="     D SV(""devr1=/home/kw/km6a/gmfd/dbg/abc.txt"")"
^ZWCmcd("dTproto-Sat","mcod",29)="     D SV(""Filr1=abc.txt"")"
^ZWCmcd("dTproto-Sat","mcod",30)="     D SV(""Folr1=dbg/"")"
^ZWCmcd("dTproto-Sat","mcod",31)="     D SV(""Base=/home/kw/km6a/"")"
^ZWCmcd("dTproto-Sat","mcod",32)="     D SV(""devw1=/home/kw/km6a/gmfd/dbg/write-w-file.txt"")"
^ZWCmcd("dTproto-Sat","mcod",33)="     Q"
^ZWCmcd("dTproto-Test","mcod",45)=";*"
^ZWCmcd("dTproto-Test","mcod",46)=";*$$   DOI,TRou,Tlab ^dtTin(tid,  : Q=$$, ^dtTout(tid,tver,"
^ZWCmcd("dTproto-Test","mcod",47)="Test(tid,tver)   I $G(tver)="""" S tver=1"
^ZWCmcd("dTproto-Test","mcod",48)="       S KL=""tid,tver,DOI,TRou,Tlab"" F vi=1:1:$L(KL,"","") S vn=$P(KL,"","",vi),^dtT(0,vn)=@vn"
^ZWCmcd("dTproto-Test","mcod",49)="       KILL  D II"
^ZWCmcd("dTproto-Test","mcod",50)="       S KL=""tid,tver,DOI,TRou,Tlab"" F vi=1:1:$L(KL,"","") S vn=$P(KL,"","",vi),@vn=^dtT(0,vn)"
^ZWCmcd("dTproto-Test","mcod",51)="       S inL=^dtTin(tid,""inL""),inV=^dtTin(tid,""inV"")"
^ZWCmcd("dTproto-Test","mcod",52)="       F vi=1:1:$L(inL,"","") DO   ; Create vars for call"
^ZWCmcd("dTproto-Test","mcod",53)="         .S vni=$P(inL,"","",vi) "
^ZWCmcd("dTproto-Test","mcod",54)="         .S vali=$P(inV,"","",vi)"
^ZWCmcd("dTproto-Test","mcod",55)="         .I $E(vali)=""@"" DO  ;"
^ZWCmcd("dTproto-Test","mcod",56)="            ..S vnR=$P(vali,""@"",2)"
^ZWCmcd("dTproto-Test","mcod",57)="            ..S vali=$G(^dtTRef(vnR))"
^ZWCmcd("dTproto-Test","mcod",58)="            ..I vali="""" I $D(^dtTRef(vnR))=0 S Qv=""Undef ref var ""_vnR Q"
^ZWCmcd("dTproto-Test","mcod",59)="         .S @vni=vali  ; could be null"
^ZWCmcd("dTproto-Test","mcod",60)="         .;D ^dv(""Log in var "",""vi,vni,vali,vnR"")"
^ZWCmcd("dTproto-Test","mcod",61)="         .S @vni=vali"
^ZWCmcd("dTproto-X","mcod",17)=";*  One test profile"
^ZWCmcd("dTproto-X","mcod",18)="X   S TRou=""devIO"",Tlab=""rRD"""
^ZWCmcd("dTproto-X","mcod",19)="    S DOI=""S Q=$$rRD^devIO(rFil,rFol)"""
^ZWCmcd("dTproto-X","mcod",20)="    S inL=""rFil,rFol,RD"""
^ZWCmcd("dTproto-X","mcod",21)="    S inV=""@Filr1,@Folr1,0"""
^ZWCmcd("dTproto-X","mcod",22)="    S outL=""Q,devr,rFil,rFol,rBase"""
^ZWCmcd("dTproto-X","mcod",23)="    S outV="",@devr1,@Filr1,@Folr1,@Base"""
^ZWCmcd("dTproto-X","mcod",24)="    Q"
^ZWCmcd("dTproto-X","mcod",25)=""
^ZWCmcd("dTproto-teD","mcod",62)="teD    ;D ^dv(""Log "",""DOI,TRou,Tlab,tid"")"
^ZWCmcd("dTproto-teD","mcod",63)="       ; Having created vars, DO it (Xecute)"
^ZWCmcd("dTproto-teD","mcod",64)="       USE $P W:$X ! W ""Xecuting "",DOI,!"
^ZWCmcd("dTproto-teD","mcod",65)="       ;zwr  W !!"
^ZWCmcd("dTproto-teO","mcod",69)="teO    S Qn=0,Qx="""" D II"
^ZWCmcd("dTproto-teO","mcod",70)="       ;F li=1:1:$L(L,"","") S Lv=$P(L,"","",li),@Lv=^dtT(1,0,Lv)"
^ZWCmcd("dTproto-teO","mcod",71)="       S outL=^dtTin(tid,""outL""),outV=^dtTin(tid,""outV"")       "
^ZWCmcd("dTproto-teO","mcod",72)="       F vi=1:1:$L(outL,"","") DO  I Qt'="""" S Qn=Qn+1,Qx=Qx_Qt_"","""
^ZWCmcd("dTproto-teO","mcod",73)="         .S vno=$P(outL,"","",vi)"
^ZWCmcd("dTproto-teO","mcod",74)="         .S oval=$G(@vno) I oval="""" S oval=""D""_$D(@vno)"
^ZWCmcd("dTproto-teO","mcod",75)="         .S ^dtTout(tid,tver,vn)=oval"
^ZWCmcd("dTproto-teO","mcod",76)="         .S val=$P(outV,"","",vi)"
^ZWCmcd("dTproto-teO","mcod",77)="         .I $E(val)=""@"" DO  ;"
^ZWCmcd("dTproto-teO","mcod",78)="            ..S vl=$P(val,""@"",2)"
^ZWCmcd("dTproto-teO","mcod",79)="            ..I $D(^dtT(1,vl))=0 S Qv=""Undef ref ""_vl Q"
^ZWCmcd("dTproto-teO","mcod",80)="            ..S val=$G(^dtT(1,vl))"
^ZWCmcd("dTproto-teT","mcod",81)="teT      .; Compare expected with output vars, @vno"
^ZWCmcd("dTproto-teT","mcod",82)="         .I $D(@vno)'=1 S Qv=""Undef-""_vno Q"
^ZWCmcd("dTproto-teT","mcod",83)="         .S vo=$G(@vno)    "
^ZWCmcd("dTproto-teT","mcod",84)="         .I vo=val S Qt="""" Q"
^ZWCmcd("dTproto-teT","mcod",85)="         .I vo="""" S Qt=""Null-""_vno Q"
^ZWCmcd("dTproto-teT","mcod",86)="         .S Qt=""NEQ-""_vno"
^ZWCmcd("dTproto-teT","mcod",87)="       Q Qt"
^ZWCmcd("dTproto-teT","mcod",88)=";*"
^ZWCmcd("devIB","mcod",1)="devIB  ;CKW/ESC i8sep20  gmsa/ rdev3/ ;20220820-75; Get Base vars, SB, PB, WB, GB, FB, MB"
^ZWCmcd("devIB","mcod",2)=";$$Q"
^ZWCmcd("devIB","mcod",3)=";"
^ZWCmcd("devIB","mcod",4)=";"
^ZWCmcd("devIB","mcod",5)=";   Special Set of Folder Variables"
^ZWCmcd("devIB","mcod",6)=";  RefBy: many"
^ZWCmcd("devIB","mcod",7)=";$zro : SB,PB,GB,MB,FB,WB, mpj"
^ZWCmcd("devIB-Benv","mcod",55)=";*"
^ZWCmcd("devIB-Benv","mcod",56)=";*  Derive from Env Vars, ? set by profile.sh  NOT"
^ZWCmcd("devIB-Benv","mcod",57)="Benv    S SBe=$ZTRNLNM(""SB"")_""/"""
^ZWCmcd("devIB-Benv","mcod",58)="        S PBe=$ZTRNLNM(""PB"")_""/"""
^ZWCmcd("devIB-Benv","mcod",59)="        Q"
^ZWCmcd("devIB-Benv","mcod",60)=";*"
^ZWCmcd("devIB-Benv","mcod",61)=";SBe and PBe  from Env  (sic)"
^ZWCmcd("devIB-Benv","mcod",62)=";   set here  SB  (not PB)"
^ZWCmcd("devIB-Bz","mcod",39)=";*"
^ZWCmcd("devIB-Bz","mcod",40)=";*  Older vers  derive from zro: SBz, PBz, mpj, PB"
^ZWCmcd("devIB-Bz","mcod",41)="Bz      S zro=$$DSP^dvc($zro)"
^ZWCmcd("devIB-Bz","mcod",42)="        S dist=$P(zro,"" ""),o1=$P(dist,""("")"
^ZWCmcd("devIB-Bz","mcod",43)="        S SBz=$P(o1,""/"",1,3)_""/"",PBz=$P(o1,""/"",1,5)_""/"""
^ZWCmcd("devIB-Bz","mcod",44)="        S mpj1=$P(o1,""/"",5)"
^ZWCmcd("devIB-Bz","mcod",45)="          S PBm=SBe_mpj1_""/"""
^ZWCmcd("devIB-Bz","mcod",46)="        S so2=$P(zro,"" "",2),o2=$P(so2,""("")"
^ZWCmcd("devIB-Bz","mcod",47)="        S n=$L(o2,""/"")"
^ZWCmcd("devIB-Bz","mcod",48)="        S mpj2=$P(o2,""/"",n-1)"
^ZWCmcd("devIB-Bz","mcod",49)="        I mpj1'=mpj2 S Q=""$zro parse err mpj"""
^ZWCmcd("devIB-Bz","mcod",50)="        I PBz'=PBm S Q=""$zro Parse PBz vs PBm err"""
^ZWCmcd("devIB-Bz","mcod",51)="        ;"
^ZWCmcd("devIB-Bz","mcod",52)="        S mpj=mpj1"
^ZWCmcd("devIB-Bz","mcod",53)="        S PB=PBm"
^ZWCmcd("devIB-Bz","mcod",54)="        Q"
^ZWCmcd("devIB-Bzro","mcod",27)=";*"
^ZWCmcd("devIB-Bzro","mcod",28)="; derived from $zro : SB, PB,  (GB, MB, FB)"
^ZWCmcd("devIB-Bzro","mcod",29)="Bzro(zro)    S zro=$G(zro) I zro="""" S zro=$zro"
^ZWCmcd("devIB-Bzro","mcod",30)="        NEW B,zdir,nsl"
^ZWCmcd("devIB-Bzro","mcod",31)="        D ^dzroz(zro)  ; Parses more accurately : zdir(oi,si)"
^ZWCmcd("devIB-Bzro","mcod",32)="        S B=$G(zdir(2)) S:B="""" B=$G(zdir(1))"
^ZWCmcd("devIB-Bzro","mcod",33)="        S nsl=$L(B,""/""),o=$P(B,""/"",nsl) I o'=""o"" D b^dv(""IB PB Err"",""B,zro,nsl,o"")"
^ZWCmcd("devIB-Bzro","mcod",34)="        S PB=$P(B,""/"",1,nsl-1)_""/"",mpj=$P(B,""/"",nsl-1)"
^ZWCmcd("devIB-Bzro","mcod",35)="        S SB=$P(B,""/"",1,nsl-2)_""/"""
^ZWCmcd("devIB-Bzro","mcod",36)="        ;D b^dv(""Log ^devIB "",""SB,PB,B"")"
^ZWCmcd("devIB-Bzro","mcod",37)="        Q"
^ZWCmcd("devIB-Bzro","mcod",38)="        ;"
^ZWCmcd("devIB-IB","mcod",9)="IB      NEW Q,SBe,PBm,PBz,zro,o1,dist,mp,od,n,mpj1,mpj2,PBe,PBz,SBi,SBz,SBe"
^ZWCmcd("devIB-IB","mcod",10)="        S Q="""""
^ZWCmcd("devIB-IB","mcod",11)="        S SBi=""/home/kw/km3a/"""
^ZWCmcd("devIB-IB","mcod",12)="        D Bzro($zro)  ; : SB,PB,mpj from $zro   was D Benv,Bz  ;"
^ZWCmcd("devIB-IB","mcod",13)="        S GB=SB_""gmsa/""        "
^ZWCmcd("devIB-IB","mcod",14)="        S MB=SB_""gmma/"""
^ZWCmcd("devIB-IB","mcod",15)="        S FB=SB_""gmfd/"""
^ZWCmcd("devIB-IB","mcod",16)="        S WB=PB_""wwm/""  "
^ZWCmcd("devIB-IB","mcod",17)="        Q:$Q Q  "
^ZWCmcd("devIB-IB","mcod",18)="        I Q'="""" D b^dv(Q,""Q,SB,SBi,SBz,SBe,PB,PBz,PBm,mpj1,mpj2,dist,o1,so2,o2"")"
^ZWCmcd("devIB-IB","mcod",19)="        Q"
^ZWCmcd("devIB-W2B","mcod",20)=";*$$Q  Alt if you want W2B  ie some places in mbr"
^ZWCmcd("devIB-W2B","mcod",21)="W2B     D ^devIB"
^ZWCmcd("devIB-W2B","mcod",22)="        I $G(W2B)="""" DO  ;"
^ZWCmcd("devIB-W2B","mcod",23)="          .I $G(zrid)'="""" S W2B=$G(^ZWZ(zrid,""W2B""))"
^ZWCmcd("devIB-W2B","mcod",24)="          .I $G(W2B)="""" S W2B=PB_""ww2m/"""
^ZWCmcd("devIB-W2B","mcod",25)="          .D ^dvstk,b^dv(""W2B default forced "",""W2B,PB,zrid"")"
^ZWCmcd("devIB-W2B","mcod",26)="        Q:$Q Q Q"
^ZWCmcd("devIB-top","mcod",8)="top     ;"
^ZWCmcd("devIO","mcod",1)="devIO(stem,uFN,iFil,iFol)   ;CKW/ESC  i25feb19 gmsa/ rdev3/ ;20220619-48; devU master subroutine"
^ZWCmcd("devIO","mcod",2)=";;$$~Q  NS: ^dev*"
^ZWCmcd("devIO","mcod",3)="  ;"
^ZWCmcd("devIO","mcod",4)="  ; Entry labels (stem uFN,iFil,iFol):  top, rRD, mR, hW, wW, mdrR,mdwW, lsW,lsR,lsWzsy, "
^ZWCmcd("devIO","mcod",5)="  ;         log, err  vs init^deverr, init^devlog (same) "
^ZWCmcd("devIO","mcod",6)="  ; stem(*) vector of vars dev*=*Base_[<mpj>/ ] _ *Fol _ *Fil"
^ZWCmcd("devIO","mcod",7)="  ;    <mpj> / is included in *Base of some stems or nowhere"
^ZWCmcd("devIO","mcod",8)="  ;Tests:  "
^ZWCmcd("devIO","mcod",9)="  ;"
^ZWCmcd("devIO","mcod",10)="  ; Special cases ^devlog, ^deverr   cross between dev  and var-list management"
^ZWCmcd("devIO","mcod",11)="  ;   and debugging  ^dv variant"
^ZWCmcd("devIO","mcod",12)="  ;"
^ZWCmcd("devIO-A","mcod",13)="A  NEW Q S Q=""?"""
^ZWCmcd("devIO-A","mcod",14)="  I $G(stem)="""" S Q=""Bug stem calling ^""_$T(+0) D b^dv(Q,""stem,iFil,iFol"") Goto Q"
^ZWCmcd("devIO-A","mcod",15)="  I "",r,w,h,ls,md,mr,""'[("",""_stem_"","") S Q=""Unrecog stem '""_stem_""' "" D b^dv(Q,""Q,stem"") Goto Q"
^ZWCmcd("devIO-A","mcod",16)="  D SNull"
^ZWCmcd("devIO-A","mcod",17)="  I stem=""r"" B  D rVD S devr=$$dev(rFil,rFol,rBase) S Q=$$RD(devr,.RF) Goto Q"
^ZWCmcd("devIO-A","mcod",18)="  I stem=""w"" D VD(.wFil,.wFol,.wBase,""WRITEme.txt"",""www/BE/"",$$kmpBase) S devw=$$dev(wFil,wFol,wBase) D OFW(devw) Goto Q"
^ZWCmcd("devIO-A","mcod",19)="  I stem=""ls"",uFN'[""W"" D lsVD S devls=$$dev(lsFil,lsFol,lsBase) S Q=$$OFW(devw) Goto Q"
^ZWCmcd("devIO-A","mcod",20)="  I stem=""ls"",uFN[""W"" D lsVD S devls=$$dev(lsFil,lsFol,lsBase) S Q=$$RD(devls,.RLS) Goto Q"
^ZWCmcd("devIO-A","mcod",21)="  I stem=""h"",uFN[""W"" D hVD S devh=$$dev(hFil,hFol,$$kmpBase) S Q=$$OFW(devh) Goto Q"
^ZWCmcd("devIO-A","mcod",22)="   S Q=""Bug: Failed to find stem '""_stem_""' "" D b^dv(Q,""stem"")"
^ZWCmcd("devIO-B0","mcod",163)=";*  :  kmBase, HBase, homeBase ( implicit outvars)  RefBy:  various ^<ns>Idev"
^ZWCmcd("devIO-B0","mcod",164)=";  See ^devIB  calc from $zro"
^ZWCmcd("devIO-B0","mcod",165)="B0     D ^devIB  ; SB, PB"
^ZWCmcd("devIO-B0","mcod",166)="       S homeBase=SB,kmBase=PB"
^ZWCmcd("devIO-B0","mcod",167)="       S HBase=SB_""H7r2/"""
^ZWCmcd("devIO-B0","mcod",168)="       ;D ^dv(""Log No H7r2 equiv in hp5 and hp6; See ^devIB"",""zro,SB,PB"")"
^ZWCmcd("devIO-B0","mcod",169)="       Q "
^ZWCmcd("devIO-B0err","mcod",198)="B0err  D ^dvsch,b^dv(""B0^devIO ?mpj vs $zro"",""zro,homeBase,kmBase,HBase"")"
^ZWCmcd("devIO-B0err","mcod",199)="       Q"
^ZWCmcd("devIO-BASE","mcod",170)=";*  RefBy:  ^fdIO proto"
^ZWCmcd("devIO-BASE","mcod",171)="BASE(mpj)   D B0"
^ZWCmcd("devIO-BASE","mcod",172)="       I $G(mpj)="""" S mpj="""""
^ZWCmcd("devIO-BASE","mcod",173)="       S kmpBase=$$kmpBase(mpj)"
^ZWCmcd("devIO-BASE","mcod",174)="       Q"
^ZWCmcd("devIO-CF","mcod",212)=";*"
^ZWCmcd("devIO-CF","mcod",213)="CF(devcls)  USE $P CLOSE devcls"
^ZWCmcd("devIO-CF","mcod",214)="        Q:$Q """"   Q"
^ZWCmcd("devIO-CFM","mcod",215)=";* Close with message to $P"
^ZWCmcd("devIO-CFM","mcod",216)="CFM(devcls) D CF(devcls) W:$X ! W ""Completed "",devcls,!"
^ZWCmcd("devIO-CFM","mcod",217)="        Q:$Q """"   Q"
^ZWCmcd("devIO-CFW","mcod",245)=";*"
^ZWCmcd("devIO-CFW","mcod",246)="CFW(devww)  I $G(devww)="""" Q"
^ZWCmcd("devIO-CFW","mcod",247)="       CLOSE devww"
^ZWCmcd("devIO-CFW","mcod",248)="       USE $P"
^ZWCmcd("devIO-CFW","mcod",249)="       Q:'$Q  Q """""
^ZWCmcd("devIO-HBase","mcod",186)="HBase()  D BASE Q HBase"
^ZWCmcd("devIO-Mpj","mcod",188)=";*"
^ZWCmcd("devIO-Mpj","mcod",189)=";*  $zro : mpj, hB ck eq homeBase;   mpj does NOT end in ""/"""
^ZWCmcd("devIO-Mpj","mcod",190)="Mpj    NEW z2,z3,zro,len"
^ZWCmcd("devIO-Mpj","mcod",191)="       S z2=$P($zro,"" "",2),z3=$P(z2,""o("")"
^ZWCmcd("devIO-Mpj","mcod",192)="       I $E(z3)=""/"",z3[""km"",z3[""/o"" S hB=$P(z3,""/o"")_""/"" DO  "
^ZWCmcd("devIO-Mpj","mcod",193)="         .I hB'=HomeBase D b^dv(""Err homeBase "",""hB,homeBase,mpj"")"
^ZWCmcd("devIO-Mpj","mcod",194)="       S len=$L(z3,""/""),mpj=$P(z3,""/"",len-1)  ;Derive mpj from $zro"
^ZWCmcd("devIO-Mpj","mcod",195)="       ;D ^dv(""Log Mpj^devIO  vs dbl KAcf mpj in Base"",""mpj,len,z3,z2"")"
^ZWCmcd("devIO-Mpj","mcod",196)="       S zro=$zro I zro'[homeBase D B0err"
^ZWCmcd("devIO-Mpj","mcod",197)="       Q"
^ZWCmcd("devIO-OFA","mcod",218)=";*"
^ZWCmcd("devIO-OFA","mcod",219)=";*$$  Open to Append"
^ZWCmcd("devIO-OFA","mcod",220)="OFA(devwa,WER)  NEW Q S Q=""?OFA"""
^ZWCmcd("devIO-OFA","mcod",221)="       I $G(devwa)="""" S Q=""Bug devwa "" D b^dv(Q,""devwa"") Q Q"
^ZWCmcd("devIO-OFA","mcod",222)="       OPEN devwa:(append:exception=""G ofaE1^""_$T(+0))"
^ZWCmcd("devIO-OFA","mcod",223)="       USE devwa:(exception=""G ofaE2^""_$T(+0))"
^ZWCmcd("devIO-OFA","mcod",224)="       S Q=""""  ; falls thru"
^ZWCmcd("devIO-OFR","mcod",200)=";*  OPEN File AND Read if Array given  --- Confusing, Looping ?  $D and Call by Ref"
^ZWCmcd("devIO-OFR","mcod",201)="OFR(devrr,RAo) NEW Q  S Q=""?OFR"" "
^ZWCmcd("devIO-OFR","mcod",202)="       I $G(devrr)="""" S Q=""Bug devrr"" D b^dv(Q,""devrr"") Q Q"
^ZWCmcd("devIO-OFR","mcod",203)="       CLOSE devrr  ; safety for debugging"
^ZWCmcd("devIO-OFR","mcod",204)="       OPEN devrr:(readonly:exception=""G ofrE1^""_$T(+0))"
^ZWCmcd("devIO-OFR","mcod",205)="       USE devrr:(rewind:exception=""G ofrE2^""_$T(+0))"
^ZWCmcd("devIO-OFR","mcod",206)="       S Q="""""
^ZWCmcd("devIO-OFW","mcod",232)=";*  opt 2nd arg Array to write and close"
^ZWCmcd("devIO-OFW","mcod",233)="OFW(devww,WER) NEW Q S Q=""?OFW"""
^ZWCmcd("devIO-OFW","mcod",234)="       I $G(devww)="""" S Q=""Bug devww "" D b^dv(Q,""devww"") Q Q"
^ZWCmcd("devIO-OFW","mcod",235)="       CLOSE devww  ; debug safety"
^ZWCmcd("devIO-OFW","mcod",236)="       ; S x=$ZSEARCH(devww) I x'="""" S Q=""File Exists "" D b^dv(Q,""x,devww"")  ; Q Q"
^ZWCmcd("devIO-OFW","mcod",237)="       OPEN devww:(newversion:exception=""G ofwE1^""_$T(+0))"
^ZWCmcd("devIO-OFW","mcod",238)="       USE devww:(exception=""G ofwE2^""_$T(+0))"
^ZWCmcd("devIO-OFW","mcod",239)="       S Q=""""  ; falls thru"
^ZWCmcd("devIO-Q","mcod",23)="Q   Q:$Q Q"
^ZWCmcd("devIO-Q","mcod",24)="    Q"
^ZWCmcd("devIO-RD","mcod",259)=";*$$ devrd is opened, =$I   rRF by dot-pfx-byreference"
^ZWCmcd("devIO-RD","mcod",260)="; fiddling 29dec22 NEW Q"
^ZWCmcd("devIO-RD","mcod",261)="RD(devrd,rRF) NEW Q,ri,ZEOF  "
^ZWCmcd("devIO-RD","mcod",262)="       S Q=$$OFR(devrd) I Q'="""" Q ""RD/OFR ""_Q"
^ZWCmcd("devIO-RD","mcod",263)="       KILL rRF S rRF=0 USE devrd:(exception=""G rdE2"")"
^ZWCmcd("devIO-RD","mcod",264)="       F ri=1:1 R X S ZEOF=$ZEOF Q:ZEOF  S rRF(ri)=X,rRF=ri"
^ZWCmcd("devIO-RD","mcod",265)="       D b^dv(""Q on ZEOF"",""ZEOF,ri,devrr"")"
^ZWCmcd("devIO-SNull","mcod",25)=";* Set vars Null if undef for inputs to ^devIO"
^ZWCmcd("devIO-SNull","mcod",26)="SNull  I $G(uFN)="""" S uFN="""""
^ZWCmcd("devIO-SNull","mcod",27)="       I $G(iFil)="""" S iFil="""""
^ZWCmcd("devIO-SNull","mcod",28)="       I $G(iFol)="""" S iFol="""""
^ZWCmcd("devIO-SNull","mcod",29)="       Q"
^ZWCmcd("devIO-SNull","mcod",30)=";Set Defaults, vec vars exist on output, val if any in iF*   dev arg by Ref!"
^ZWCmcd("devIO-VD","mcod",31)="VD(xFil,xFol,xBase,dFil,dFol,dBase,dev)"
^ZWCmcd("devIO-VD","mcod",32)="  S xFil=$G(xFil),xFol=$G(xFol),xBase=$G(xBase)"
^ZWCmcd("devIO-VD","mcod",33)="  I $G(iFil)'="""" S xFil=iFil"
^ZWCmcd("devIO-VD","mcod",34)="   E  S iFil=$G(xFil) S:iFil="""" iFil=$G(dFil) I iFil="""" D b^dv(""Bug no iFil default"",""iFil,rFil"") Q"
^ZWCmcd("devIO-VD","mcod",35)="   I iFil[""/"" D b^dv(""Err: iFil [ /  "",""iFil,xFil,xFol,xBase"") Q"
^ZWCmcd("devIO-VD","mcod",36)="  I $G(iFol)'="""" S xFol=iFol"
^ZWCmcd("devIO-VD","mcod",37)="   E  S iFol=$G(xFol) S:iFol="""" iFol=$G(dFol)  ;iFol may be null (no /)"
^ZWCmcd("devIO-VD","mcod",38)="   S:xFil="""" xFil=iFil ;S:xFol="""" xFol=iFol"
^ZWCmcd("devIO-VD","mcod",39)="  ;S xBase=$G(dBase) I xBase="""" D b^dv(""Bug No default Base"",""xBase,dBase"")  S xBase=$$kmBase"
^ZWCmcd("devIO-VD","mcod",40)="  I $G(iBase)'="""" S xBase=iBase"
^ZWCmcd("devIO-VD","mcod",41)="   E  S iBase=$G(xBase) S:iBase="""" iBase=$G(dBase) I iBase="""" D b^dv(""Bug Base ?"",""iBase,xBase,dBase"")"
^ZWCmcd("devIO-VD","mcod",42)="  S dev=$$dev(xFil,xFol,xBase)"
^ZWCmcd("devIO-VD","mcod",43)="  ;D b^dv(""Log VD "",""dev,xFil,xFol,xBase,rFil,rFol,rBase"")"
^ZWCmcd("devIO-VD","mcod",44)="  Q"
^ZWCmcd("devIO-VD2","mcod",72)=";*   i* explicitly"
^ZWCmcd("devIO-VD2","mcod",73)="VD2(xFil,xFol,xBase,dev,RF)  ;x* is stem var"
^ZWCmcd("devIO-VD2","mcod",74)="  I $G(iBase)="""" S iBase=$G(xBase) I iBase="""" S iBase=$$kmpBase"
^ZWCmcd("devIO-VD2","mcod",75)="  i $G(iFol)="""" S iFol=$G(xFol) I iFol="""" ; ok to be null"
^ZWCmcd("devIO-VD2","mcod",76)="  I $G(iFil)="""" S iFil=$G(xFil) I iFil="""" S iFil=""README.txt"" "
^ZWCmcd("devIO-VD2","mcod",77)="  S dev=$$dev(iFil,iFol,iBase)"
^ZWCmcd("devIO-VD2","mcod",78)="  S Q=$$RD(dev,.RF)"
^ZWCmcd("devIO-VD2","mcod",79)="  Q Q"
^ZWCmcd("devIO-WWER","mcod",253)=";* Write WER() to cur dev (deverr or $P)"
^ZWCmcd("devIO-WWER","mcod",254)="WWER    ;"
^ZWCmcd("devIO-WWER","mcod",255)="       S wv="""" F wi=0:1 S wv=$O(WER(wv)) Q:wv=""""  W:$X ! W $G(WER(wv)),!"
^ZWCmcd("devIO-WWER","mcod",256)="       W !"
^ZWCmcd("devIO-WWER","mcod",257)="       D CFM(deverr)"
^ZWCmcd("devIO-WWER","mcod",258)="       Q"
^ZWCmcd("devIO-dev","mcod",45)=";*"
^ZWCmcd("devIO-dev","mcod",46)="dev(xFil,xFol,xBase) Q xBase_xFol_xFil Q"
^ZWCmcd("devIO-dev","mcod",47)=";*  * * * *  "
^ZWCmcd("devIO-dev","mcod",48)="  ; Master stem list  -- stem determines vars, Array, R/W, ..."
^ZWCmcd("devIO-dev","mcod",49)="  ; Retro stems:  devr, devw, devh, devm {r,w,h,m}  and {err, log}"
^ZWCmcd("devIO-dev","mcod",50)="  ; Newer stems  {mdr,mdw,ls,"
^ZWCmcd("devIO-dev","mcod",51)=""
^ZWCmcd("devIO-dev","mcod",52)=""
^ZWCmcd("devIO-deverr","mcod",134)=";*$$  cBD eliminated - caller should put in iFil, implied W uFN"
^ZWCmcd("devIO-deverr","mcod",135)="deverr(iFil,iFol)  NEW Q  S Q="""",errBase=$$kmpBase,stem=""err"",uFN=""W"""
^ZWCmcd("devIO-deverr","mcod",136)="    D errVD  S deverr=$$dev(iFil,iFol,errBase)"
^ZWCmcd("devIO-deverr","mcod",137)="    S Q=$$OFW(deverr) I Q'="""" Q Q"
^ZWCmcd("devIO-deverr","mcod",138)="        I $$devopn(deverr)'="""" S Q=$$OFW^devIO(deverr) I Q'="""" Q ""Unable to Open ""_deverr"
^ZWCmcd("devIO-deverr","mcod",139)="    D HdErr^deverr  ; write top of HGen page deverr"
^ZWCmcd("devIO-deverr","mcod",140)="    Q Q"
^ZWCmcd("devIO-deverr","mcod",141)="    Q"
^ZWCmcd("devIO-devlog","mcod",142)=";*$$  implied W : devlog, devBase, devFol,devFil    RefBy: ^devlog^devlog, many"
^ZWCmcd("devIO-devlog","mcod",143)="devlog(iFil,iFol)  NEW Q  S Q="""",logBase=$$kmpBase,stem=""log"",uFN=""W"""
^ZWCmcd("devIO-devlog","mcod",144)="    I $G(iFil)="""" S iFil=""LogFile"""
^ZWCmcd("devIO-devlog","mcod",145)="    DO  ; devlog one of two methods"
^ZWCmcd("devIO-devlog","mcod",146)="      .I $G(iFol)="""",$E(iFil,1,5)=""/home"" S devlog=iFil Q  ; iFil is full url"
^ZWCmcd("devIO-devlog","mcod",147)="      .D logVD  S devlog=$$dev(iFil,iFol,logBase)"
^ZWCmcd("devIO-devlog","mcod",148)="    S x=$ZSEARCH(devlog) I x'="""" DO               ;replace devlog; dont stop in OFW"
^ZWCmcd("devIO-devlog","mcod",149)="       .ZSY ""rm ""_devlog"
^ZWCmcd("devIO-devlog","mcod",150)="       .S x2=$ZSEARCH(devlog)"
^ZWCmcd("devIO-devlog","mcod",151)="       .I x2'="""" D b^dv(""Err cant remove devlog"",""devlog,x2,x"")"
^ZWCmcd("devIO-devlog","mcod",152)="    S Q=$$OFW(devlog) I Q'="""" D b^dv(""Error Failed to Open devlog"",""devlog"") Q Q"
^ZWCmcd("devIO-devlog","mcod",153)="    KILL ^MNU(0,""nLG"")"
^ZWCmcd("devIO-devlog","mcod",154)="    USE devlog"
^ZWCmcd("devIO-devlog","mcod",155)="    D HdLog^devlog"
^ZWCmcd("devIO-devlog","mcod",156)="    Q Q  ; Q is null"
^ZWCmcd("devIO-devopn","mcod",157)=";*   *****  General, non stem-specific code"
^ZWCmcd("devIO-devopn","mcod",158)=";*  Test if dev open --dupl in ^deverr  - in case optional nested mRou using devlog"
^ZWCmcd("devIO-devopn","mcod",159)="devopn(dev)  I $G(dev)="""" D bug^dv Q"
^ZWCmcd("devIO-devopn","mcod",160)="    NEW ZSH,D   ZSH ""d"":ZSH    MERGE D=ZSH(""D"")"
^ZWCmcd("devIO-devopn","mcod",161)="    S dc=$G(D(dev)) I dc[""OPEN"" Q """""
^ZWCmcd("devIO-devopn","mcod",162)="    Q ""NotOpen: ""_dc"
^ZWCmcd("devIO-devrRD","mcod",63)=";*"
^ZWCmcd("devIO-devrRD","mcod",64)=";*   Single function per stem Read File to RF()  1st letters of label is stem, then uFN"
^ZWCmcd("devIO-devrRD","mcod",65)=";*$$ Entry  RefBy- test ^devTes, ^barQ1   :$$=Q-nullOK, deva, rFil,rFol,rBase,  RF()"
^ZWCmcd("devIO-devrRD","mcod",66)="devrRD(iFil,iFol,iBase) NEW Q,ir  S stem=""r"",uFN=""RD"""
^ZWCmcd("devIO-devrRD","mcod",67)="   S Q=$$VD2(.rFil,.rFol,.rBase,.devr,.RF)"
^ZWCmcd("devIO-devrRD","mcod",68)="     I Q'="""" D b^dv(""devrRD file open failed."",""Q,devr"") Q Q"
^ZWCmcd("devIO-devrRD","mcod",69)="   S Q=$$RD(devr,.RF)"
^ZWCmcd("devIO-devrRD","mcod",70)="   Q Q"
^ZWCmcd("devIO-devrRD","mcod",71)="   "
^ZWCmcd("devIO-devw","mcod",128)=";*$$"
^ZWCmcd("devIO-devw","mcod",129)="devw(iFil,iFol,iBase)  NEW Q  S Q="""",wBase=$$kmpBase,stem=""w"",uFN=""W"""
^ZWCmcd("devIO-devw","mcod",130)="  D wVD"
^ZWCmcd("devIO-devw","mcod",131)="  S devw=$$dev(iFil,iFol,wBase)  ; not wFil, wFol  usu default"
^ZWCmcd("devIO-devw","mcod",132)="  S Q=$$OFW(devw)"
^ZWCmcd("devIO-devw","mcod",133)="  Q Q"
^ZWCmcd("devIO-errVD","mcod",61)="errVD D VD(.errFil,.errFol,.errBase,""Err.txt"",""www/BE/"",$$kmpBase,.deverr) Q  ;See ^deverr"
^ZWCmcd("devIO-hVD","mcod",54)="hVD D VD(.hFil,.hFol,.hBase,""Temp-html-Page.html"",""log/"",$$HBase,.devh) Q"
^ZWCmcd("devIO-hW","mcod",89)=";*$$  Hgen "
^ZWCmcd("devIO-hW","mcod",90)="hW(iFil,iFol,iBase)  NEW Q  S Q="""",stem=""h"",uFN=""Wh"" "
^ZWCmcd("devIO-hW","mcod",91)="  I $G(iBase)'="""" S hBase=iBase"
^ZWCmcd("devIO-hW","mcod",92)="  D hVD  S devh=$$dev(iFil,iFol,hBase)"
^ZWCmcd("devIO-hW","mcod",93)="  S Q=$$OFW(devh,.WH)  "
^ZWCmcd("devIO-hW","mcod",94)="  ; vs S Q=$$HG1^devHGen(devh, TI*, VVL ?"
^ZWCmcd("devIO-hW","mcod",95)="  Q Q"
^ZWCmcd("devIO-homeBase","mcod",187)="homeBase() D BASE Q homeBase"
^ZWCmcd("devIO-kmBase","mcod",175)=";*$$            --- See ^devIMG  or ^devIB"
^ZWCmcd("devIO-kmBase","mcod",176)="kmBase() D B0 Q kmBase"
^ZWCmcd("devIO-kmpBase","mcod",177)=";*$$  mpj : mpj', kmpBase=$$ "
^ZWCmcd("devIO-kmpBase","mcod",178)="kmpBase(mpja) NEW zro D B0"
^ZWCmcd("devIO-kmpBase","mcod",179)=" I $G(mpja)'="""" DO  ;"
^ZWCmcd("devIO-kmpBase","mcod",180)="    .S zro=$zro "
^ZWCmcd("devIO-kmpBase","mcod",181)="    .I zro[(mpja_""/o"") S mpj=mpja Q"
^ZWCmcd("devIO-kmpBase","mcod",182)="    .D b^dv(""Bug arg mpj(a) not in $zro with o/"",""mpja,kmBase,zro"")"
^ZWCmcd("devIO-kmpBase","mcod",183)=" I $G(mpja)="""" D Mpj I mpj[""//"" D b^dv(""Debug "",""mpja,mpj,zro,len,z3,z2"")"
^ZWCmcd("devIO-kmpBase","mcod",184)=" S kmpBase=kmBase I mpj'="""",kmpBase'[(""/""_mpj_""/"") S kmpBase=kmBase_mpj_""/"" "
^ZWCmcd("devIO-kmpBase","mcod",185)=" Q kmpBase ; & var kmpBase"
^ZWCmcd("devIO-logVD","mcod",62)="logVD D VD(.logFil,.logFol,.logBase,""Log.txt"",""www/BE/"",$$kmpBase,.devlog) Q  ;See ^devlog"
^ZWCmcd("devIO-lsC","mcod",119)="lsC  D CF(devls)  Q:'$Q  Q """""
^ZWCmcd("devIO-lsRLS","mcod",107)=";*$$"
^ZWCmcd("devIO-lsRLS","mcod",108)="lsRLS(iFil,iFol)  NEW Q  S Q="""",lsBase=$$kmpBase,stem=""ls"",uFN=""R"""
^ZWCmcd("devIO-lsRLS","mcod",109)="  D lsVD"
^ZWCmcd("devIO-lsRLS","mcod",110)="  S devls=$$dev(iFil,iFol,lsBase)  ; not lsFil, lsFol  usu default"
^ZWCmcd("devIO-lsRLS","mcod",111)="  S Q=$$RD(devls)"
^ZWCmcd("devIO-lsRLS","mcod",112)="  Q Q"
^ZWCmcd("devIO-lsVD","mcod",56)="lsVD D VD(.lsFil,.lsFol,.lsBase,""temp-ls-""_$J,""log/"",$$kmpBase,.devls)"
^ZWCmcd("devIO-lsVD","mcod",57)="     ;D b^dv(""Log "",""lsFol,lsFil,lsBase"")"
^ZWCmcd("devIO-lsVD","mcod",58)="     Q"
^ZWCmcd("devIO-lsW","mcod",113)=";*$$"
^ZWCmcd("devIO-lsW","mcod",114)="lsW(iFil,iFol)  NEW Q  S Q="""",lsBase=$$kmpBase,stem=""ls"",uFN=""W"""
^ZWCmcd("devIO-lsW","mcod",115)="  D lsVD"
^ZWCmcd("devIO-lsW","mcod",116)="  S devls=$$dev(iFil,iFol,lsBase)  ; not lsFil, lsFol  usu default"
^ZWCmcd("devIO-lsW","mcod",117)="  S Q=$$OFW(devls)"
^ZWCmcd("devIO-lsW","mcod",118)="  Q Q"
^ZWCmcd("devIO-lsWzsy","mcod",120)=";*$$  Write results of zsy to devls"
^ZWCmcd("devIO-lsWzsy","mcod",121)="lsWzsy(iFil,iFol,zsy)  NEW Q  S Q="""",lsBase=$$kmpBase,stem=""ls"",uFN=""Wzsy"""
^ZWCmcd("devIO-lsWzsy","mcod",122)="     I $G(zsy)="""" S Q=""Bug zsy missing"" D b^dv(Q,""zsy,iFil,iFol"") Q Q"
^ZWCmcd("devIO-lsWzsy","mcod",123)="     USE $P W:$X ! W ""ZSY:"",zsy,!"
^ZWCmcd("devIO-lsWzsy","mcod",124)="     I $E(zsy,1,3)'=""ls "" W ""? Expecting ls cmd ??"",!"
^ZWCmcd("devIO-lsWzsy","mcod",125)="     ZSY zsy_"">""_devls"
^ZWCmcd("devIO-lsWzsy","mcod",126)="     D CFM(devls)  ;Close with message"
^ZWCmcd("devIO-lsWzsy","mcod",127)="     Q"
^ZWCmcd("devIO-mRM","mcod",84)=";*$$  usu Read M Rou (*.m)"
^ZWCmcd("devIO-mRM","mcod",85)="mRM(iFil,iFol)  NEW Q  S Q="""",mBase=$$kmpBase,stem=""m"",uFN=""R"""
^ZWCmcd("devIO-mRM","mcod",86)="  D mVD  S devm=$$dev(iFil,iFol,mBase)"
^ZWCmcd("devIO-mRM","mcod",87)="  S Q=$$RD(devr,.RM)"
^ZWCmcd("devIO-mRM","mcod",88)="  Q Q"
^ZWCmcd("devIO-mVD","mcod",55)="mVD D VD(.mFil,.mFol,.mBase,""devIO.m"",""gmsa/rudev/"",$$kmBase,.devm) S uFN=""R"" Q"
^ZWCmcd("devIO-mdrR","mcod",96)=";*$$  MDk Read "
^ZWCmcd("devIO-mdrR","mcod",97)="mdrR(iFil,iFol)  NEW Q  S Q="""",mdrBase=$$kmpBase,stem=""mdr"",uFN=""WMDgen"""
^ZWCmcd("devIO-mdrR","mcod",98)="  D mdrVD  S devmdr=$$dev(iFil,iFol,mdrBase)"
^ZWCmcd("devIO-mdrR","mcod",99)="  S Q=$$OFR(devmdr,.MDK)  "
^ZWCmcd("devIO-mdrR","mcod",100)="  Q Q  "
^ZWCmcd("devIO-mdrVD","mcod",59)="mdrVD D VD(.mdrFil,.mdrFol,.mdrBase,""MDgenDemo.MDk"",""mdk/"",$$kmpBase,.devmdr) Q"
^ZWCmcd("devIO-mdwVD","mcod",60)="mdwVD D VD(.mdwFil,.mdwFol,.mdwBase,""MDgenDemo.html"",""www/BE/"",$$kmpBase,.devmdw) Q"
^ZWCmcd("devIO-mdwW","mcod",101)=";*$$  MDgen "
^ZWCmcd("devIO-mdwW","mcod",102)="mdwW(iFil,iFol)  NEW Q  S Q="""",mdwBase=$$kmpBase,stem=""mdw"",uFN=""WMDgen"""
^ZWCmcd("devIO-mdwW","mcod",103)="  D mdwVD  S devmdw=$$dev(iFil,iFol,mdwBase)"
^ZWCmcd("devIO-mdwW","mcod",104)="  S Q=$$OFW(devmdw,.WMD)  "
^ZWCmcd("devIO-mdwW","mcod",105)="  ; vs S Q=$$HG1^devMDGen(devmdw, TI*, VVL ?"
^ZWCmcd("devIO-mdwW","mcod",106)="  Q Q  "
^ZWCmcd("devIO-ofaE1","mcod",227)=";*"
^ZWCmcd("devIO-ofaE1","mcod",228)="ofaE1  S Q=""Error Opening file to write- "" D b^dv(Q,""devww,Q"") CLOSE devww"
^ZWCmcd("devIO-ofaE1","mcod",229)="       Q Q"
^ZWCmcd("devIO-ofaE2","mcod",230)="ofaE2  S Q=""Error Writing to devww "" D b^dv(Q,""devww"")"
^ZWCmcd("devIO-ofaE2","mcod",231)="       G ofwQ       "
^ZWCmcd("devIO-ofaQ","mcod",225)="ofaQ   I $D(WER)=11 D WWER       "
^ZWCmcd("devIO-ofaQ","mcod",226)="       Q Q"
^ZWCmcd("devIO-ofrE1","mcod",209)=";*"
^ZWCmcd("devIO-ofrE1","mcod",210)="ofrE1 S Q=""Err Opening file- "" D b^dv(Q,""devrr,exc"") G ofrQ"
^ZWCmcd("devIO-ofrE2","mcod",211)="ofrE2 S Q=""Err Reading file- :"" D b^dv(Q,""devrr"") G ofrQ"
^ZWCmcd("devIO-ofrQ","mcod",207)="ofrQ   I $G(RAo)'="""",$D(RAo) S Q=$$RD(devrr,.RAo)  ; Caller should SET RX=0 so $D detects it sic"
^ZWCmcd("devIO-ofrQ","mcod",208)="       Q:$Q Q   Q       "
^ZWCmcd("devIO-ofwE1","mcod",242)=";*"
^ZWCmcd("devIO-ofwE1","mcod",243)="ofwE1  S Q=""Error Opening file to write- "" D b^dv(Q,""devww,Q"") CLOSE devww"
^ZWCmcd("devIO-ofwE1","mcod",244)="       Q Q"
^ZWCmcd("devIO-ofwE2","mcod",250)=";*"
^ZWCmcd("devIO-ofwE2","mcod",251)="ofwE2  S Q=""Error Writing to devww "" D b^dv(Q,""devww"")"
^ZWCmcd("devIO-ofwE2","mcod",252)="       G ofwQ"
^ZWCmcd("devIO-ofwQ","mcod",240)="ofwQ   I $D(WER)=11 D WWER"
^ZWCmcd("devIO-ofwQ","mcod",241)="       Q Q"
^ZWCmcd("devIO-rVD","mcod",80)=";*  dev  "
^ZWCmcd("devIO-rVD","mcod",81)="rVD D VD(.iFil,.iFol,.iBase,.devr,.RF)"
^ZWCmcd("devIO-rVD","mcod",82)="    I $G(rBase)[""//"" D b^dv(""Debug ?"",""rBase,dBase,xBase"")"
^ZWCmcd("devIO-rVD","mcod",83)="    Q"
^ZWCmcd("devIO-rdE2","mcod",266)="rdE2   CLOSE devrd USE $P  ; EOF exception ? others"
^ZWCmcd("devIO-rdE2","mcod",267)="       Q """""
^ZWCmcd("devIO-rdE2","mcod",268)="       "
^ZWCmcd("devIO-rdE2","mcod",269)=";*"
^ZWCmcd("devIO-wVD","mcod",53)="wVD D VD(.wFil,.wFol,.wBase,""WRITE.txt"",""www/BE/"",$$kmpBase,.devw) Q"
^ZWCmcd("devPZ","mcod",1)="devPZ(M)  ;CKW/ESC i18sep20 gmsa/ rd2io/ ; 20200918-75 ; Pause sr"
^ZWCmcd("devPZ","mcod",2)=";"
^ZWCmcd("devPZ","mcod",3)=";"
^ZWCmcd("devPZ","mcod",4)=";"
^ZWCmcd("devPZ-A","mcod",5)="A      I $G(M)="""" S M=""Pause to Review Screen."""
^ZWCmcd("devPZ-RX","mcod",6)="RX     NEW %D,X S %D=$IO USE $P"
^ZWCmcd("devPZ-RX","mcod",7)="       W !,M,"" "",!"
^ZWCmcd("devPZ-RX","mcod",8)="       R ""'Hit Enter' to Continue:"",X"
^ZWCmcd("devPZ-RX","mcod",9)="       I %D'=$P USE %D"
^ZWCmcd("devPZ-RX","mcod",10)="       Q:$Q Q  Q"
^ZWCmcd("devPZ-RX","mcod",11)="       "
^ZWCmcd("devRD","mcod",1)="devRD(devrd,jsin,ARna)  ;CKW/ESC  i28dev919 gmsa/ rd2io/ ;20200321-92 ; Read File to Array, def RDa()"
^ZWCmcd("devRD","mcod",2)=";*$$~Q    in gmsa/  rd2io/  ^dev*"
^ZWCmcd("devRD","mcod",3)="  ;"
^ZWCmcd("devRD","mcod",4)="  ;RefBy:many"
^ZWCmcd("devRD","mcod",5)="   I $G(devrd)="""" D bug^dv Q ""9arg?devrd"""
^ZWCmcd("devRD","mcod",6)="   I $G(ARna)="""" S ARna=""RDa"""
^ZWCmcd("devRD","mcod",7)="   D inJ"
^ZWCmcd("devRD-A","mcod",8)="A  I $G(@ARna)'=""""  KILL @ARna "
^ZWCmcd("devRD-A","mcod",9)="   S @ARna=0,@ARna@(0,""devrd"")=devrd"
^ZWCmcd("devRD-A","mcod",10)="   NEW Q,rdi,Lmax  S Q=""?devRD"",Lmax="""""
^ZWCmcd("devRD-A","mcod",11)="       CLOSE devrd  ; safety for debugging"
^ZWCmcd("devRD-A","mcod",12)="       OPEN devrd:(readonly:exception=""G ofrE1^""_$T(+0))  ; Flag OFR "
^ZWCmcd("devRD-A","mcod",13)="       USE devrd:(rewind:exception=""G ofrE2^""_$T(+0))"
^ZWCmcd("devRD-A","mcod",14)="       F rdi=1:1 USE devrd R X S ZEOF=$ZEOF  USE $P Q:ZEOF  S @ARna@(rdi)=X,@ARna=rdi"
^ZWCmcd("devRD-A","mcod",15)="       S Q="""""
^ZWCmcd("devRD-T","mcod",46)=";*$$"
^ZWCmcd("devRD-T","mcod",47)="T(Q1)   S Qn=0 KILL (Qn) S RT=0"
^ZWCmcd("devRD-T","mcod",48)="    S devt=""~/km6a/gmfd/dbg/abc.txt"""
^ZWCmcd("devRD-T","mcod",49)="    S Q=$$^devRD(devt,,""RT"")"
^ZWCmcd("devRD-T","mcod",50)="      I Q'="""" D SE^devTs(""devRD-1"",Q,""devt,Q"")"
^ZWCmcd("devRD-T","mcod",51)="      I $D(RT)'=11 D SE^devTs(""devRD-2RT"",Q,""devt,Q"")"
^ZWCmcd("devRD-T","mcod",52)="      I $G(RT(3))'[""tdu."" D SE^devTs(""devRD-3txt"",Q,""devt,Q"")"
^ZWCmcd("devRD-T","mcod",53)="    ;"
^ZWCmcd("devRD-T","mcod",54)="    Q Qn"
^ZWCmcd("devRD-T","mcod",55)="      "
^ZWCmcd("devRD-T","mcod",56)="    "
^ZWCmcd("devRD-TES","mcod",39)=";*"
^ZWCmcd("devRD-TES","mcod",40)=";*    * * * * *  Tests"
^ZWCmcd("devRD-TES","mcod",41)=";*  RefBy:  Menu ^devTMenu  trd."
^ZWCmcd("devRD-TES","mcod",42)="TES   S Q=$$T  USE $P W:$X ! W ""Tests on ^devRD- """
^ZWCmcd("devRD-TES","mcod",43)="      I Q="""" W ""Passed."",!"
^ZWCmcd("devRD-TES","mcod",44)="      E  W "" Failed x"",$G(Qn),""  "",Q,!"
^ZWCmcd("devRD-TES","mcod",45)="      Q"
^ZWCmcd("devRD-inJ","mcod",27)=";*"
^ZWCmcd("devRD-inJ","mcod",28)=";* Mode vars def or from jsin"
^ZWCmcd("devRD-inJ","mcod",29)="inJ  S Lmax="""""
^ZWCmcd("devRD-inJ","mcod",30)="     ; eg jsin=""{ARna=RF,Lmax=120}  ; sic Lmax is output, not input..."
^ZWCmcd("devRD-inJ","mcod",31)="     I $G(jsin)'="""" D jv(jsin) DO"
^ZWCmcd("devRD-inJ","mcod",32)="       .I jsin[""Lmax="" S x=$P(jsin,""Lmax="",2),x=$P(x,"",""),x=$P(x,""}"")    I x S Lmax=+x"
^ZWCmcd("devRD-inJ","mcod",33)="       .I jsin[""ARna="" S x=$P(jsin,""ARna="",2),x=$P(x,"",""),x=$P(x,""}"")  I x'="""" S ARna=x"
^ZWCmcd("devRD-inJ","mcod",34)="     Q"
^ZWCmcd("devRD-jv","mcod",35)=";*  convert jsin to vars"
^ZWCmcd("devRD-jv","mcod",36)="jv(jsin,FL)  I $G(FL)="""" D bug^dv  Q  ;FL is list allowed to S @vn"
^ZWCmcd("devRD-jv","mcod",37)="     BREAK  ; no code yet,, see inJ"
^ZWCmcd("devRD-jv","mcod",38)="     Q """""
^ZWCmcd("devRD-ofrE1","mcod",21)=";*"
^ZWCmcd("devRD-ofrE1","mcod",22)="ofrE1 S Q=""Err Opening file- "" D b^dv(Q,""devrd,exc"") "
^ZWCmcd("devRD-ofrE1","mcod",23)="      G ofrQ"
^ZWCmcd("devRD-ofrE2","mcod",24)="ofrE2 I $ZEOF S Q="""" G ofrQ"
^ZWCmcd("devRD-ofrE2","mcod",25)="      S Q=""Err Reading file- :"" D b^dv(Q,""devrd"")"
^ZWCmcd("devRD-ofrE2","mcod",26)="      G ofrQ"
^ZWCmcd("devRD-ofrQ","mcod",16)="ofrQ   USE $P CLOSE devrd "
^ZWCmcd("devRD-ofrQ","mcod",17)="       S @ARna@(0,""Lmax"")=Lmax"
^ZWCmcd("devRD-ofrQ","mcod",18)="       S @ARna@(0,""Q"")=Q"
^ZWCmcd("devRD-ofrQ","mcod",19)="       Q:$Q Q"
^ZWCmcd("devRD-ofrQ","mcod",20)="       Q   ; This Quit for stray D ^devRD  vs $$ $Q"
^ZWCmcd("devRM","mcod",1)="devRM(murl) ;CKW/ESC i8apr23 gmsa./ rdev3/ ;20230408-69;Read a ydb-mumps file to RM()"
^ZWCmcd("devRM","mcod",2)=";  : RM(),  mrou"
^ZWCmcd("devRM","mcod",3)=";"
^ZWCmcd("devRM-Q","mcod",13)="Q     Q:$Q Q  Q:Q="""""
^ZWCmcd("devRM-Qb","mcod",14)="Qb    S Q=""IB Err ^""_$T(+0) D b^duv(Q,""zroA,dist,SB,PB,GB"")"
^ZWCmcd("devRM-Qb","mcod",15)="      Q:$Q Q Q"
^ZWCmcd("devRM-Qb","mcod",16)="      "
^ZWCmcd("devRM-top","mcod",4)="top   NEW Q S Q="""" KILL RM S RM=0"
^ZWCmcd("devRM-top","mcod",5)="      NEW z,nsl,mfil"
^ZWCmcd("devRM-top","mcod",6)="      I $G(murl)="""" D bug^dv Q"
^ZWCmcd("devRM-top","mcod",7)="      S nsl=$L(murl,""/""),mfil=$P(murl,""/"",nsl)"
^ZWCmcd("devRM-top","mcod",8)="      I mfil'["".m"" D b^dv(""Err m file name *.m ?"",""mfil,murl,nsl"")"
^ZWCmcd("devRM-top","mcod",9)="      S mrou=$P(mfil,"".m"")"
^ZWCmcd("devRM-top","mcod",10)="      S z=$ZPARSE(murl) I z="""" D b^dv(""Err murl does not exist"",""murl"") Q"
^ZWCmcd("devRM-top","mcod",11)="      S Q=$$^devRD(murl,,""RM"")"
^ZWCmcd("devRM-top","mcod",12)="      ;"
^ZWCmcd("devRvn","mcod",1)="devRvn(RR,VL) ;CKW/ESC i1mar23 gmsa./ rdev3/ ;20330301-93;Pick vn/VL out of file/RM()"
^ZWCmcd("devRvn","mcod",2)=";"
^ZWCmcd("devRvn","mcod",3)=";"
^ZWCmcd("devRvn","mcod",4)=";"
^ZWCmcd("devRvn-Q","mcod",17)=";*      "
^ZWCmcd("devRvn-Q","mcod",18)=";*"
^ZWCmcd("devRvn-Q","mcod",19)="Q     Q:$Q Q Q:Q="""""
^ZWCmcd("devRvn-Qbug","mcod",20)="Qbug  D qd Q:$Q Q  Q"
^ZWCmcd("devRvn-qd","mcod",21)="qd   D b^dv(""Err ""_$T(+0),""Q"") Q"
^ZWCmcd("devRvn-qd","mcod",22)=";*"
^ZWCmcd("devRvn-qd","mcod",23)=""
^ZWCmcd("devRvn-qd","mcod",24)="        "
^ZWCmcd("devRvn-qd","mcod",25)="      "
^ZWCmcd("devRvn-top","mcod",5)="top   NEW Q I $D(RR)<9 S Q=""arg ^""_$T(+0) G Qbug"
^ZWCmcd("devRvn-top","mcod",6)="      ; Screen for which vn to return aas local (?vs VNr"
^ZWCmcd("devRvn-top","mcod",7)="      S VL=$G(VL) KILL VNv"
^ZWCmcd("devRvn-top","mcod",8)="      I VL'="""" F vi=1:1:$L(VL,"","") S vn=$P(VL,"","",vi) I vn'="""" S VNv(vn)=vi KILL @vn"
^ZWCmcd("devRvn-top","mcod",9)="      ;"
^ZWCmcd("devRvn-top","mcod",10)="      F ri=1:1 Q:'$D(RR(ri))  S L=$G(RR(ri)) I L'="""" DO"
^ZWCmcd("devRvn-top","mcod",11)="        .I L'["":"" Q"
^ZWCmcd("devRvn-top","mcod",12)="        .S vn=$P(L,"":""),val=$P(L,"":"",2,99) "
^ZWCmcd("devRvn-top","mcod",13)="        .I vn=""""!(val="""")  Q"
^ZWCmcd("devRvn-top","mcod",14)="        .S VNr(vn)=val"
^ZWCmcd("devRvn-top","mcod",15)="        .I $D(VNv(vn)) S @vn=val,VNr(vn,""ri"")=ri"
^ZWCmcd("devRvn-top","mcod",16)="      Goto Q"
^ZWCmcd("devTdevu","mcod",1)="devTdevu()  ;CKW/ESC  i28feb19  ; 20190228-49 ; Full Seq of devU Ma Tests"
^ZWCmcd("devTdevu-TA","mcod",2)="  ;*$$"
^ZWCmcd("devTdevu-TA","mcod",3)="  ;"
^ZWCmcd("devTdevu-TA","mcod",4)="  ;   Test Automation Sequence  devU Tests"
^ZWCmcd("devTdevu-TA","mcod",5)="TA()    S Qta=0"
^ZWCmcd("devTdevu-TA","mcod",6)="      DO  I Q'="""" S Qta=Qta+1"
^ZWCmcd("devTdevu-TA","mcod",7)="        .NEW Qta S Q=$$^devTes"
^ZWCmcd("devTdevu-TA","mcod",8)="      DO  I Q'="""" S Qta=Qta+1"
^ZWCmcd("devTdevu-TA","mcod",9)="        .NEW Qta S Q=$$^devTerr"
^ZWCmcd("devTdevu-TA","mcod",10)="      DO  I Q'="""" S Qta=Qta+1"
^ZWCmcd("devTdevu-TA","mcod",11)="         .NEW Qta S Q=$$TA^fdslink"
^ZWCmcd("devTdevu-TA","mcod",12)="      Q Qta"
^ZWCmcd("devTdevu-TES","mcod",13)=";*  Menu Entry point ^fdMenu tdevu.  $test"
^ZWCmcd("devTdevu-TES","mcod",14)="TES  S Q=$$TA"
^ZWCmcd("devTdevu-TES","mcod",15)="     USE $P W:$X ! W ""Testing All of devU  ^dev* in gmsa/ rudev/- """
^ZWCmcd("devTdevu-TES","mcod",16)="     I Q="""" W "" Passed!"",!"
^ZWCmcd("devTdevu-TES","mcod",17)="     E  W "" Failed "",Q,!"
^ZWCmcd("devTdevu-TES","mcod",18)="     Q"
^ZWCmcd("devTes","mcod",1)="devTes()  ;CKW/ESC  i26feb19 ; 20190226-96 ; Test ^devIO"
^ZWCmcd("devTes","mcod",2)="  ;  in gmsa/  rudev/   "
^ZWCmcd("devTes","mcod",3)="  ; pass/fail   RefBy:  ^fdMenu  tdu.  in $test"
^ZWCmcd("devTes","mcod",4)="  ;  Needs devlog  for actual errors, test failures, issues, fixes"
^ZWCmcd("devTes-A","mcod",5)="A  S Qn=0"
^ZWCmcd("devTes-A","mcod",6)="  S Q=$$tdef D cQ(""defaults test"")"
^ZWCmcd("devTes-A","mcod",7)="  S Q=$$targ D cQ(""std args r stem"")"
^ZWCmcd("devTes-A","mcod",8)="  S Q=$$tmpj D cQ(""test Mpj sr"")"
^ZWCmcd("devTes-A","mcod",9)="  S Q=$$tls D cQ(""test ls Write/Read temp"")"
^ZWCmcd("devTes-A","mcod",10)="  USE $P W:$X ! W ""devU Testing ^devTes - """
^ZWCmcd("devTes-A","mcod",11)="  I 'Qn Q """""
^ZWCmcd("devTes-A","mcod",12)="  Q Qn  "
^ZWCmcd("devTes-T","mcod",15)=";*  ext ref no $$ return   RefBy:  ^fdMenu  tdu.  in $test"
^ZWCmcd("devTes-T","mcod",16)="T   S Qt=$$devTes"
^ZWCmcd("devTes-T","mcod",17)="    I Qt W ""Failed: "",Qt,!"
^ZWCmcd("devTes-T","mcod",18)="    E  W ""Passed all."",!"
^ZWCmcd("devTes-T","mcod",19)="    Q"
^ZWCmcd("devTes-Tls","mcod",78)=";*      "
^ZWCmcd("devTes-Tls","mcod",79)="Tls(Qt,dev,Fil,Fol,Base,xstem)"
^ZWCmcd("devTes-Tls","mcod",80)="  S Qv=$G(Q) NEW Q  NEW Qd,Qf,Qp,Qb,Qs,Qq"
^ZWCmcd("devTes-Tls","mcod",81)="  S Q=""""   ; Tricky Qv= 'Q by caller', save before new Q, hides caller Q"
^ZWCmcd("devTes-Tls","mcod",82)="  I $G(dev)'="""" S Qd=(dev=$G(devls)) I 'Qd S Q=Q_""ls-devErr,"""
^ZWCmcd("devTes-Tls","mcod",83)="  I $G(Fil)'="""" S Qf=(Fil=$G(iFil)) I 'Qf S Q=Q_""ls-filErr,""  D b^dv(""Tls Err "",""Fil,iFil,lsFil"")"
^ZWCmcd("devTes-Tls","mcod",84)="  I $G(Fol)'="""" S Qp=(Fol=$G(lsFol)) I 'Qp S Q=Q_""ls-folErr,"" D b^dv(""Tr Err "",""Fol,iFol,lsFol"")"
^ZWCmcd("devTes-Tls","mcod",85)="  I $G(Base)'="""" S Qb=(Base=$G(lsBase)) I 'Qb S Q=Q_""ls-BaseErr,"""
^ZWCmcd("devTes-Tls","mcod",86)="  I $G(stem)'="""" S Qs=(xstem=$G(stem)) I 'Qs S Q=Q_""ls-stemErr,"""
^ZWCmcd("devTes-Tls","mcod",87)="  I $G(Qt)'="""" S Qq=(Qt=Qv) I 'Qq S Q=Q_"" Diff Q Err."" "
^ZWCmcd("devTes-Tls","mcod",88)="  Q Q"
^ZWCmcd("devTes-Tr","mcod",56)=";*"
^ZWCmcd("devTes-Tr","mcod",57)=";* Test values vs r* vec vars why were ref by name call args ?"
^ZWCmcd("devTes-Tr","mcod",58)=";  skip test if null input (not test for val="""" )"
^ZWCmcd("devTes-Tr","mcod",59)="Tr(Qt,dev,Fil,Fol,Base,xstem)"
^ZWCmcd("devTes-Tr","mcod",60)="  S Qv=$G(Q) NEW Q  NEW Qd,Qf,Qp,Qb,Qs,Qq"
^ZWCmcd("devTes-Tr","mcod",61)="  S Q=""""   ; Tricky Qv= 'Q by caller', save before new Q, hides caller Q"
^ZWCmcd("devTes-Tr","mcod",62)="  I $G(dev)'="""" S Qd=(dev=$G(devr)) I 'Qd S Q=Q_""devErr,"""
^ZWCmcd("devTes-Tr","mcod",63)="  I $G(Fil)'="""" S Qf=(Fil=$G(rFil)) I 'Qf S Q=Q_""r-filErr,"" D b^dv(""Tr Fil Err "",""Fil,iFil,rFil"")"
^ZWCmcd("devTes-Tr","mcod",64)="  I $G(Fol)'="""" S Qp=(Fol=$G(rFol)) I 'Qp S Q=Q_""r-folErr,"" D b^dv(""Tr Fol Err "",""Fol,iFol,rFol"")"
^ZWCmcd("devTes-Tr","mcod",65)="  I $G(Base)'="""" S Qb=(Base=$G(rBase)) I 'Qb S Q=Q_""BaseErr,"""
^ZWCmcd("devTes-Tr","mcod",66)="  I $G(xstem)'="""" S Qs=(xstem=$G(stem)) I 'Qs S Q=Q_""stemErr,"""
^ZWCmcd("devTes-Tr","mcod",67)="  I $G(Qt)'="""" S Qq=(Qt=Qv) I 'Qq S Q=Q_"" Diff Q Err."" "
^ZWCmcd("devTes-Tr","mcod",68)="  I Q'="""" S Q=""Tr:""_Q"
^ZWCmcd("devTes-Tr","mcod",69)="  Q Q"
^ZWCmcd("devTes-cQ","mcod",13)="cQ(testid) I Q'="""" D ^dv(""Failed "",""testid,Q"") S Qn=Qn+1"
^ZWCmcd("devTes-cQ","mcod",14)="     Q "
^ZWCmcd("devTes-ta1","mcod",42)="ta1()   KILL (Qn,Qarg) S Q=$$lsW^devIO("""",""log/"")  ; two args lsFil,lsFol"
^ZWCmcd("devTes-ta1","mcod",43)="        I Q'="""" S Qarg=Qarg_Q_"","" Q Qarg"
^ZWCmcd("devTes-ta1","mcod",44)="      USE devls W ""Test Text into devls - "",devls,!!  ; Quickie Write to devls"
^ZWCmcd("devTes-ta1","mcod",45)="      D CF^devIO(devls)"
^ZWCmcd("devTes-ta1","mcod",46)="   KILL (Qn,Qarg) S Q=$$lsRLS^devIO("""",""log/"")  ; two args lsFil,lsFol : RLS()"
^ZWCmcd("devTes-ta1","mcod",47)="      I Q'="""" S Qarg=Qarg_Q_"","" Q Qarg"
^ZWCmcd("devTes-ta1","mcod",48)="      I $D(RLS)=11,RLS,RLS(1)[""Test Text"" S Q="""""
^ZWCmcd("devTes-ta1","mcod",49)="      E  S Q=""ls Write/Read failed. "",Qarg=Qarg_Q  Q Qarg"
^ZWCmcd("devTes-ta1","mcod",50)="      S Q=$$Tls(Q,devls,lsFil,""log/"",lsBase) I Q'="""" S Qarg=Qarg_Q_"",""   "
^ZWCmcd("devTes-ta1","mcod",51)="   Q Qarg"
^ZWCmcd("devTes-targ","mcod",32)=";*$$"
^ZWCmcd("devTes-targ","mcod",33)="targ()  S Qarg="""""
^ZWCmcd("devTes-targ","mcod",34)="   KILL (Qn,Qarg) S Q=$$rRD^devIO(""abc.txt"",""dbg/"")  ; two args rFil,rFol"
^ZWCmcd("devTes-targ","mcod",35)="      S Q=$$Tr("""",devr,rFil,rFol,rBase,""r"") I Q'="""" S Qarg=Qarg_Q_"","""
^ZWCmcd("devTes-targ","mcod",36)="   S Qarg=$$ta1"
^ZWCmcd("devTes-targ","mcod",37)="   ; same diff entry"
^ZWCmcd("devTes-targ","mcod",38)="   KILL (Qn,Qarg) S Q=$$^devIO(""r"",""R"",""abc.txt"",""dbg/"")  ; two args rFil,rFol"
^ZWCmcd("devTes-targ","mcod",39)="      S Q=$$Tr("""",devr,rFil,rFol,rBase,""r"") I Q'="""" S Qarg=Qarg_Q_"",""   "
^ZWCmcd("devTes-targ","mcod",40)="   Q Qarg"
^ZWCmcd("devTes-targ","mcod",41)="   ;  ls W then Read"
^ZWCmcd("devTes-tdef","mcod",20)=";*"
^ZWCmcd("devTes-tdef","mcod",21)=";*$$   Test defaults  Tr args are expected values  for stem:r See Tls for stem:ls"
^ZWCmcd("devTes-tdef","mcod",22)="tdef()  S Qdef="""""
^ZWCmcd("devTes-tdef","mcod",23)="   KILL (Qn,Qdef)   S Q=$$rRD^devIO("""","""")  ; rFil,rFol default"
^ZWCmcd("devTes-tdef","mcod",24)="       S Q=$$Tr("""",""/home/kw/km6a/"") I Q'="""" S Qdef=Q_"","""
^ZWCmcd("devTes-tdef","mcod",25)="   KILL (Qn,Qdef)   S Q=$$^devIO(""r"","""")  ; rFil,rFol default"
^ZWCmcd("devTes-tdef","mcod",26)="       S Q=$$Tr("""",""/home/kw/km6a/"")  I Q'="""" S Qdef=Qdef_Q_"","""
^ZWCmcd("devTes-tdef","mcod",27)="   S Qr=$$devrRD^devIO(rFil,rFol)  ; : RD() test file in dbg/  4 lines"
^ZWCmcd("devTes-tdef","mcod",28)="       I Qr'="""" S Qdef=Qdef_""rRD:""_Qr_"","""
^ZWCmcd("devTes-tdef","mcod",29)="       I $D(RD)=11,RD=6,RD(1)[""^devTes Tests this line."" S Qr="""""
^ZWCmcd("devTes-tdef","mcod",30)="       E  S Qdef=Qdef_Qr_"","""
^ZWCmcd("devTes-tdef","mcod",31)="   Q Qdef"
^ZWCmcd("devTes-tls","mcod",70)=";*  * * *  stem:ls"
^ZWCmcd("devTes-tls","mcod",71)=";*$$"
^ZWCmcd("devTes-tls","mcod",72)="tls() S Qls="""""
^ZWCmcd("devTes-tls","mcod",73)="      KILL (Qn,Qls) S Q=$$^devIO(""ls"",""W"")  ; def lsFil,lsFol"
^ZWCmcd("devTes-tls","mcod",74)="        I Q'="""" S Qls=Qls+q"
^ZWCmcd("devTes-tls","mcod",75)="        S Qt=$$Tls("""",devls,,,lsBase,""ls"")"
^ZWCmcd("devTes-tls","mcod",76)="          I Qt'="""" S Qls=Qls+1"
^ZWCmcd("devTes-tls","mcod",77)="      Q Qls"
^ZWCmcd("devTes-tmpj","mcod",52)=";*$$  $zro : Mpj (sic) vs specify in B0^<Mpj>Idev"
^ZWCmcd("devTes-tmpj","mcod",53)="tmpj(); ; test sr in isolation"
^ZWCmcd("devTes-tmpj","mcod",54)="      ;D Mpj^devIO   ; both (same ?)"
^ZWCmcd("devTes-tmpj","mcod",55)="      Q """""
^ZWCmcd("devTs","mcod",1)="devTs  ;CKW/ESC  i1mar19 ; 20190301-10 ; Test SR"
^ZWCmcd("devTs","mcod",2)="  ;  in gmsa/  rudev/"
^ZWCmcd("devTs","mcod",3)="  ;"
^ZWCmcd("devTs","mcod",4)="  ;"
^ZWCmcd("devTs-SE","mcod",5)=";*  Qn  Save Error & Count  ?Call by Ref to incr, vs implicit arg ???"
^ZWCmcd("devTs-SE","mcod",6)=";  implicit Qn, in, update/incr"
^ZWCmcd("devTs-SE","mcod",7)="SE(M,Qe,VL) S Qn=$G(Qn)+1  ; just dont crash"
^ZWCmcd("devTs-SE","mcod",8)="      S:$G(E)="""" E=""?"" S QER(E)=Qe"
^ZWCmcd("devTs-SE","mcod",9)="      I $G(VL) DO"
^ZWCmcd("devTs-SE","mcod",10)="        .F vi=1:1:$L(VL,"","") S vn=$P(VL,"","",vi),QER(Qe,vn)=$G(@vn)  ; KILL @vn  ;? Clean Up/No reuse"
^ZWCmcd("devTs-SE","mcod",11)="      Q"
^ZWCmcd("devTs-SE","mcod",12)=";*"
^ZWCmcd("devTs-SE","mcod",13)=""
^ZWCmcd("devWF","mcod",1)="devWF(RIL,devwf) ;CKW/ESC  i23aug20 gmsa/ rd2io/ ; 20200823-82 ; Write File from Array"
^ZWCmcd("devWF","mcod",2)=";$$Q     Arg .RIL by ref  vs Array name ala devRD"
^ZWCmcd("devWF","mcod",3)=";"
^ZWCmcd("devWF-A","mcod",4)="A    NEW Q,nW,wi,L  S Q="""""
^ZWCmcd("devWF-A","mcod",5)="     ;"
^ZWCmcd("devWF-A","mcod",6)="     I $G(RIL)="""" S Q=""RIL missing"" D b^dv(Q,""RIL,devwf"") Q Q"
^ZWCmcd("devWF-A","mcod",7)="     S Q=$$OFW^devIO(devwf) I Q'="""" D b^dv(""Err open to write "",""Q,devwf"") Q Q"
^ZWCmcd("devWF-A","mcod",8)="     ;"
^ZWCmcd("devWF-A","mcod",9)="     DO  ; Do one of two modes"
^ZWCmcd("devWF-A","mcod",10)="        .I $D(RIL)'>9 D IR1 Q"
^ZWCmcd("devWF-A","mcod",11)="        .D IR2"
^ZWCmcd("devWF-A","mcod",12)="     S Q=$$CFM^devIO(devwf) I Q'="""" Q Q"
^ZWCmcd("devWF-A","mcod",13)="     USE $P"
^ZWCmcd("devWF-A","mcod",14)="     Q Q"
^ZWCmcd("devWF-IR1","mcod",15)=";*  Arg by Ref .RIL variant"
^ZWCmcd("devWF-IR1","mcod",16)="IR1  S nW=@RIL"
^ZWCmcd("devWF-IR1","mcod",17)="     F wi=1:1:nW S L=$G(RIL(wi)) USE devwf W L,!"
^ZWCmcd("devWF-IR1","mcod",18)="     Q"
^ZWCmcd("devWF-IR2","mcod",19)=";* Passes Array name as literal RIL     "
^ZWCmcd("devWF-IR2","mcod",20)="IR2  S nW=RIL  ; # nodes in @RIL"
^ZWCmcd("devWF-IR2","mcod",21)="     F wi=1:1:nW S L=$G(RIL(wi)) USE devwf W L,!"
^ZWCmcd("devWF-IR2","mcod",22)="     Q"
^ZWCmcd("devWF-Q","mcod",33)="Q    I Q'="""" D b^dv(""Err TWF"",""Q,dev"")"
^ZWCmcd("devWF-Q","mcod",34)="     Q"
^ZWCmcd("devWF-TWF","mcod",23)=";*  twf. in MRmenu"
^ZWCmcd("devWF-TWF","mcod",24)="TWF  KILL WM"
^ZWCmcd("devWF-TWF","mcod",25)="     S WM(1)=""This is a test"""
^ZWCmcd("devWF-TWF","mcod",26)="     S WM(2)=""This is more of the test"""
^ZWCmcd("devWF-TWF","mcod",27)="     S WM=2"
^ZWCmcd("devWF-TWF","mcod",28)="     S dev=""WMtest.txt""  ; in gmma/x/"
^ZWCmcd("devWF-TWF","mcod",29)="     S dev2=""WMtest2.txt""  ; in gmma/x/"
^ZWCmcd("devWF-TWF","mcod",30)="     S Q=$$^devWF(.WM,dev) I Q'="""" G Q"
^ZWCmcd("devWF-TWF","mcod",31)="     S Q=$$devWF(""WM"",dev2) I Q'="""" G Q"
^ZWCmcd("devWF-TWF","mcod",32)="     ;"
^ZWCmcd("deverr","mcod",1)="deverrX(M,VL)  ;CKW/ESC  gmsa/ rd2io/  ; 20180916-48 ; ER sr log to deverr, nER Count"
^ZWCmcd("deverr","mcod",2)="     ; Entry labels: ^, init, cler    first label temp not deverr to avoid confict refs"
^ZWCmcd("deverr","mcod",3)="     ;      See deverr^devIO like other profiles"
^ZWCmcd("deverr","mcod",4)="     ;"
^ZWCmcd("deverr","mcod",5)="  I $G(M)="""" S M=""Err? """
^ZWCmcd("deverr","mcod",6)="  I $G(VL)="""" S VL="""""
^ZWCmcd("deverr","mcod",7)="  NEW D,vi,vn,val,C1,C2 S D=$IO"
^ZWCmcd("deverr","mcod",8)="  S C1=$$^dvby()  ;C1 ^dver, C2 caller"
^ZWCmcd("deverr","mcod",9)="    S M=""^""_C2_"" ""_M"
^ZWCmcd("deverr","mcod",10)="    ;I $I=$P W !!,""RefBy "",C1,"" and "",C2,!"
^ZWCmcd("deverr","mcod",11)="  I $G(deverr)="""" S deverr="""""
^ZWCmcd("deverr","mcod",12)="  I $G(deverr)'="""",$G(M)'=""""  DO  ;"
^ZWCmcd("deverr","mcod",13)="    .S ^MNU(0,""nER"",deverr,M)=$G(^MNU(0,""nER"",deverr,M))+1  ; sic Non-specific to process"
^ZWCmcd("deverr","mcod",14)="  I deverr'="""" USE deverr  ;USE:$G(deverr)'="""" deverr "
^ZWCmcd("deverr","mcod",15)="  E  USE $P"
^ZWCmcd("deverr","mcod",16)="  W:$X ! "
^ZWCmcd("deverr","mcod",17)="  I deverr'="""" W !"
^ZWCmcd("deverr","mcod",18)="  S:$G(M)="""" M=""Undef Error"" "
^ZWCmcd("deverr","mcod",19)="  W M,!"
^ZWCmcd("deverr","mcod",20)="  I $G(VL)'="""" F vi=1:1:$L(VL,"","") S vn=$P(VL,"","",vi) I vn?1A.9an DO"
^ZWCmcd("deverr","mcod",21)="        .S val=$G(@vn) S:$D(@vn)=0 val=""UNDEF"" S:$D(@vn)>2 val=""ARRAY"""
^ZWCmcd("deverr","mcod",22)="        .I $L(val)>60 S val=""Trunc:""_$E(val,1,60)"
^ZWCmcd("deverr","mcod",23)="        .W:$X ! W ""  "",vn,""='"",val,""' "",!"
^ZWCmcd("deverr","mcod",24)="  USE D"
^ZWCmcd("deverr","mcod",25)="  Q"
^ZWCmcd("deverr","mcod",26)=";"
^ZWCmcd("deverr","mcod",27)=";  Depends upon deverr  but if UNDEF, uses $P or USE 0  conveniently"
^ZWCmcd("deverr","mcod",28)=";  If not null or zero, deverr must be opened already. See deverr^dver"
^ZWCmcd("deverr","mcod",29)=";"
^ZWCmcd("deverr","mcod",30)="; RefBy: 8mar20 km6a/"
^ZWCmcd("deverr-CLD","mcod",91)=";*  Close deverr if its open"
^ZWCmcd("deverr-CLD","mcod",92)="CLD(dev)  ZSH ""D"":A  KILL D MERGE D=A(""D"") KILL A"
^ZWCmcd("deverr-CLD","mcod",93)="      F i=1:1 S D=$G(D(i)) Q:D=""""  I D[deverr,D[""OPEN"" Q"
^ZWCmcd("deverr-CLD","mcod",94)="      Q D"
^ZWCmcd("deverr-CLD","mcod",95)=";*"
^ZWCmcd("deverr-CLD","mcod",96)=""
^ZWCmcd("deverr-CLD","mcod",97)="      "
^ZWCmcd("deverr-CLD","mcod",98)="      "
^ZWCmcd("deverr-DOCTYPE","mcod",58)="DOCTYPE ;W ""<!DOCTYPE html PUBLIC """"-//W3C//DTD HTML 5.01//EN"""" """"http://www.w3.org/TR/html5/strict.dtd"""">"",!"
^ZWCmcd("deverr-DOCTYPE","mcod",59)="        W ""<!DOCTYPE html>"",!   ;HTML5"
^ZWCmcd("deverr-DOCTYPE","mcod",60)=" Q       "
^ZWCmcd("deverr-GetCaller","mcod",31)="GetCaller ZSH ""S"":%ZSH S ZL=$ZL-2,Caller=%ZSH(""S"",ZL)"
^ZWCmcd("deverr-GetCaller","mcod",32)="      U $P W !!,""^dver Caller:"",Caller,!"
^ZWCmcd("deverr-GetCaller","mcod",33)="      Q"
^ZWCmcd("deverr-GetCaller","mcod",34)=";"
^ZWCmcd("deverr-GetCaller","mcod",35)=";  eg.  S deverr=$$deverr^dvIpg(""TA-^""_$T(+0)_""-err"",,""T2DM"")  ; in TA^fqSI"
^ZWCmcd("deverr-GetCaller","mcod",36)=";         which also OPENs deverr !"
^ZWCmcd("deverr-GetCaller","mcod",37)=";  See deverr^devIO  for init and first write top of page"
^ZWCmcd("deverr-HdErr","mcod",53)=";* RefBy:  deverr^devIO"
^ZWCmcd("deverr-HdErr","mcod",54)="HdErr  USE deverr"
^ZWCmcd("deverr-HdErr","mcod",55)="       D DOCTYPE"
^ZWCmcd("deverr-HdErr","mcod",56)="       D html,hd"
^ZWCmcd("deverr-HdErr","mcod",57)="       Q"
^ZWCmcd("deverr-TI","mcod",69)="TI   W ""<title>"",""Err-""_$G(CBc),""</title>"",!"
^ZWCmcd("deverr-Xinit","mcod",38)="Xinit(iFil,iFol,CBc) I $G(CBc)="""" S CBc="""""
^ZWCmcd("deverr-Xinit","mcod",39)="    KILL ^MNU(0,""nER"")  ; init Er Msg count, sic MGbl somewhere"
^ZWCmcd("deverr-Xinit","mcod",40)="    S errFil=""dver-Test-Errors""_CBc I CBc="""" S CBc=""^?""  ;Not in deverr"
^ZWCmcd("deverr-Xinit","mcod",41)="    I $G(iFil)'="""" S errFil=iFil"
^ZWCmcd("deverr-Xinit","mcod",42)="    S Q=$$err^devIO(errFil,$G(iFol))  ; : deverr"
^ZWCmcd("deverr-Xinit","mcod",43)="      ;I Q'="""" D b^dv(""Err Opening dver deverr"",""Q,deverr"") Q"
^ZWCmcd("deverr-Xinit","mcod",44)="    I $$devopn(deverr)'="""" S Q=$$OFW^devIO(deverr) I Q'="""" Q ""Unable to Open ""_deverr"
^ZWCmcd("deverr-Xinit","mcod",45)="    USE deverr"
^ZWCmcd("deverr-Xinit","mcod",46)="    D HdErr"
^ZWCmcd("deverr-Xinit","mcod",47)="    Q """"  ; return var in caller scope and $$deverr OPEN, started"
^ZWCmcd("deverr-cler","mcod",78)=";*   "
^ZWCmcd("deverr-cler","mcod",79)=";*  End writing to deverr-  ala clog     "
^ZWCmcd("deverr-cler","mcod",80)="cler  I $G(deverr)="""" Q"
^ZWCmcd("deverr-cler","mcod",81)="      I $$CLD(deverr)="""" Q  ;was not open"
^ZWCmcd("deverr-cler","mcod",82)="      USE deverr D fterr,htmlq"
^ZWCmcd("deverr-cler","mcod",83)="      I deverr'="""",$G(devlog)'=deverr CLOSE deverr"
^ZWCmcd("deverr-cler","mcod",84)="      USE $P W:$X ! W ""  Completed Error file - """
^ZWCmcd("deverr-cler","mcod",85)="      I '$D(^MNU(0,""nER"")) W ""  No Errors!  "",!"
^ZWCmcd("deverr-cler","mcod",86)="      E   DO  ;"
^ZWCmcd("deverr-cler","mcod",87)="        .S dev="""" F  S dev=$O(^MNU(0,""nER"",dev))  Q:dev=""""  DO"
^ZWCmcd("deverr-cler","mcod",88)="           ..S M=0 F  S M=$O(^MNU(0,""nER"",dev,M)) Q:M=""""  S n=^(M)  W:$X ! W ""   "",n,""x "",?5,M,!"
^ZWCmcd("deverr-cler","mcod",89)="      W:$X ! W ""   "",deverr,!"
^ZWCmcd("deverr-cler","mcod",90)="      Q"
^ZWCmcd("deverr-css","mcod",71)="css  Q"
^ZWCmcd("deverr-devopn","mcod",48)=";*  Test if dev open"
^ZWCmcd("deverr-devopn","mcod",49)="devopn(dev)  I $G(dev)="""" D bug^dv Q"
^ZWCmcd("deverr-devopn","mcod",50)="    NEW ZSH,D   ZSH ""d"":ZSH    MERGE D=ZSH(""D"")"
^ZWCmcd("deverr-devopn","mcod",51)="    S dc=$G(D(dev)) I dc[""OPEN"" Q """""
^ZWCmcd("deverr-devopn","mcod",52)="    Q ""NotOpen: ""_dc"
^ZWCmcd("deverr-fterr","mcod",76)="fterr  W !,""End of Error file -"",deverr,""  at "",$ZD($H,""24:60 DDMONYY""),!"
^ZWCmcd("deverr-fterr","mcod",77)="     Q"
^ZWCmcd("deverr-hd","mcod",64)="hd   W:$X ! W ""<head>"" D TI,js,css W !,""</head>"",!"
^ZWCmcd("deverr-hd","mcod",65)="     W ""<h1>"",""Error Report File"""
^ZWCmcd("deverr-hd","mcod",66)="     I $G(CBc)'="""" W "" - "",CBc,"" """
^ZWCmcd("deverr-hd","mcod",67)="     W ""</h1>"",!,""<pre>"",!"
^ZWCmcd("deverr-hd","mcod",68)="     Q"
^ZWCmcd("deverr-html","mcod",61)=";*"
^ZWCmcd("deverr-html","mcod",62)="html W:$X ! W ""<html>"",!"
^ZWCmcd("deverr-html","mcod",63)="     Q"
^ZWCmcd("deverr-htmlq","mcod",72)=";* * *"
^ZWCmcd("deverr-htmlq","mcod",73)=";*"
^ZWCmcd("deverr-htmlq","mcod",74)="htmlq  W:$X ! W ""</pre>"",!,""</html>"",!"
^ZWCmcd("deverr-htmlq","mcod",75)="     Q"
^ZWCmcd("deverr-js","mcod",70)="js   Q"
^ZWCmcd("devlog","mcod",1)="devlogX(M,VL)  ;CKW/ESC  i10July18 gmsa/ rd2io/ ; 20181114-50 ; Log sr  devlog  HGen ?"
^ZWCmcd("devlog","mcod",2)="  ;                 Refs:  ^dv, "
^ZWCmcd("devlog","mcod",3)="  ;  temp devlogX to avoid errs to devlog^devlog NOT top  21mar19"
^ZWCmcd("devlog","mcod",4)="  ;"
^ZWCmcd("devlog","mcod",5)="  I $G(VL)="""" S VL="""""
^ZWCmcd("devlog","mcod",6)="  I $G(M)="""" S M=""Logging Entry nos"" I VL="""" D b^dv(""No params for ^dvLog"") Q"
^ZWCmcd("devlog","mcod",7)="  S ^MNU(0,""nLG"",M)=$G(^MNU(0,""nLG"",M))+1"
^ZWCmcd("devlog","mcod",8)="  NEW D,vi,vn,val "
^ZWCmcd("devlog","mcod",9)="      S D=$IO "
^ZWCmcd("devlog","mcod",10)="      USE $G(devlog) W:$X ! W M,!   ; If devlog null or undef -> USE 0 ($P)"
^ZWCmcd("devlog","mcod",11)="  I $G(VL)'="""" F vi=1:1:$L(VL,"","") S vn=$P(VL,"","",vi) I vn?1A.9an DO"
^ZWCmcd("devlog","mcod",12)="        .S val=$G(@vn) S:$D(@vn)=0 val=""UNDEF"" S:$D(@vn)>2 val=""ARRAY"""
^ZWCmcd("devlog","mcod",13)="        .I $L(val)>60 S val=""Trunc:""_$E(val,1,60)"
^ZWCmcd("devlog","mcod",14)="        .W:$X ! W ""  "",vn,""='"",val,""' "",!"
^ZWCmcd("devlog","mcod",15)="  USE D "
^ZWCmcd("devlog","mcod",16)="  Q"
^ZWCmcd("devlog","mcod",17)=";"
^ZWCmcd("devlog","mcod",18)=";  Depends upon devlog being defined and OPEN already"
^ZWCmcd("devlog","mcod",19)=";  If not open the USE devlog crashes"
^ZWCmcd("devlog","mcod",20)=";    -- recog devlog not null and not open ?"
^ZWCmcd("devlog","mcod",21)=";    -- could trap error and recover gracefully ?"
^ZWCmcd("devlog","mcod",22)=";"
^ZWCmcd("devlog","mcod",23)=";"
^ZWCmcd("devlog-CLD","mcod",71)=";*"
^ZWCmcd("devlog-CLD","mcod",72)=";*  Detect if dev/devlog is open, ret null if it is not open"
^ZWCmcd("devlog-CLD","mcod",73)="CLD(dev)  NEW A,D,i   ZSH ""D"":A  KILL D MERGE D=A(""D"") KILL A"
^ZWCmcd("devlog-CLD","mcod",74)="      F i=1:1 S D=$G(D(i)) Q:D=""""  I D[dev,D[""OPEN"" Q  ;D is not null, it was open"
^ZWCmcd("devlog-CLD","mcod",75)="      Q D"
^ZWCmcd("devlog-DOCTYPE","mcod",41)="DOCTYPE ;W ""<!DOCTYPE html PUBLIC """"-//W3C//DTD HTML 5.01//EN"""" """"http://www.w3.org/TR/html5/strict.dtd"""">"",!"
^ZWCmcd("devlog-DOCTYPE","mcod",42)="        W ""<!DOCTYPE html>"",!   ;HTML5"
^ZWCmcd("devlog-DOCTYPE","mcod",43)=" Q       "
^ZWCmcd("devlog-HdLog","mcod",36)=";*    "
^ZWCmcd("devlog-HdLog","mcod",37)=";* RefBy: devlog^devIO  "
^ZWCmcd("devlog-HdLog","mcod",38)="HdLog  D DOCTYPE"
^ZWCmcd("devlog-HdLog","mcod",39)="       D html,hd"
^ZWCmcd("devlog-HdLog","mcod",40)="       Q"
^ZWCmcd("devlog-TI","mcod",50)="TI   W ""<title>"",""Log"",""</title>"",!"
^ZWCmcd("devlog-WnLG","mcod",68)=";* Write Log Types Summary  nLG nodes in ^MNU  Counts of each type of Message, to $P"
^ZWCmcd("devlog-WnLG","mcod",69)="WnLG  S M="""" F  S M=$O(^MNU(0,""nLG"",M)) Q:M=""""  S n=^(M)  W:$X ! W n,""x "",?5,M,!"
^ZWCmcd("devlog-WnLG","mcod",70)="      Q"
^ZWCmcd("devlog-clog","mcod",58)=";*   "
^ZWCmcd("devlog-clog","mcod",59)=";*  End writing to devlog  was  clog^dvlg   "
^ZWCmcd("devlog-clog","mcod",60)="clog  I $G(devlog)="""" Q"
^ZWCmcd("devlog-clog","mcod",61)="      NEW M,n"
^ZWCmcd("devlog-clog","mcod",62)="      I $$CLD(devlog)="""" Q  ;was not opened "
^ZWCmcd("devlog-clog","mcod",63)="      USE devlog D WnLG,ftlog,htmlq"
^ZWCmcd("devlog-clog","mcod",64)="      I devlog'="""" CLOSE devlog"
^ZWCmcd("devlog-clog","mcod",65)="      USE $P W:$X ! W ""Completed Log file -"",devlog,!"
^ZWCmcd("devlog-clog","mcod",66)="      I $D(^MNU(0,""nLG"")) D WnLG"
^ZWCmcd("devlog-clog","mcod",67)="      Q"
^ZWCmcd("devlog-css","mcod",52)="css  Q"
^ZWCmcd("devlog-ftlog","mcod",56)="ftlog  W !,""End of Log File -"",devlog,""  "",$ZD($H,""24:60 DDMONYY""),!"
^ZWCmcd("devlog-ftlog","mcod",57)="     Q"
^ZWCmcd("devlog-hd","mcod",47)="hd   W:$X ! W ""<head>"" D TI,js,css W !,""</head>"",!"
^ZWCmcd("devlog-hd","mcod",48)="     W ""<h1>Log File</h1>"",!,""<pre>"",!"
^ZWCmcd("devlog-hd","mcod",49)="     Q"
^ZWCmcd("devlog-html","mcod",44)=";*"
^ZWCmcd("devlog-html","mcod",45)="html W:$X ! W ""<html>"",!"
^ZWCmcd("devlog-html","mcod",46)="     Q"
^ZWCmcd("devlog-htmlq","mcod",53)=";* * *"
^ZWCmcd("devlog-htmlq","mcod",54)="htmlq  W:$X ! W ""</pre>"",!,""</html>"",!"
^ZWCmcd("devlog-htmlq","mcod",55)="     Q"
^ZWCmcd("devlog-js","mcod",51)="js   Q"
^ZWCmcd("devlog-zdevlog","mcod",24)=";*  See devlog^devIO  vs toplabel conflict !  Need ^devlog(M,VL)"
^ZWCmcd("devlog-zdevlog","mcod",25)="zdevlog(iFil,iFol,CBc)   KILL ^MNU(0,""nLG"") ; U 0 W:$X ! D ^dvstk W ""devlog^devlog  init call "",! B"
^ZWCmcd("devlog-zdevlog","mcod",26)="    I $G(iFol)="""" S iFol="""""
^ZWCmcd("devlog-zdevlog","mcod",27)="    I $G(iFil)="""" S iFil="""""
^ZWCmcd("devlog-zdevlog","mcod",28)="    I $G(CBc)="""" S CBc="""" S:iFil="""" iFil=""Log-"""
^ZWCmcd("devlog-zdevlog","mcod",29)="    E  S iFil=""dvLog-""_CBc"
^ZWCmcd("devlog-zdevlog","mcod",30)="    S devlog=$$devlog^devIO(iFil,iFol)"
^ZWCmcd("devlog-zdevlog","mcod",31)="    I $$devopn^dver(devlog)'="""" S Q=$$OFW^devio(devlog) I Q'="""" Q ""Unable to Open ""_devlog"
^ZWCmcd("devlog-zdevlog","mcod",32)="    S Q=$$OFW^devio(devlog)"
^ZWCmcd("devlog-zdevlog","mcod",33)="    USE devlog"
^ZWCmcd("devlog-zdevlog","mcod",34)="    D HdLog"
^ZWCmcd("devlog-zdevlog","mcod",35)="    Q """"  ; return var in caller scope and $$devlog OPEN, started"
^ZWCmcd("dgTES","mcod",1)="dgTES  ;CKW/ESC i6may20 gmsa/ rmgbFL3/ ; 20200506-81 ; tdm Tests for ^dgmg"
^ZWCmcd("dgTES","mcod",2)=";"
^ZWCmcd("dgTES","mcod",3)=";"
^ZWCmcd("dgTES","mcod",4)="; tst.  guMenu "
^ZWCmcd("dgTES-I1","mcod",11)=";*"
^ZWCmcd("dgTES-I1","mcod",12)="I1    KILL a,b,c,A"
^ZWCmcd("dgTES-I1","mcod",13)="      S tesFL=""a,b,c_A(aid)"""
^ZWCmcd("dgTES-I1","mcod",14)="      S a=1,c=3"
^ZWCmcd("dgTES-I1","mcod",15)="      S aid=11"
^ZWCmcd("dgTES-I1","mcod",16)="      Q"
^ZWCmcd("dgTES-T","mcod",17)=";*$$Q  Non-interactive test Pass/Fail"
^ZWCmcd("dgTES-T","mcod",18)="T(Qs) S Qs=$G(Qs) D I1"
^ZWCmcd("dgTES-T","mcod",19)="      D NFL^dgmg(tesFL)"
^ZWCmcd("dgTES-T","mcod",20)="      I $G(a)'="""" S Qs=Qs+1_""NFLa?"""
^ZWCmcd("dgTES-T","mcod",21)="      I $G(c)'="""" S Qs=Qs+1_""NFLc?"""
^ZWCmcd("dgTES-T","mcod",22)="      I $D(b)'=1,$G(b)'="""" S Qs=QS+1_""NFLb?"""
^ZWCmcd("dgTES-T","mcod",23)="      ;"
^ZWCmcd("dgTES-Tdgmg","mcod",5)="Tdgmg KILL  S Qs="""""
^ZWCmcd("dgTES-Tdgmg","mcod",6)="      S Q=$$T()"
^ZWCmcd("dgTES-Tdgmg","mcod",7)="      USE $P W:$X ! W ""Testing ^dgmg GFL, SFL, NFL - """
^ZWCmcd("dgTES-Tdgmg","mcod",8)="      I Q'="""" W ""Failed: "",Q,!"
^ZWCmcd("dgTES-Tdgmg","mcod",9)="      I Q=""""  W ""Passed."",!"
^ZWCmcd("dgTES-Tdgmg","mcod",10)="      Q"
^ZWCmcd("dgTES-gfl","mcod",29)="gfl   S a=99,b=98,c=97"
^ZWCmcd("dgTES-gfl","mcod",30)="      D GFL^dgmg(tesFL)"
^ZWCmcd("dgTES-gfl","mcod",31)="      I $G(a)'=""1"" S Qs=Qs+1_""GFLa?"""
^ZWCmcd("dgTES-gfl","mcod",32)="      I $G(b)'="""" S Qs=Qs+1_""GFLb?"""
^ZWCmcd("dgTES-gfl","mcod",33)="      I $G(c)'=3 S Qs=Qs+1_""GFLc?"""
^ZWCmcd("dgTES-gfl","mcod",34)="      ;"
^ZWCmcd("dgTES-gfl","mcod",35)="      Q Qs"
^ZWCmcd("dgTES-gfl","mcod",36)=";*"
^ZWCmcd("dgTES-gfl","mcod",37)="      "
^ZWCmcd("dgTES-sfl","mcod",24)="sfl   D I1"
^ZWCmcd("dgTES-sfl","mcod",25)="      D SFL^dgmg(tesFL)"
^ZWCmcd("dgTES-sfl","mcod",26)="      I $G(A(11,""a""))'=1 S Qs=Qs+1_""SFLa?"""
^ZWCmcd("dgTES-sfl","mcod",27)="      I $D(A(11,""b""))'=0 S Qs=Qs+1_""SFLb not del"""
^ZWCmcd("dgTES-sfl","mcod",28)="      ;"
^ZWCmcd("dgmg","mcod",1)="dgmg  ;CKW/ESC i6may20 gmsa/ rmgbFL3/ ; 20220612-80 ; MGbl sr ^dgmg  SFL/GFL"
^ZWCmcd("dgmg","mcod",2)=""
^ZWCmcd("dgmg","mcod",3)=";  No top entry"
^ZWCmcd("dgmg","mcod",4)=";"
^ZWCmcd("dgmg","mcod",5)=";"
^ZWCmcd("dgmg","mcod",6)=";Get Loc Vars via Super-FL-List ether in $P2_SFL (no G2), G2, or $P2_ of G2"
^ZWCmcd("dgmg-GFL","mcod",7)=";*$$Q  or D GFL^dgmg(..."
^ZWCmcd("dgmg-GFL","mcod",8)="GFL(SFL,G2)  NEW Q S Q="""" "
^ZWCmcd("dgmg-GFL","mcod",9)="  I $G(SFL)="""" S Q=""GFL null 1st arg"" D bug^dv(Q,""SFL,G2"") G QG"
^ZWCmcd("dgmg-GFL","mcod",10)="  NEW G,FL,vi,vn"
^ZWCmcd("dgmg-GFL","mcod",11)="  I $G(G2)'="""" S:G2[""_"" G2=$P(G2,""_"",2)"
^ZWCmcd("dgmg-GFL","mcod",12)="  S G=$P(SFL,""_"",2),FL=$P(SFL,""_"") "
^ZWCmcd("dgmg-GFL","mcod",13)="    I G="""" S G=G2 I G="""" S Q=""No MGbl Given"" D bug^dv(Q,""Q"") G QG"
^ZWCmcd("dgmg-GFL","mcod",14)="  I FL="""" S Q=""Degen SFL became null"" D bug^dv(Q,""SFL,FL,G2"") G QG"
^ZWCmcd("dgmg-GFL","mcod",15)="  F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) I vn'="""" S @vn=$G(@G@(vn))"
^ZWCmcd("dgmg-NFL","mcod",35)=";*"
^ZWCmcd("dgmg-NFL","mcod",36)=";*$$Q Set local fields/@vars -  @SFL null - Initialize"
^ZWCmcd("dgmg-NFL","mcod",37)="NFL(SFL,L2) NEW Q S Q="""" I $G(SFL)="""" S Q=""NFL 1st arg FL null"" D bug^dv(Q,""SFL,L2"") G QN"
^ZWCmcd("dgmg-NFL","mcod",38)="  NEW G,FL,%vi,%vn"
^ZWCmcd("dgmg-NFL","mcod",39)="  I $G(L2)'="""" S G=$P(L2,""_"",2),FL=$P(SFL,""_"",1)"
^ZWCmcd("dgmg-NFL","mcod",40)="  E  S G=$P(SFL,""_"",2),FL=$P(SFL,""_"") ;I G="""" S Q=""Net G null"" D bug^dv(,""FL,G,SFL,L2"") G QN"
^ZWCmcd("dgmg-NFL","mcod",41)="  I FL="""" S Q=""Net FL null"" D bug^dv(Q,""FL,G,SFL,L2"") G QN"
^ZWCmcd("dgmg-NFL","mcod",42)="  F %vi=1:1:$L(FL,"","") S %vn=$P(FL,"","",%vi) I %vn'="""" S @(%vn)="""""
^ZWCmcd("dgmg-QG","mcod",16)="QG Q:$Q Q"
^ZWCmcd("dgmg-QG","mcod",17)="  Q   ; safety/visual"
^ZWCmcd("dgmg-QG","mcod",18)=";eg.  D GFL(""lnfun"",LineFL)  ; uses _2 of LineFL but list lnfun only"
^ZWCmcd("dgmg-QN","mcod",43)="QN Q:$Q Q"
^ZWCmcd("dgmg-QN","mcod",44)="   Q  ; safety/visual"
^ZWCmcd("dgmg-QN","mcod",45)=";*"
^ZWCmcd("dgmg-QS","mcod",33)="QS  Q:$Q Q  ; zb target"
^ZWCmcd("dgmg-QS","mcod",34)="    Q  ; safety/visual"
^ZWCmcd("dgmg-SFL","mcod",19)=";*"
^ZWCmcd("dgmg-SFL","mcod",20)=";Save loc vars to MGbl via Super-FL-list"
^ZWCmcd("dgmg-SFL","mcod",21)=";*$$Q or D SFL^dgmg..."
^ZWCmcd("dgmg-SFL","mcod",22)="SFL(SFL,L2)  NEW Q S Q="""" I $G(SFL)="""" D bug^dv  S Q=""1arg"" G QS"
^ZWCmcd("dgmg-SFL","mcod",23)="  NEW:1 G,FL,%vi,%vn,%val,%old"
^ZWCmcd("dgmg-SFL","mcod",24)="  I $G(L2)="""" S L2=$P(SFL,""_"",2)  ; sic L@ bad choice vs L, L0, L2"
^ZWCmcd("dgmg-SFL","mcod",25)="  E  S L2=$P(L2,""_"",2)  ;uses arg2 for _2 MGbl Ref"
^ZWCmcd("dgmg-SFL","mcod",26)="  S G=L2,FL=$P(SFL,""_"") I G="""" D b^dv(""Bug No _2 G"",""G,FL,SFL,L2"")  G QS"
^ZWCmcd("dgmg-SFL","mcod",27)="  I FL="""" D b^dv(""Bug No _1 FL"",""G,FL,SFL,L2"")  G QS"
^ZWCmcd("dgmg-SFL","mcod",28)="  F %vi=1:1:$L(FL,"","") S %vn=$P(FL,"","",%vi) DO  ;"
^ZWCmcd("dgmg-SFL","mcod",29)="    .I %vn="""" Q  ; ignore and go on..."
^ZWCmcd("dgmg-SFL","mcod",30)="    .S %val=$G(@%vn) I %val'="""" S @G@(%vn)=%val Q"
^ZWCmcd("dgmg-SFL","mcod",31)="    .I $D(@%vn)#2=0 ;D errFL(""Undef Var ""_%vn) Q  ; Var %vn is UNDEF Usu not, NFL^dvs ? Tx as null"
^ZWCmcd("dgmg-SFL","mcod",32)="    .S %old=$G(@G@(%vn)) I %old'="""" KILL @G@(%vn)  ; Kill prior value ?"
^ZWCmcd("dmnAUop","mcod",1)="dmnAUop(mSys)  ;CKW/ESC  i27feb21 gmsa/ rmenu3/ ; 20210319-58 ; Audit Menu ops, HGen List"
^ZWCmcd("dmnAUop","mcod",2)=";New in rmenu3/"
^ZWCmcd("dmnAUop","mcod",3)=";"
^ZWCmcd("dmnAUop-AUop","mcod",55)=";*"
^ZWCmcd("dmnAUop-AUop","mcod",56)=";*$$Q  : Lop first line of code, opde  ;; descr"
^ZWCmcd("dmnAUop-AUop","mcod",57)="AUop(dopLR)  NEW Q S Q="""",Lop="""",opde="""""
^ZWCmcd("dmnAUop-AUop","mcod",58)="     I dopLR="""" S Q=""No Entry Label"" G QA"
^ZWCmcd("dmnAUop-AUop","mcod",59)="     S LR=$P(dopLR,""("")"
^ZWCmcd("dmnAUop-AUop","mcod",60)="     I LR'[""^"" S Q=""Not valid without ^"" G QA     ; No context for local sr ref."
^ZWCmcd("dmnAUop-AUop","mcod",61)="     S Lop=$T(@LR)"
^ZWCmcd("dmnAUop-AUop","mcod",62)="     S opde=$P(Lop,"";;"",2,9)  ; null if Lop null     "
^ZWCmcd("dmnAUop-AUop","mcod",63)="     I Lop="""" S Q=""Undef"""
^ZWCmcd("dmnAUop-Hmnu","mcod",41)=";* Audit and HGen one mnu"
^ZWCmcd("dmnAUop-Hmnu","mcod",42)="Hmnu(mab) I $G(mab)="""" D bug^dv Q"
^ZWCmcd("dmnAUop-Hmnu","mcod",43)="     S dPRP=$G(^MNU(mSys,mab,""dPRP""))"
^ZWCmcd("dmnAUop-Hmnu","mcod",44)="     D ot^hgh("".mab""),sv^hgh(mab_"": ""_dPRP),br^hgh"
^ZWCmcd("dmnAUop-Hmnu","mcod",45)="     F moi=1:1 Q:$D(^MNU(mSys,mab,moi))=0  DO  "
^ZWCmcd("dmnAUop-Hmnu","mcod",46)="       .D GFL^dgmg(""dopLR,dopab,dopde"",""_^MNU(mSys,mab,moi)"")  ; literals vs *FL vars"
^ZWCmcd("dmnAUop-Hmnu","mcod",47)="       .S opD=$$AUop(dopLR)  ; null defined, else not ( : Lop, opde)"
^ZWCmcd("dmnAUop-Hmnu","mcod",48)="       .S opln=moi_"") "" I dopab'="""" S opln=opln_"" (""_mab_"".) """
^ZWCmcd("dmnAUop-Hmnu","mcod",49)="       .S opln=opln_""  ""_dopde"
^ZWCmcd("dmnAUop-Hmnu","mcod",50)="       .I opD'="""" S opln=opln_"" / ""_opD"
^ZWCmcd("dmnAUop-Hmnu","mcod",51)="       .I opde'="""" S opln=opln_"" / ""_opde"
^ZWCmcd("dmnAUop-Hmnu","mcod",52)="       .D ot^hgh("".op""),sp^hgh(4),sv^hgh(opln),ct^hgh("".op"")"
^ZWCmcd("dmnAUop-Hmnu","mcod",53)="     D ct^hgh("".mab"")"
^ZWCmcd("dmnAUop-Hmnu","mcod",54)="     Q"
^ZWCmcd("dmnAUop-QA","mcod",64)="QA   Q Q"
^ZWCmcd("dmnAUop-QA","mcod",65)=";*"
^ZWCmcd("dmnAUop-guts","mcod",24)=";*  MNU()  or ^MNU  slightly diff merge"
^ZWCmcd("dmnAUop-guts","mcod",25)=";    Ea Menu ($O not same as found), then ea op"
^ZWCmcd("dmnAUop-guts","mcod",26)="; Test:  $T(@dopLR)   is $zro dependent, not clear which dir, ? in first line, not accurate"
^ZWCmcd("dmnAUop-guts","mcod",27)="guts    ;"
^ZWCmcd("dmnAUop-guts","mcod",28)="        D ^dmnIMG  ; mabFL, opFL"
^ZWCmcd("dmnAUop-guts","mcod",29)="        S mnL=$G(^MNU(mSys,0,""mnL""))"
^ZWCmcd("dmnAUop-guts","mcod",30)="        I $G(mnL)="""" D b^dv(""mnL is not defined"",""mnL,mSys"") Q"
^ZWCmcd("dmnAUop-guts","mcod",31)="        KILL MAB S m=0 F mi=0:1 S mnu=$O(^MNU(mSys,mnu)) Q:mnu=""""  S MAB(mnu)=mi"
^ZWCmcd("dmnAUop-guts","mcod",32)="        F mi=1:1:$L(mnL) S mnu=$P(mnL,"","",mi) I mnu'="""" DO  ;"
^ZWCmcd("dmnAUop-guts","mcod",33)="          .S ni=$G(MAB(mnu)) I ni="""" D b^dv(""mnu in mnL in not in ^MNU"",""mSys,mnu"")"
^ZWCmcd("dmnAUop-guts","mcod",34)="          .KILL MAB(mnu)"
^ZWCmcd("dmnAUop-guts","mcod",35)="        I $O(MAB(0))'="""" S mnu="""" F mi=0:1 DO  ;"
^ZWCmcd("dmnAUop-guts","mcod",36)="          .S mnu=$O(MAB(mnu)) I mnu="""" Q"
^ZWCmcd("dmnAUop-guts","mcod",37)="          .D b^dv(""mnu not in mnL ?"",""mnu,mSys,mnL"")"
^ZWCmcd("dmnAUop-guts","mcod",38)="        ; Now use mnL for order of menus"
^ZWCmcd("dmnAUop-guts","mcod",39)="        F mi=1:1:$L(mnL,"","") S mnu=$P(mnL,"","",mi) D Hmnu(mnu)  ;"
^ZWCmcd("dmnAUop-guts","mcod",40)="        Q"
^ZWCmcd("dmnAUop-hcss","mcod",20)=";*"
^ZWCmcd("dmnAUop-hcss","mcod",21)="hcss    D css^hgh(""mab."",""background-color:yellow"")"
^ZWCmcd("dmnAUop-hcss","mcod",22)="        D css^hgh(""op."",""background-color:pink"")"
^ZWCmcd("dmnAUop-hcss","mcod",23)="        Q"
^ZWCmcd("dmnAUop-top","mcod",4)="top   I $zro'[""rhgen4"",$zro'[""rd3hg"" D b^dv(""Menu Table Audit depends on HGen v3 or v4"",""mSys"") Q"
^ZWCmcd("dmnAUop-top","mcod",5)="      I $G(mSys)="""" S mSys=$G(^MNU(0,""mSysCur"")) I mSys="""" D bug^dv  Q"
^ZWCmcd("dmnAUop-top","mcod",6)="      I $D(^MNU(mSys))=0 D b^dv(""^MNU(mSys,  is UNDEF"",""mSys"") Q"
^ZWCmcd("dmnAUop-top","mcod",7)="      S Q=$$menu^mbsIpg(""mSys"") I Q'="""" D b^dv(Q,""Q,mSys"") Q  ; devmenu"
^ZWCmcd("dmnAUop-top","mcod",8)="        D Init^hgh  ; HT,HTS,HTE,CS, TI"
^ZWCmcd("dmnAUop-top","mcod",9)="        D ^dmnIMG  ; : mabFL, opFL, mab0FL"
^ZWCmcd("dmnAUop-top","mcod",10)="          D hcss"
^ZWCmcd("dmnAUop-top","mcod",11)="          S TI(""hd"")=""Menu of ""_mSys,TI(""tb"")=mSys_""-Menu"""
^ZWCmcd("dmnAUop-top","mcod",12)="          S TI(""VL"")=""mSys,mmo,mnL,mpreLR,zro"""
^ZWCmcd("dmnAUop-top","mcod",13)="          D T^dws(""msysFL:mmo,curmab,mnL,mpreLR,zro_^MNU(mSys,0)"")"
^ZWCmcd("dmnAUop-top","mcod",14)="          D GFL^dgmg(msysFL) ; mSys ^MNU(mSys,0"
^ZWCmcd("dmnAUop-top","mcod",15)="        D HGS^hgh"
^ZWCmcd("dmnAUop-top","mcod",16)="        D HGE^hgh"
^ZWCmcd("dmnAUop-top","mcod",17)="        D guts"
^ZWCmcd("dmnAUop-top","mcod",18)="        D WH^hgh(devmenu)"
^ZWCmcd("dmnAUop-top","mcod",19)="        Q"
^ZWCmcd("dmnCom","mcod",1)="dmnCom(mSys,mpreVL,mpreLR)  ;CKW/ESC i28may16 gmsa/ rmenu3/;20220612-80; Compile Menu in RM() to ^MNU(mSys)"
^ZWCmcd("dmnCom","mcod",2)="  ;;  RM(), mSys  : ^MNU(mSys,  "
^ZWCmcd("dmnCom","mcod",3)=";Dependencies:  rd2mg/ ^dgmg  or rmgbFL3/ "
^ZWCmcd("dmnCom","mcod",4)="  ;  Compile Menu from TOI RM()  to ^MNU(mSys)     then MERGE MU=^MNU(mSys)  RM() Syntax Below"
^ZWCmcd("dmnCom","mcod",5)="  I $zro'[""rd2mg"",$zro'[""mgbFL"" S zro=$zro,Q=""?zro dependency ^dgmg"" D b^dv(Q,""zro"")"
^ZWCmcd("dmnCom","mcod",6)="  ;I $zro'[""rd2c"" S zro=$zro,Q=""?zro dependency ^dvc"" D b^dv(Q,""zro"")  ; removed, DSP copy 17nov20"
^ZWCmcd("dmnCom","mcod",7)="    I $G(mSys)="""" S mSys=""X"" D b^dv(""Need mSys Menu id"",""mSys"")    ; Moved from %Com^dmnu"
^ZWCmcd("dmnCom","mcod",8)="    I $D(RM)'>9 D b^dv(""Menu needs to be in RM() array"",""RM,mSys"") Q"
^ZWCmcd("dmnCom","mcod",9)="    I '$G(RM) S RM=0 D b^dv(""No count RM "",""RM,ri"") F ri=1:1 Q:'$D(RM(ri))  S RM=ri"
^ZWCmcd("dmnCom","mcod",10)="    NEW:1 ri,L,mab,moi,dPRP,dDE,dnxt1,nsp,wi,m,W,nxt,ab"
^ZWCmcd("dmnCom","mcod",11)="    NEW:1 mabFL,opFL,dopab,dopde,dopMnu,dopLR,dnxt2,TA,t1"
^ZWCmcd("dmnCom","mcod",12)="    D ^dmnIMG    KILL ^MNU(mSys)  S moi=-9,mab=-8  ;In case bad syntax in RM()"
^ZWCmcd("dmnCom","mcod",13)="    I $G(mpreLR)'="""" DO  ;"
^ZWCmcd("dmnCom","mcod",14)="      .I mpreLR'[""dis^"",mpreLR'[""^dmnDIS"" S Q=""Err mpreLR"" D b^dv(Q,""mSys,mpreLR,mpreVL"") Q"
^ZWCmcd("dmnCom","mcod",15)="      .S ^MNU(mSys,0,""mpreLR"")=mpreLR"
^ZWCmcd("dmnCom","mcod",16)="    I $G(mpreVL)'="""" S ^MNU(mSys,0,""mpreVL"")=mpreVL,^MNU(mSys,0,""mpreLR"")=""VL^dmnDIS"""
^ZWCmcd("dmnCom","mcod",17)="    F ri=1:1:RM S L=RM(ri),L=$TR(L,$C(9,13),"" "") I L'="""" DO  ;Substitute tab, delete cr/13"
^ZWCmcd("dmnCom","mcod",18)="      .I $E(L)'="" "" D mnu Q"
^ZWCmcd("dmnCom","mcod",19)="      .D op1L"
^ZWCmcd("dmnCom","mcod",20)="    S mab=0 KILL ^MNU(-1,""ab"")"
^ZWCmcd("dmnCom","mcod",21)="    F mi=0:1 S mab=$O(^MNU(mSys,mab)) Q:mab=""""  DO  ;"
^ZWCmcd("dmnCom","mcod",22)="      .S ^MNU(mSys,-1,""ab"",mab)=mab"
^ZWCmcd("dmnCom","mcod",23)="      .F moi=1:1 Q:'$D(^MNU(mSys,mab,moi))  DO  ;"
^ZWCmcd("dmnCom","mcod",24)="         ..S dopab=$G(^MNU(mSys,mab,moi,""dopab""))"
^ZWCmcd("dmnCom","mcod",25)="         ..I dopab'="""" S ^MNU(mSys,-1,""ab"",dopab)=mab_"".""_moi"
^ZWCmcd("dmnCom","mcod",26)="    D mnL(mSys)  ; Create list of mab's, save it in ^MNU(0,""mnL"")"
^ZWCmcd("dmnCom","mcod",27)="    ;End sequence"
^ZWCmcd("dmnCom","mcod",28)="    S ^MNU(0,""mSysCur"")=mSys "
^ZWCmcd("dmnCom","mcod",29)="    S ^MNU(mSys,0,""curmab"")=""mm"""
^ZWCmcd("dmnCom","mcod",30)="    S ^MNU(mSys,0,""mmo"")=""#"""
^ZWCmcd("dmnCom","mcod",31)="    I $G(mpreLR)'="""" S ^MNU(mSys,0,""mpreLR"")=mpreLR  ;Kludge --> RM(), $T"
^ZWCmcd("dmnCom","mcod",32)="    S ^MNU(mSys,0,""zro"")=$zro"
^ZWCmcd("dmnCom","mcod",33)="    KILL RM"
^ZWCmcd("dmnCom","mcod",34)="    Q"
^ZWCmcd("dmnCom-AMnu","mcod",83)="AMnu(mnu)  I $G(mnu)="""" D b^dv(""Bug"",""mnu,mSys"") Q"
^ZWCmcd("dmnCom-AMnu","mcod",84)="    I $D(MX(mnu)) Q  ;already done"
^ZWCmcd("dmnCom-AMnu","mcod",85)="    S mnL=mnL_"",""_mnu,mi=mi+1,MX(mnu)=mi"
^ZWCmcd("dmnCom-AMnu","mcod",86)="    Q    "
^ZWCmcd("dmnCom-DSP","mcod",87)=";*"
^ZWCmcd("dmnCom-DSP","mcod",88)=";*  Replace all dbl spaces (or more) with single, and remove starting/ending"
^ZWCmcd("dmnCom-DSP","mcod",89)="DSP(X) NEW i F i=0:1 Q:X'[""  ""  S X=$P(X,""  "")_"" ""_$P(X,""  "",2,9999)"
^ZWCmcd("dmnCom-DSP","mcod",90)=" Q $$TSP(X)"
^ZWCmcd("dmnCom-TSP","mcod",91)=";*  Remove start and end spaces (only)"
^ZWCmcd("dmnCom-TSP","mcod",92)="TSP(X) NEW i S X=$TR(X,$C(9)_$C(10)_$C(13),""   "")  ;replace tab,lf,cr with space"
^ZWCmcd("dmnCom-TSP","mcod",93)=" I $E($G(X))="" "" F i=1:1:$L(X) I $E(X,i)'="" "" S X=$E(X,i,999) Q"
^ZWCmcd("dmnCom-TSP","mcod",94)=" I $E(X,$L(X))="" "" F i=$L(X):-1:1 I $E(X,i)'="" "" S X=$E(X,1,i) Q"
^ZWCmcd("dmnCom-TSP","mcod",95)=" I X="" "" S X=""""  ; Funny case all spaces  vs end i=0 second line ?"
^ZWCmcd("dmnCom-TSP","mcod",96)=" Q X"
^ZWCmcd("dmnCom-TSP","mcod",97)=";*"
^ZWCmcd("dmnCom-TSP","mcod",98)=";  Syntax"
^ZWCmcd("dmnCom-TSP","mcod",99)=";menu -  Lines with NO indent(no starting space) -> menu lines"
^ZWCmcd("dmnCom-TSP","mcod",100)=";     ab.  menu abbreviation, ref anywhere"
^ZWCmcd("dmnCom-TSP","mcod",101)=";     |menu  destination menu after running menu  dnxt1"
^ZWCmcd("dmnCom-TSP","mcod",102)=";     Prompt  _  description"
^ZWCmcd("dmnCom-TSP","mcod",103)=";  op - Lines with indentation  destination run Label^MRou (dopLR)"
^ZWCmcd("dmnCom-TSP","mcod",104)=";     [""^""  Label^MRou  - not tested for existence here"
^ZWCmcd("dmnCom-TSP","mcod",105)=";     $menu  Destination is another menu - use ab. with or without the period"
^ZWCmcd("dmnCom-TSP","mcod",106)=";     abbr.  abbr for option "
^ZWCmcd("dmnCom-TSP","mcod",107)=";     |  menu after op is RUn  - does not loop back to same menu"
^ZWCmcd("dmnCom-TSP","mcod",108)=";     Descr which is prompt in menu list as well (not two ?)"
^ZWCmcd("dmnCom-TSP","mcod",109)=";"
^ZWCmcd("dmnCom-mnL","mcod",69)=";*  mSys : mab list mnL"
^ZWCmcd("dmnCom-mnL","mcod",70)="mnL(mSys)  I $G(mSys)="""" D b^dv(""Need mSys"",""mSys"") Q"
^ZWCmcd("dmnCom-mnL","mcod",71)="    I $D(^MNU(mSys))'=10 D b^dv(""Need ^MNU(mSys)"",""mSys"") Q"
^ZWCmcd("dmnCom-mnL","mcod",72)="    NEW:1 MX,mnLX,mnL,mi,mab"
^ZWCmcd("dmnCom-mnL","mcod",73)="    S mnLX=$G(^MNU(mSys,0,""mnL""))"
^ZWCmcd("dmnCom-mnL","mcod",74)="    S mnL=""mm""   S MX(""mm"")=1"
^ZWCmcd("dmnCom-mnL","mcod",75)="    S mab=0 F mi=2:1 S mab=$O(^MNU(mSys,mab)) Q:mab=""""  DO"
^ZWCmcd("dmnCom-mnL","mcod",76)="      .I $G(MX(mab))'="""" Q"
^ZWCmcd("dmnCom-mnL","mcod",77)="      .D AMnu(mab)"
^ZWCmcd("dmnCom-mnL","mcod",78)="      .F moi=1:1 Q:$D(^MNU(mSys,mab,moi))=0  DO"
^ZWCmcd("dmnCom-mnL","mcod",79)="         ..S mnu=$G(^(moi,""dopMnu"")) I mnu="""" Q"
^ZWCmcd("dmnCom-mnL","mcod",80)="         ..D AMnu(mnu) Q"
^ZWCmcd("dmnCom-mnL","mcod",81)="    S ^MNU(mSys,0,""mnL"")=mnL"
^ZWCmcd("dmnCom-mnL","mcod",82)="    Q"
^ZWCmcd("dmnCom-mnu","mcod",35)=";*"
^ZWCmcd("dmnCom-mnu","mcod",36)=";* menu"
^ZWCmcd("dmnCom-mnu","mcod",37)=";  L : @mabFL,  mab, dPRP, dDE, dnxt1, ^MNU(mSys,mab)"
^ZWCmcd("dmnCom-mnu","mcod",38)="mnu   S nsp=$L(L,"" ""),(mab,dPRP,dDE,dnxt1,dwd,newMenu)="""",moi=0"
^ZWCmcd("dmnCom-mnu","mcod",39)="      F wi=1:1:nsp S W=$P(L,"" "",wi) DO  ;"
^ZWCmcd("dmnCom-mnu","mcod",40)="        .I W[""."",$E(W,$L(W))=""."" S mab=$P(W,"".""),$P(L,"" "",wi)="""" Q"
^ZWCmcd("dmnCom-mnu","mcod",41)="        .I $E(W)=""$"",dwd="""" DO  I dwd'=""""  Q"
^ZWCmcd("dmnCom-mnu","mcod",42)="           ..S dwd=$P(W,""$"",2) I dwd="""" Q"
^ZWCmcd("dmnCom-mnu","mcod",43)="           ..I $D(^MNU(dwd)) S newMenu=dwd Q"
^ZWCmcd("dmnCom-mnu","mcod",44)="           .."
^ZWCmcd("dmnCom-mnu","mcod",45)="        .I W[""|"" S nxt=$TR(W,""|"","""") I nxt'="""" S dnxt1=nxt,$P(L,"" "",wi)="""" Q"
^ZWCmcd("dmnCom-mnu","mcod",46)="      I mab="""" S m=$P(L,"" "") I m?1A.an S mab=m,L=$P(L,"" "",2,99)"
^ZWCmcd("dmnCom-mnu","mcod",47)="      I mab="""" D b^dv(""Menu Line Format?"",""L,ri"") Q"
^ZWCmcd("dmnCom-mnu","mcod",48)="      S dPRP=$P(L,""_""),dDE=$P(L,""_"",2)  ; Rest split between prompt and dDE by _"
^ZWCmcd("dmnCom-mnu","mcod",49)="      D SFL^dgmg(mabFL)"
^ZWCmcd("dmnCom-mnu","mcod",50)="      Q"
^ZWCmcd("dmnCom-op1L","mcod",51)=";* Option LR Label^MRou  or menu.           Custom TOI (sic)"
^ZWCmcd("dmnCom-op1L","mcod",52)=";*  L, mab, moi' : @opFL,  ^MNU(mSys, mab,moi)"
^ZWCmcd("dmnCom-op1L","mcod",53)="op1L  S nsp=$L(L,"" ""),(dopab,dopLR,dopMnu,dopde,dnxt2)="""""
^ZWCmcd("dmnCom-op1L","mcod",54)="      S moi=moi+1  ;blank if syntax error"
^ZWCmcd("dmnCom-op1L","mcod",55)="      F wi=1:1:nsp S W=$P(L,"" "",wi) I W'="""" DO  ;"
^ZWCmcd("dmnCom-op1L","mcod",56)="        .I $E(W)=""$"" S dopMnu=$TR(W,""$."",""""),$P(L,"" "",wi)="""" Q  "
^ZWCmcd("dmnCom-op1L","mcod",57)="        .I $E(W,$L(W))=""."" S ab=$P(W,""."") DO  Q"
^ZWCmcd("dmnCom-op1L","mcod",58)="           ..I ab'="""",$D(^MNU(mSys,ab)) S dopLR=W,$P(L,"" "",wi)="""" Q"
^ZWCmcd("dmnCom-op1L","mcod",59)="           ..I ab'="""" S dopab=ab,$P(L,"" "",wi)="""" Q"
^ZWCmcd("dmnCom-op1L","mcod",60)="        .I $E(W)=""|"" S W=$P(W,""|"",2) I W'="""" S dnxt2=W,$P(L,"" "",wi)="""" Q"
^ZWCmcd("dmnCom-op1L","mcod",61)="      S TA=$$DSP(L),nsp=$L(TA,"" "")"
^ZWCmcd("dmnCom-op1L","mcod",62)="        I dopMnu="""" S t1=$P(TA,"" "") DO  ;"
^ZWCmcd("dmnCom-op1L","mcod",63)="          .I t1[""^"" S dopLR=t1,$P(TA,"" "")="""" Q"
^ZWCmcd("dmnCom-op1L","mcod",64)="          .I dopLR="""" D ^dv(""Failed to Find Destination Label^MRou"",""dopLR,ri,L,nsp,TA,t1,mab,moi"")"
^ZWCmcd("dmnCom-op1L","mcod",65)="      S dopde=TA  ;What ever's left"
^ZWCmcd("dmnCom-op1L","mcod",66)="      D SFL^dgmg(opFL)  ; mab, moi : ^MNU(mSys,mab,moi)"
^ZWCmcd("dmnCom-op1L","mcod",67)="      Q"
^ZWCmcd("dmnCom-op1L","mcod",68)=";  Ref by ^dmnu"
^ZWCmcd("dmnDIS","mcod",1)="dmnDIS  ;CKW/ESC  i26sep20 gmma/ rmFL/ ; 20200926-99 ; Std dis SR for ^dmnu Pseudo DashBoard"
^ZWCmcd("dmnDIS","mcod",2)=";"
^ZWCmcd("dmnDIS","mcod",3)=";  "
^ZWCmcd("dmnDIS","mcod",4)=";"
^ZWCmcd("dmnDIS-VL","mcod",15)=";*  alt dis^caller  pre Menu top of screen    mpreLR=""VL^dmnDIS""  gets you here, "
^ZWCmcd("dmnDIS-VL","mcod",16)=";*    mpreVL var list,, in ^MNU(mSys,0,vn)"
^ZWCmcd("dmnDIS-VL","mcod",17)="VL  NEW mpreVL,vi,vn,val,v"
^ZWCmcd("dmnDIS-VL","mcod",18)="    S mpreVL=$G(^MNU(mSys,0,""mpreVL""))"
^ZWCmcd("dmnDIS-VL","mcod",19)="      I $G(mpreVL)="""" S mpreVL=""mSys,evdt"""
^ZWCmcd("dmnDIS-VL","mcod",20)="    U $P W:$X !"
^ZWCmcd("dmnDIS-VL","mcod",21)="    F vi=1:1:$L(mpreVL,"","") S vn=$P(mpreVL,"","",vi) I vn'="""" DO  ;"
^ZWCmcd("dmnDIS-VL","mcod",22)="      .S val=$G(^MNU(mSys,0,vn))"
^ZWCmcd("dmnDIS-VL","mcod",23)="      .;S @vn=val  ;This may be problem, not helpful, confusing"
^ZWCmcd("dmnDIS-VL","mcod",24)="      .S v=vn_"":""_val"
^ZWCmcd("dmnDIS-VL","mcod",25)="      .I $L(v)+$x>96 W !,?4"
^ZWCmcd("dmnDIS-VL","mcod",26)="      .W v,""   """
^ZWCmcd("dmnDIS-VL","mcod",27)="    W:$X !"
^ZWCmcd("dmnDIS-VL","mcod",28)="    Q"
^ZWCmcd("dmnDIS-VL","mcod",29)=";*    "
^ZWCmcd("dmnDIS-dis","mcod",6)="dis  ;"
^ZWCmcd("dmnDIS-hsta","mcod",7)="hsta NEW mSys,evdt"
^ZWCmcd("dmnDIS-hsta","mcod",8)="     S mSys=$G(^MNU(0,""mSysCur""))"
^ZWCmcd("dmnDIS-hsta","mcod",9)="     S evdt=$G(^MNU(0,""evdt8""))"
^ZWCmcd("dmnDIS-hsta","mcod",10)="     I evdt="""" S evdt=$ZD($H,""YYYYMMDD"")"
^ZWCmcd("dmnDIS-hsta","mcod",11)="     USE $P W:$X ! W ""mSys: "",$G(mSys)  W ""  Event Date (evdt?d8) :"",$G(evdt),""  by^"",$T(+0),!"
^ZWCmcd("dmnDIS-hsta","mcod",12)="     Q"
^ZWCmcd("dmnDIS-hsta3","mcod",13)="hsta3  D DIS^tdMenu"
^ZWCmcd("dmnDIS-hsta3","mcod",14)="     Q"
^ZWCmcd("dmnDIS-top","mcod",5)="top  ;"
^ZWCmcd("dmnIMG","mcod",1)="dmnIMG  ;CKW/ESC  i1mar21 gmsa/ rmenu3/ ; 20210301-92 ; *FL for ^mnu*"
^ZWCmcd("dmnIMG","mcod",2)=";  was in IMG^dmnCom"
^ZWCmcd("dmnIMG","mcod",3)=";"
^ZWCmcd("dmnIMG-top","mcod",4)="top  ;D IMG^dmnCom"
^ZWCmcd("dmnIMG-top","mcod",5)="     S curFL=""mSysCur_^MNU(0)"""
^ZWCmcd("dmnIMG-top","mcod",6)="     S msys0FL=""mmo,curmab,mnL,mpreLR,zro_^MNU(mSys,0)""     "
^ZWCmcd("dmnIMG-top","mcod",7)="     S mabFL=""dPRP,dDE,dnxt1_^MNU(mSys,mab)"" "
^ZWCmcd("dmnIMG-top","mcod",8)="     S opFL=""dopLR,dopMnu,dopab,dopde,dnxt2_^MNU(mSys,mab,moi)"""
^ZWCmcd("dmnIMG-top","mcod",9)="     ;"
^ZWCmcd("dmnIMG-top","mcod",10)="     D T^dws(""msys0FL:mmo,curmab,mnL,mpreLR,zro_^MNU(mSys,0)"")"
^ZWCmcd("dmnIMG-top","mcod",11)="     D T^dws(""mabFL:dPRP,dDE,dnxt1_^MNU(mSys,mab)"")"
^ZWCmcd("dmnIMG-top","mcod",12)="     D T^dws(""opFL:dopLR,dopMnu,dopab,dopde,dnxt2_^MNU(mSys,mab,moi)"")"
^ZWCmcd("dmnIMG-top","mcod",13)="     Q"
^ZWCmcd("dmnIMG-top","mcod",14)=";*"
^ZWCmcd("dmnIMG-top","mcod",15)=";^MNU(""tdProd"",0,""curmab"")=""mm"""
^ZWCmcd("dmnIMG-top","mcod",16)=";^MNU(""tdProd"",0,""mmo"")=""#"""
^ZWCmcd("dmnIMG-top","mcod",17)=";^MNU(""tdProd"",0,""mnL"")=""mm,config,g,mem,rep,test"""
^ZWCmcd("dmnIMG-top","mcod",18)=";^MNU(""tdProd"",0,""mpreLR"")=""^dmnDIS"""
^ZWCmcd("dmnIMG-top","mcod",19)=";^MNU(""tdProd"",0,""zro"")="
^ZWCmcd("dmnIMG-top","mcod",20)=""
^ZWCmcd("dmnIMG-top","mcod",21)=";"
^ZWCmcd("dmnKgp","mcod",1)="dmnKgp   ;CKW/ESC i4feb23 gmsa./ rmenu3/ ;20230204-30;Cleanup KILL after menu, before op start"
^ZWCmcd("dmnKgp","mcod",2)=";"
^ZWCmcd("dmnKgp","mcod",3)=";  --- NEW vs KILL kw  ok since menu starts, no caller higher level"
^ZWCmcd("dmnKgp","mcod",4)=";  NOT dopLR"
^ZWCmcd("dmnKgp-dv","mcod",9)="dv     KILL %D,%KMO,%c,%v,%vn,%zshc,VVL,dBdv,dvM,rdid,rdide,zoi"
^ZWCmcd("dmnKgp-dv","mcod",10)="       I 0 DO  ;"
^ZWCmcd("dmnKgp-dv","mcod",11)="         .USE $P W !! zwr  ;"
^ZWCmcd("dmnKgp-dv","mcod",12)="         .W !!,""Add menu var cleanup?"""
^ZWCmcd("dmnKgp-dv","mcod",13)="         .I 0 BREAK"
^ZWCmcd("dmnKgp-dv","mcod",14)="       Q"
^ZWCmcd("dmnKgp-dv","mcod",15)=";*"
^ZWCmcd("dmnKgp-dv","mcod",16)=""
^ZWCmcd("dmnKgp-dv","mcod",17)=""
^ZWCmcd("dmnKgp-dv","mcod",18)=""
^ZWCmcd("dmnKgp-dz","mcod",7)="dz     ;KILL zrid,czro,izro,izgl,rzro,wzro,zzro,mpjDir,kwsys,kwmpj,LUser"
^ZWCmcd("dmnKgp-dz","mcod",8)="       KILL %ZSH,RXU,Ru"
^ZWCmcd("dmnKgp-menu","mcod",5)="menu   KILL mSys,FL,L,LR,Lop,Q,RI,T,X,curFL,curmab,dBdv,dnxt2,dvM"
^ZWCmcd("dmnKgp-menu","mcod",6)="       KILL dwd,zro,f,mSysArg,mSysMRou,mmo,mpreVL,msys0FL,newMenu,opD,opFL,opde,vi,vn"
^ZWCmcd("dmnList","mcod",1)="dmnList  ;CKW/ESC  i18May16 gmsa/ rd2menu/ ; 20180921  ; List Whole Menu & HGen - Documentation"
^ZWCmcd("dmnList","mcod",2)="  ;"
^ZWCmcd("dmnList","mcod",3)="  ; from MU()  Structure"
^ZWCmcd("dmnList","mcod",4)="  ; Menu List - Order"
^ZWCmcd("dmnList","mcod",5)="  ; mmo  Modes  Pertinent Subvariables and Effects"
^ZWCmcd("dmnList","mcod",6)="  ;"
^ZWCmcd("dmnList","mcod",7)="  ; to wBase, wFol, devmnu=$$mnu^dvIpg(Mprj)"
^ZWCmcd("dmnList","mcod",8)="  ;       destination gmsa (all) vs Mproj www/BE/"
^ZWCmcd("dmnList","mcod",9)="  ;"
^ZWCmcd("dmnList-A","mcod",10)="A  S Mpj=$G(MU(0,""Mpj""))    ; vs G0 from MU   @mnuzFL"
^ZWCmcd("dmnList-A","mcod",11)="   I Mpj="""" S Mpj=""KA1"""
^ZWCmcd("dmnList-A","mcod",12)="   S wFil=$$mnu^dvIpg(Mpj) I wFil="""" S wFil=""Menu ""_Mpj"
^ZWCmcd("dmnList-A","mcod",13)="   S wBase=""/home/kw/km7r/gmsa/"",wFol=""www/BE/"""
^ZWCmcd("dmnList-A","mcod",14)="   S devmnu=wBase_wFol_wFil"
^ZWCmcd("dmnList-A","mcod",15)="   D ^dmnIMG"
^ZWCmcd("dmnList-A","mcod",16)="   U $P W:$X ! W ""Creating Menu Page - "",devmnu,!!"
^ZWCmcd("dmnList-A","mcod",17)="   ;"
^ZWCmcd("dmnList-A","mcod",18)="   S mnL=$G(MU(0,""mnL"")) I mnL="""" S mnL=""mm,cp,kp"""
^ZWCmcd("dmnList-A","mcod",19)="   ;"
^ZWCmcd("dmnList-A","mcod",20)="   S TItb=""Menu"",TIhd=""Menu Summary - ""_Mpj"
^ZWCmcd("dmnList-A","mcod",21)="   S TIft=""^""_$T(+0)"
^ZWCmcd("dmnList-A","mcod",22)="   ;"
^ZWCmcd("dmnList-A2","mcod",23)="A2   D HG1^dvh(devmnu)"
^ZWCmcd("dmnList-A2","mcod",24)="     W !,""<pre>"""
^ZWCmcd("dmnList-A2","mcod",25)="     D LIST"
^ZWCmcd("dmnList-A2","mcod",26)="     W !,""</pre>"""
^ZWCmcd("dmnList-A2","mcod",27)="   D HG2^dvh(devmnu)"
^ZWCmcd("dmnList-A2","mcod",28)="   U $P W:$X ! W ""Completed "",devmnu,!"
^ZWCmcd("dmnList-A2","mcod",29)="   Q"
^ZWCmcd("dmnList-A2","mcod",30)=";List all menus & ops"
^ZWCmcd("dmnList-A2","mcod",31)=";  Ref by LISTall^dmnu  in response to ??    and  A2 above"
^ZWCmcd("dmnList-A2","mcod",32)="; mnL first, then res of menus"
^ZWCmcd("dmnList-LIST","mcod",33)="LIST  MERGE MX=MU"
^ZWCmcd("dmnList-LIST","mcod",34)="   F mi=1:1:$L(mnL,"","") S mab=$P(mnL,"","",mi) I mab'="""" D Wmnu KILL MX(mab)"
^ZWCmcd("dmnList-LIST","mcod",35)="   S mab=""0"" F mi=0:1 S mab=$O(MX(mab)) Q:mab=""""  B:mab="".""  D Wmnu KILL MX(mab)"
^ZWCmcd("dmnList-LIST","mcod",36)="   W !!"
^ZWCmcd("dmnList-LIST","mcod",37)="   Q"
^ZWCmcd("dmnList-LIST","mcod",38)="; One Menu mab  ; "
^ZWCmcd("dmnList-Wmnu","mcod",39)="Wmnu D T^dws(""mabFL:dPRP,dDE,dnxt1_^MNU(mSys,mab)"")"
^ZWCmcd("dmnList-Wmnu","mcod",40)="  D Gmab^dmnu  ; @mabFL/MU : dDE, dPRP, dnxt1"
^ZWCmcd("dmnList-Wmnu","mcod",41)="  W !,mab,"".  "",dDE,""   """
^ZWCmcd("dmnList-Wmnu","mcod",42)="  I dnxt2'="""" W "" (->"",dnxt2,"") """
^ZWCmcd("dmnList-Wmnu","mcod",43)="  W !,?8,""  Prompt:'"",dPRP,""'  "",!"
^ZWCmcd("dmnList-Wmnu","mcod",44)="  F moi=1:1 Q:'$D(MU(mab,moi))   D Gop^dmnu D Wop"
^ZWCmcd("dmnList-Wmnu","mcod",45)="  Q"
^ZWCmcd("dmnList-Wmnu","mcod",46)="; One Line of Menu,  S opFL=""dopLR,dopab,dopde,dnxt2_MU(mab,moi)"""
^ZWCmcd("dmnList-Wop","mcod",47)="Wop W:$X ! W moi,"")  ""  W:dopab'="""" dopab,"".  """
^ZWCmcd("dmnList-Wop","mcod",48)="    W dopLR,""   """
^ZWCmcd("dmnList-Wop","mcod",49)="    W ?40,dopde,""  ""   I dnxt2'="""" W ""(->"",dnxt2,"")  """
^ZWCmcd("dmnList-Wop","mcod",50)="    W ! "
^ZWCmcd("dmnList-Wop","mcod",51)="    Q"
^ZWCmcd("dmnList-Wop","mcod",52)="    "
^ZWCmcd("dmnMa","mcod",1)="dmnMa(mSys,MRou)  ;CKW/ESC   i20may18 gmsa/ rd2menu/  ; 20180520-55 ; Capture *Ma Menu ops"
^ZWCmcd("dmnMa","mcod",2)="  ;   in   T2DM dev"
^ZWCmcd("dmnMa","mcod",3)="  ; MRou = ""qdMa.m""  for T2DM"
^ZWCmcd("dmnMa","mcod",4)="  ;"
^ZWCmcd("dmnMa","mcod",5)="  ;  Supplement to ^dmnCom  Compile"
^ZWCmcd("dmnMa","mcod",6)="  ;   ^"
^ZWCmcd("dmnMa-GIX","mcod",37)=";* Scan ^MNU and compose IX=""cb""   in ^CBx"
^ZWCmcd("dmnMa-GIX","mcod",38)="GIX   KILL ^CBx"
^ZWCmcd("dmnMa-GIX","mcod",39)="      S mab="""" F mi=0:1 S mab=$O(^MNU(mSys,mab)) Q:mab=""""  DO  "
^ZWCmcd("dmnMa-GIX","mcod",40)="        .F moi=1:1 S dopLR=$G(^MNU(mSys,mab,moi)) Q:dopLR=""""  DO  ;"
^ZWCmcd("dmnMa-GIX","mcod",41)="           ..I dopLR="""" Q"
^ZWCmcd("dmnMa-GIX","mcod",42)="           ..I dopLR[""^"" S GBx(mSys,""cb"",dopLR)=mab_"".""_moi"
^ZWCmcd("dmnMa-GIX","mcod",43)="        .Q"
^ZWCmcd("dmnMa-GIX","mcod",44)="      Q"
^ZWCmcd("dmnMa-GIX","mcod",45)="      "
^ZWCmcd("dmnMa-GIX","mcod
^ZWCmcd("dmnMa-RMRT","mcod",17)=";*"
^ZWCmcd("dmnMa-RMRT","mcod",18)=";* Read $T MRou "
^ZWCmcd("dmnMa-RMRT","mcod",19)="RMRT(MRou) I $G(MRou)="""" D b^dv(""Bug"",""MRou"") S MRou=""qdMa"",dopMnu=""qdMa"""
^ZWCmcd("dmnMa-RMRT","mcod",20)="    S moi=0,mab=""ma""   S ^MNU(mSys,-1,""ab"",mab)=mab  ; ?What Kludge"
^ZWCmcd("dmnMa-RMRT","mcod",21)="    F II=1:1  S T=$T(@MRou+II^@MRou)  Q:T=""""  D Topt"
^ZWCmcd("dmnMa-RMRT","mcod",22)="    Q"
^ZWCmcd("dmnMa-Topt","mcod",23)=";* T, mab, moi+,  "
^ZWCmcd("dmnMa-Topt","mcod",24)="Topt   S C2=$P(T,"";;"",2) I C2="""" Q"
^ZWCmcd("dmnMa-Topt","mcod",25)="      D NFL^dvs(opFL)"
^ZWCmcd("dmnMa-Topt","mcod",26)="      S T=$TR(T,$C(9),"" ""),LB=$P(T,"" "") I LB="""" Q"
^ZWCmcd("dmnMa-Topt","mcod",27)="      S dopLR=LB_""^""_MRou"
^ZWCmcd("dmnMa-Topt","mcod",28)="        I $G(CBx(dopLR))'="""" "
^ZWCmcd("dmnMa-Topt","mcod",29)="      S dopab=LB"
^ZWCmcd("dmnMa-Topt","mcod",30)="      S dopde=C2"
^ZWCmcd("dmnMa-Topt","mcod",31)="      S moi=moi+1"
^ZWCmcd("dmnMa-Topt","mcod",32)="      D SFL^dvs(opFL)  ; mSys, mab, moi : @opFL  ^MNU(mab,moi)"
^ZWCmcd("dmnMa-Topt","mcod",33)="      I dopab'="""",$D(^MNU(mSys,-1,""ab"",dopab))=0 DO  ;"
^ZWCmcd("dmnMa-Topt","mcod",34)="        .S ^MNU(mSys,-1,""ab"",dopab)=mab_"".""_moi"
^ZWCmcd("dmnMa-Topt","mcod",35)="      U $P W:$X ! W moi,"") "",mab,""  "",?10,dopab,""  "",?20,dopde,!"
^ZWCmcd("dmnMa-Topt","mcod",36)="    Q"
^ZWCmcd("dmnMa-top","mcod",7)="top  I $G(mSys)="""" D BUG^dv Q"
^ZWCmcd("dmnMa-top","mcod",8)="     I $G(MRou)="""" D BUG^dv Q"
^ZWCmcd("dmnMa-top","mcod",9)="     I $D(^MNU(mSys))=0 D b^dv(""mSys not in ^MNU ?"",""mSys,MRou"") Q"
^ZWCmcd("dmnMa-top","mcod",10)="     I $T(@MRou^@MRou)="""" D b^dv(""MRou undef?"",""MRou,mSys"") Q"
^ZWCmcd("dmnMa-top","mcod",11)="     NEW moi,mab,mi,C2,T,II,dopab,dopde,dopLR,opFL,LB"
^ZWCmcd("dmnMa-top","mcod",12)="     D IMG^dmnCom  ; opFL"
^ZWCmcd("dmnMa-top","mcod",13)="; access MRou via $T for now"
^ZWCmcd("dmnMa-top","mcod",14)="    ;D GIX"
^ZWCmcd("dmnMa-top","mcod",15)="    D RMRT(MRou)   ; : RU(ri)   whole MRou  vs sel labels"
^ZWCmcd("dmnMa-top","mcod",16)="    Q"
^ZWCmcd("dmnRT","mcod",1)="dmnRT(mSys,mnuMRou)  ;CKW/ESC i26sep20 gmsa/ rd2menu/ ; 20200926-52 ; Read Menu $T to RM() Stage One Menu Compile"
^ZWCmcd("dmnRT","mcod",2)=";;$$Q    then proceeds to ^dmnu via GoTo - (no additional stack levels)"
^ZWCmcd("dmnRT","mcod",3)=";RefBy:"
^ZWCmcd("dmnRT","mcod",4)=";  Goto A^dmnRT  mSys, mnuMRou"
^ZWCmcd("dmnRT-A","mcod",5)="A     NEW Q  S Q="""""
^ZWCmcd("dmnRT-A","mcod",6)="      I $G(mSys)="""" S Q=""Arg mSys ?"" D b^dv(Q,""mSys"") Goto Q"
^ZWCmcd("dmnRT-A","mcod",7)="      S mpreVL=$G(mpreVL)  ; dis var list"
^ZWCmcd("dmnRT-A","mcod",8)="      I $G(mnuMRou)="""" D b^dv(""Where ?"",""mnuMRou"")  DO"
^ZWCmcd("dmnRT-A","mcod",9)="        .I $T(^dzCallBy)'="""" D ^dzCallBy DO  ;"
^ZWCmcd("dmnRT-A","mcod",10)="           ..I caller[""^dmn"" Q"
^ZWCmcd("dmnRT-A","mcod",11)="           ..S mnuMRou=caller"
^ZWCmcd("dmnRT-A","mcod",12)="      I mnuMRou="""" S Q=""Err No menu source mnuMRou"" D b^dv(Q,""Q,mSys,mnuMRou"") Goto Q"
^ZWCmcd("dmnRT-A","mcod",13)="      S T=$T(Menu^@mnuMRou)"
^ZWCmcd("dmnRT-A","mcod",14)="        I T="""" S Q=""Can't find Menu^@mnuMRou"" D b^dv(Q,""Q,mnuMRou,mSys"") Goto Q"
^ZWCmcd("dmnRT-A","mcod",15)="        D SRM  ; mnuMRou $T : RM()"
^ZWCmcd("dmnRT-A","mcod",16)="        ; actually cannot override, does G ^dmnu next below"
^ZWCmcd("dmnRT-A","mcod",17)="        I $G(mpreLR)="""" S mpreLR=""dis^dmnDIS""  ; default, caller can override in ^MNU(mSys,0,""dmnDIS"")=<DashBd-entryRef>"
^ZWCmcd("dmnRT-A","mcod",18)="        I mpreLR'[""dis^"",mpreLR'[""dmnDIS""  DO   Goto Q"
^ZWCmcd("dmnRT-A","mcod",19)="          .S Q=""mpreLR must be <entryref  dis^ "" "
^ZWCmcd("dmnRT-A","mcod",20)="          .D b^dv(Q,""mpreLR,mSys"") "
^ZWCmcd("dmnRT-A","mcod",21)="        S ^MNU(mSys,0,""mpreLR"")=mpreLR  ;not null"
^ZWCmcd("dmnRT-A","mcod",22)="        KILL ^MNU(mSys,0,""mpreVL"")"
^ZWCmcd("dmnRT-A","mcod",23)="        I mpreVL'="""" S ^MNU(mSys,0,""mpreVL"")=mpreVL"
^ZWCmcd("dmnRT-A","mcod",24)="        S ^MNU(mSys,0,""mnuMRou"")=mnuMRou  ; source mrou for Menu data"
^ZWCmcd("dmnRT-A","mcod",25)="        ;D ^dmnCom(mSys)  ; RM() -> ^MNU(mSys) and set ""mSysCur"")=mSys"
^ZWCmcd("dmnRT-A","mcod",26)="        ;G ^dmnu"
^ZWCmcd("dmnRT-Q","mcod",27)="Q     Q:$Q Q"
^ZWCmcd("dmnRT-Q","mcod",28)="      Q"
^ZWCmcd("dmnRT-SRM","mcod",29)=";*"
^ZWCmcd("dmnRT-SRM","mcod",30)="SRM   KILL RM NEW ri S ri=0,RM=0"
^ZWCmcd("dmnRT-SRM","mcod",31)="        F RI=1:1 S L=$T(Menu+RI^@mnuMRou) Q:L[""***""  Q:L=""""  DO"
^ZWCmcd("dmnRT-SRM","mcod",32)="          .S L=$TR(L,$C(9,13),"" "")  ; tab -> space, remove cr"
^ZWCmcd("dmnRT-SRM","mcod",33)="          .S T=$P(L,"";;"",2,9) I T'="""" S ri=ri+1,RM(ri)=T,RM=ri"
^ZWCmcd("dmnRT-SRM","mcod",34)="        ;D ^dvstk,b^dv(""Log SRM "",""RI,L,mnuMRou,RM"")"
^ZWCmcd("dmnRT-SRM","mcod",35)="        Q"
^ZWCmcd("dmnRT-SRM","mcod",36)="        ;zwr RM  "
^ZWCmcd("dmnRT-SRM","mcod",37)="      "
^ZWCmcd("dmnu","mcod",1)="dmnu(mSysArg,mSysMRou,mpreVL,mpreLR) ;CKW/ESC   i14may16 gmsa/ rmenu3/ ; 20210720-98 ; Menu Utility run mSys=^MNU(0,""mSysCur"")"
^ZWCmcd("dmnu-AB","mcod",60)=";*  Index abbr either op or menu"
^ZWCmcd("dmnu-AB","mcod",61)=";    : mab, moi, dopLR ?"
^ZWCmcd("dmnu-AB","mcod",62)="AB     S ab=$P(X,"".""),abo=$G(MU(-1,""ab"",ab))"
^ZWCmcd("dmnu-AB","mcod",63)="       S dopLR="""" I abo="""" D ^dv(""? Cant find ab:"",""ab,abo"") Goto WAIT"
^ZWCmcd("dmnu-AB","mcod",64)="       I $D(MU(abo)) S mab=ab  Goto PRMPT   ;new menu"
^ZWCmcd("dmnu-AB","mcod",65)="       S mab=$P(abo,"".""),moi=$P(abo,""."",2)"
^ZWCmcd("dmnu-AB","mcod",66)="       D Gop  ; : dopLR, ..."
^ZWCmcd("dmnu-AB","mcod",67)="       Goto RUN"
^ZWCmcd("dmnu-AUop","mcod",163)=";*"
^ZWCmcd("dmnu-AUop","mcod",164)=";*"
^ZWCmcd("dmnu-AUop","mcod",165)=";*$$Q  : Lop first line of code, opde  ;; descr"
^ZWCmcd("dmnu-AUop","mcod",166)="AUop(dopLR)  NEW Q S Q="""",Lop="""",opde="""""
^ZWCmcd("dmnu-AUop","mcod",167)="     I dopLR="""" S Q=""No Entry Label"" G QA"
^ZWCmcd("dmnu-AUop","mcod",168)="     S LR=$P(dopLR,""("")"
^ZWCmcd("dmnu-AUop","mcod",169)="     I LR'[""^"" S Q=""Not valid without ^"" G QA     ; No context for local sr ref."
^ZWCmcd("dmnu-AUop","mcod",170)="     S Lop=$T(@LR)"
^ZWCmcd("dmnu-AUop","mcod",171)="     S opde=$P(Lop,"";;"",2,9)  ; null if Lop null     "
^ZWCmcd("dmnu-AUop","mcod",172)="     I Lop="""" S Q=""Undef"""
^ZWCmcd("dmnu-Gmab","mcod",153)="Gmab   D T^dws(""mabFL:dPRP,dDE,dnxt1_^MNU(mSys,mab)"")"
^ZWCmcd("dmnu-Gmab","mcod",154)="       S FL=$P(mabFL,""_"") F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),@vn=$G(MU(mab,vn))"
^ZWCmcd("dmnu-Gmab","mcod",155)="       Q"
^ZWCmcd("dmnu-Gmab","mcod",156)=";   mab, moi   :  dopLR  null if undef, opD, opde/dopde op moi   Custom GFL^dgmg (dont want to call out for Menu)"
^ZWCmcd("dmnu-Gop","mcod",157)="Gop    D T^dws(""opFL:dopLR,dopMnu,dopab,dopde,dnxt2_^MNU(mSys,mab,moi)"") "
^ZWCmcd("dmnu-Gop","mcod",158)="         ;sic ref by IMG^dmnCom"
^ZWCmcd("dmnu-Gop","mcod",159)="       I $G(moi)="""" S moi=999  ;sic"
^ZWCmcd("dmnu-Gop","mcod",160)="       S FL=$P(opFL,""_"") F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),@vn=$G(MU(mab,moi,vn))"
^ZWCmcd("dmnu-Gop","mcod",161)="       S opD=$$AUop(dopLR)  ; null defined, else not ( : Lop, opde)"
^ZWCmcd("dmnu-Gop","mcod",162)="       Q"
^ZWCmcd("dmnu-L1","mcod",126)=";* : L1 if not listed/matched"
^ZWCmcd("dmnu-L1","mcod",127)="L1   S U=""_"",L1=mab_U_dDE_U_dPRP"
^ZWCmcd("dmnu-L1","mcod",128)="     I L1[mch D Wmab S L1="""" Q"
^ZWCmcd("dmnu-L1","mcod",129)="     Q"
^ZWCmcd("dmnu-L2","mcod",130)="L2   S L2=dopLR_U_dopab_U_dopde_U_dopMnu"
^ZWCmcd("dmnu-L2","mcod",131)="     I L2[mch D:L1'="""" Wmab D Wop"
^ZWCmcd("dmnu-L2","mcod",132)="     Q"
^ZWCmcd("dmnu-LIS","mcod",105)="LIS    W #,mab,"".  "",$G(MU(mab,""dDE"")),""  """
^ZWCmcd("dmnu-LIS","mcod",106)="       I mpreLR[""^"" D @mpreLR  ; usu dis^*Menu  header dashboard"
^ZWCmcd("dmnu-LIS","mcod",107)="       F moi=1:1 Q:'$D(MU(mab,moi))  D Gop,Wop"
^ZWCmcd("dmnu-LIS","mcod",108)="       W !"
^ZWCmcd("dmnu-LIS","mcod",109)="       Q"
^ZWCmcd("dmnu-LISTall","mcod",101)=";*"
^ZWCmcd("dmnu-LISTall","mcod",102)="LISTall  U $P S Cmab=mab W # S mnL=""mm,cp,kp,ac"" D LIST^dmnList"
^ZWCmcd("dmnu-LISTall","mcod",103)="       S mab=Cmab G WAIT"
^ZWCmcd("dmnu-LISTall","mcod",104)="; List menu for dialog"
^ZWCmcd("dmnu-LISmSys","mcod",110)=";*"
^ZWCmcd("dmnu-LISmSys","mcod",111)="LISmSys  NEW RI  "
^ZWCmcd("dmnu-LISmSys","mcod",112)="       USE $P W:$X ! W ""List all Menu System id's mSys-   in $zgl: "",$zgl,!"
^ZWCmcd("dmnu-LISmSys","mcod",113)="       S m=0 F mi=1:1 S m=$O(^MNU(m)) Q:m=""""  W:$X ! W ""  "",mi,"") "",m,!  S RI(mi)=m"
^ZWCmcd("dmnu-LISmSys","mcod",114)="       R ""Select by n (or mSys) "",X"
^ZWCmcd("dmnu-LISmSys","mcod",115)="       S mnew="""" I +X S mnew=$G(RI(+X)),X="""""
^ZWCmcd("dmnu-LISmSys","mcod",116)="       I X'="""",$D(^MNU(X))=11 S mnew=X"
^ZWCmcd("dmnu-LISmSys","mcod",117)="       I mnew'="""" S mSys=mnew Goto newmSys"
^ZWCmcd("dmnu-LISmSys","mcod",118)="       G PRMPT"
^ZWCmcd("dmnu-OPn","mcod",51)=";*  Numeric option entry"
^ZWCmcd("dmnu-OPn","mcod",52)="OPn    S moi=+X"
^ZWCmcd("dmnu-OPn","mcod",53)="       S dopLR=$G(MU(mab,moi,""dopLR""))"
^ZWCmcd("dmnu-OPn","mcod",54)="         I dopLR'="""" Goto RUN       "
^ZWCmcd("dmnu-OPn","mcod",55)="       S dopMnu=$G(MU(mab,moi,""dopMnu""))   ; $ man menu or whole new mSys"
^ZWCmcd("dmnu-OPn","mcod",56)="       I dopMnu'="""",$D(^MNU(dopMnu)) S mSys=dopMnu Goto newmSys"
^ZWCmcd("dmnu-OPn","mcod",57)="       I dopMnu'="""" Goto RNM"
^ZWCmcd("dmnu-OPn","mcod",58)="       W !,""? not found."",!"
^ZWCmcd("dmnu-OPn","mcod",59)="       G WAIT"
^ZWCmcd("dmnu-PRMPT","mcod",33)="PRMPT  I $G(mab)="""" D b^dv(""Lost mab "",""mab,mmo,mSys"") G RE"
^ZWCmcd("dmnu-PRMPT","mcod",34)="       I '$D(mmo)!'$D(dPRP) G RE"
^ZWCmcd("dmnu-PRMPT","mcod",35)="       U $P W:$X !"
^ZWCmcd("dmnu-PRMPT","mcod",36)="       I $G(mmo)[""#"" D LIS"
^ZWCmcd("dmnu-PRMPT","mcod",37)="       W mab,"".  "" I $G(dPR)'="""" W dPRP I dPRP'["":"" W "": """
^ZWCmcd("dmnu-PRMPT","mcod",38)="       R X"
^ZWCmcd("dmnu-Q","mcod",76)="Q      Q:$Q Q I Q'="""" D b^dv(""Err in Menu Op not handled."",""Q,dopLR"")"
^ZWCmcd("dmnu-Q","mcod",77)="       Q"
^ZWCmcd("dmnu-QA","mcod",173)="QA   Q Q"
^ZWCmcd("dmnu-QA","mcod",174)=";*"
^ZWCmcd("dmnu-QA","mcod",175)=""
^ZWCmcd("dmnu-QA","mcod",176)=";* * * * * *"
^ZWCmcd("dmnu-RE","mcod",2)=";*$$Q rev add args/opt 20jul21"
^ZWCmcd("dmnu-RE","mcod",3)="  ;  No locals, opt args  vs ^MNU(0,""mSysCur"") etc."
^ZWCmcd("dmnu-RE","mcod",4)="  ;  See ^dmnCom(mSys) of RM() after ^dmnRT read from $T of @mnuMRou to RM(), compile Menu to ^MNU(mSys)"
^ZWCmcd("dmnu-RE","mcod",5)="  ;"
^ZWCmcd("dmnu-RE","mcod",6)="RE  NEW Q S Q="""""
^ZWCmcd("dmnu-RE","mcod",7)="    I $zro'[""mgbFL"",$zro'[""rd2mg"" S zro=$zro D b^dv(""Depends on ^dgmg in rmgbFL* or rd2mg"",""zro"")"
^ZWCmcd("dmnu-RE","mcod",8)="    S mpreVL=$G(mpreVL),mpreLR=$G(mpreLR)    "
^ZWCmcd("dmnu-RE","mcod",9)="    I $G(mSysArg)'="""" S mSys=mSysArg,^MNU(0,""mSysCur"")=mSys"
^ZWCmcd("dmnu-RE","mcod",10)="    E  S mSys=$G(^MNU(0,""mSysCur"")) I mSys="""" DO  Q"
^ZWCmcd("dmnu-RE","mcod",11)="      .D ^dvstk S Q=""Had no mSys ? for Menu ^MNU(0,'mSysCur')"""
^ZWCmcd("dmnu-RE","mcod",12)="      .D b^dv(Q,""mSys"")"
^ZWCmcd("dmnu-RE","mcod",13)="    I $G(mSysMRou)'="""" DO  ;"
^ZWCmcd("dmnu-RE","mcod",14)="      .D ^dmnRT(mSys,mSysMRou) ; Read $T menu source to RM()"
^ZWCmcd("dmnu-RE","mcod",15)="      .I $D(RM)<9 D b^dv(""Failed to fine Menu source"",""mSys,mnuMRou,mpreLR"") "
^ZWCmcd("dmnu-RE","mcod",16)="      .D ^dmnCom(mSys,mpreVL,mpreLR)  ; compile RM() to ^MNU(mSys,"
^ZWCmcd("dmnu-RE","mcod",17)="    I mpreVL'="""" DO  ;"
^ZWCmcd("dmnu-RE","mcod",18)="      .S mpreLR=""VL^dmnDIS"""
^ZWCmcd("dmnu-RE","mcod",19)="      .S ^MNU(mSys,0,""mpreLR"")=mpreLR"
^ZWCmcd("dmnu-RE","mcod",20)="      .S ^MNU(mSys,0,""mpreVL"")=mpreVL                                                      "
^ZWCmcd("dmnu-RE","mcod",21)="    KILL MU  MERGE MU=^MNU(mSys) ; See @mabFL _^MNU(mSys,0)"
^ZWCmcd("dmnu-RE","mcod",22)="    D ^dmnIMG  ; msys0FL, mabFL, opFL"
^ZWCmcd("dmnu-RE","mcod",23)="    D T^dws(""msys0FL:mmo,curmab,mnL,mpreLR,zro_^MNU(mSys,0)"")"
^ZWCmcd("dmnu-RE","mcod",24)="    D GFL^dgmg(msys0FL)"
^ZWCmcd("dmnu-RE","mcod",25)="    I curmab'="""" S mab=curmab"
^ZWCmcd("dmnu-RE","mcod",26)="    I mab="""" S mab=""mm""  ;default"
^ZWCmcd("dmnu-RE","mcod",27)="    I mmo="""" S mmo=""mm""  ;default"
^ZWCmcd("dmnu-RE","mcod",28)="  ;  mab  Current Set"
^ZWCmcd("dmnu-RNM","mcod",78)=";*  New Menu op"
^ZWCmcd("dmnu-RNM","mcod",79)="RNM    I dopMnu'="""" S mab=dopMnu G PRMPT"
^ZWCmcd("dmnu-RNM","mcod",80)="       W:$X ! W "" ?? Menu ("",dopMnu,"") "" "
^ZWCmcd("dmnu-RNM","mcod",81)="       G PRMPT"
^ZWCmcd("dmnu-RUN","mcod",87)="RUN    I dopLR'[""^"" W:$X ! W "" ???"" G PRMPT"
^ZWCmcd("dmnu-RUN","mcod",88)="       I $T(@$P(dopLR,""(""))="""" W:$X ! W ""  MCode not accessible ("",dopLR,"") "",!,""  in $zro="",$zro,!! G WAIT"
^ZWCmcd("dmnu-RUN","mcod",89)="       U $P W:$X ! W ""Option "",$G(X),""  #"",moi,""  "",dopLR,""-   -"",!"
^ZWCmcd("dmnu-RUN","mcod",90)="       S rdX=$G(X)"
^ZWCmcd("dmnu-RUN","mcod",91)="       F f=""dopLR"",""dopde"",""moi"",""rdX"",""mab"" S ^MNU(mSys,0,f)=$G(@f)"
^ZWCmcd("dmnu-RUN","mcod",92)="       KILL MU   "
^ZWCmcd("dmnu-RUN","mcod",93)="       KILL mab,moi,Cmab,dopMnu,dopab,dopde,evdt,mnu,mi,mnL,mnLx,mabFL,mpreLR,dPRP,dDE,dnxt1,nxt,rdX"
^ZWCmcd("dmnu-RUN","mcod",94)="       D ^dmnKgp    ;KILL all but dopLR"
^ZWCmcd("dmnu-RUN","mcod",95)="       ;S $ETRAP=""D ^dbgET""  ; not working, punt down the road..."
^ZWCmcd("dmnu-RUN","mcod",96)="       D @dopLR"
^ZWCmcd("dmnu-RUN","mcod",97)="       ;S $ETRAP="""""
^ZWCmcd("dmnu-RUN","mcod",98)="       ;D b^dv(""Log finished Run"",""dopLR,moi,mab"")"
^ZWCmcd("dmnu-RUN","mcod",99)="       U $P W:$X ! W ""Finished Option..."",$G(dopLR),""  "",! G WAIT"
^ZWCmcd("dmnu-RUN","mcod",100)="       G RE"
^ZWCmcd("dmnu-RX","mcod",39)="RX     I X="".""  G Q:mab=""mm"" S X=""""  ;exit mm, else go to mm"
^ZWCmcd("dmnu-RX","mcod",40)="       I X=""h"" HALT  ; debug quick out"
^ZWCmcd("dmnu-RX","mcod",41)="       I X="""" S mab=""mm"" G mab"
^ZWCmcd("dmnu-RX","mcod",42)="       I X=""??"" G LISTall"
^ZWCmcd("dmnu-RX","mcod",43)="       I X="">?"" G LISmSys"
^ZWCmcd("dmnu-RX","mcod",44)="       I X[""?"",$P(X,""?"")'="""" G SrchX"
^ZWCmcd("dmnu-RX","mcod",45)="       I X=""/"" W # G PRMPT"
^ZWCmcd("dmnu-RX","mcod",46)="       I X?1.2n  G OPn"
^ZWCmcd("dmnu-RX","mcod",47)="       I X[""."" G AB"
^ZWCmcd("dmnu-RX","mcod",48)="       I X'="""",$D(^MNU(X))=11 S mSys=X Goto newmSys  ; Type Full mSys"
^ZWCmcd("dmnu-RX","mcod",49)="       W !,"" ? I dont understand. '"",X,""' ?"",!"
^ZWCmcd("dmnu-RX","mcod",50)="       G WAIT"
^ZWCmcd("dmnu-SrchX","mcod",119)=";*  Search All"
^ZWCmcd("dmnu-SrchX","mcod",120)="SrchX  S mch=$P(X,""?""),Cmab=mab I mch="""" G LISTall"
^ZWCmcd("dmnu-SrchX","mcod",121)="       D mnL^dmnCom(mSys)  ; mnL"
^ZWCmcd("dmnu-SrchX","mcod",122)="       F mi=1:1:$L(mnL,"","") S mab=$P(mnL,"","",mi) DO"
^ZWCmcd("dmnu-SrchX","mcod",123)="         .D Gmab,L1"
^ZWCmcd("dmnu-SrchX","mcod",124)="         .F moi=1:1 Q:'$D(MU(mab,moi))  D Gop,L2"
^ZWCmcd("dmnu-SrchX","mcod",125)="       S mab=Cmab G WAIT"
^ZWCmcd("dmnu-WAIT","mcod",82)=";*"
^ZWCmcd("dmnu-WAIT","mcod",83)="WAIT   U $P R !,""Ret to continue:"",X"
^ZWCmcd("dmnu-WAIT","mcod",84)="         I X'="""" G RX  ;option already... ?"
^ZWCmcd("dmnu-WAIT","mcod",85)="       I $G(mab)="""" G RE"
^ZWCmcd("dmnu-WAIT","mcod",86)="       G PRMPT"
^ZWCmcd("dmnu-Wmab","mcod",133)=";*"
^ZWCmcd("dmnu-Wmab","mcod",134)="Wmab W:$X ! W mab,"".  "",dDE,""    {"",dPRP,""}"",!"
^ZWCmcd("dmnu-Wmab","mcod",135)="     S L1=""""   ; only Dis once for ops that match"
^ZWCmcd("dmnu-Wmab","mcod",136)="     Q"
^ZWCmcd("dmnu-Wop","mcod",137)=";*"
^ZWCmcd("dmnu-Wop","mcod",138)="Wop    W:$X ! W moi,"")"""
^ZWCmcd("dmnu-Wop","mcod",139)="       I opD'="""" W ""*"""
^ZWCmcd("dmnu-Wop","mcod",140)="       W ""  """
^ZWCmcd("dmnu-Wop","mcod",141)="       I dopab'="""" W dopab,"".  """
^ZWCmcd("dmnu-Wop","mcod",142)="       DO  ;"
^ZWCmcd("dmnu-Wop","mcod",143)="         .I dopde'="""" W ?15,dopde"
^ZWCmcd("dmnu-Wop","mcod",144)="         .E  W ""Undescribed op """
^ZWCmcd("dmnu-Wop","mcod",145)="       W ""  "",?50 DO"
^ZWCmcd("dmnu-Wop","mcod",146)="            .I dopLR[""^"" W dopLR,! Q"
^ZWCmcd("dmnu-Wop","mcod",147)="            .I dopMnu'="""" W ""Menu: "",dopMnu,! Q"
^ZWCmcd("dmnu-Wop","mcod",148)="            .W ""*** Destination ? dopLR or dopMnu"",! Q"
^ZWCmcd("dmnu-Wop","mcod",149)="       Q"
^ZWCmcd("dmnu-Wop","mcod",150)=";"
^ZWCmcd("dmnu-Wop","mcod",151)="; Stripped Down, Custom GFL Get list of vars, two lists mabFL menu, opFL option-line"
^ZWCmcd("dmnu-Wop","mcod",152)=";      MU(mab)   Menu fields  @mabFL"
^ZWCmcd("dmnu-mab","mcod",29)="mab    S mab=$G(mab) S:mab="""" mab=""mm"",mmo="""""
^ZWCmcd("dmnu-mab","mcod",30)="         I '$D(MU(mab)) S mab=""mm"""
^ZWCmcd("dmnu-mab","mcod",31)="       D Gmab I dPRP="""" S dPRP=""Select Option- """
^ZWCmcd("dmnu-mab","mcod",32)="       ; fall thru   mab, mmo, dPRP, MU()"
^ZWCmcd("dmnu-newmSys","mcod",68)=";*  either prefab oltion $EDNi  to change, eg by op#  OR type mSys, no punct"
^ZWCmcd("dmnu-newmSys","mcod",69)="newmSys  S ^MNU(0,""mSysCur"")=mSys "
^ZWCmcd("dmnu-newmSys","mcod",70)="         USE $P W:$X ! W ""Changing mSys - diff Menu System - """
^ZWCmcd("dmnu-newmSys","mcod",71)="         R !,""Ret to continue:"",X I X=""."" Goto Q"
^ZWCmcd("dmnu-newmSys","mcod",72)="         S mnuMRou=$G(^MNU(mSys,0,""mnuMRou""))"
^ZWCmcd("dmnu-newmSys","mcod",73)="         I mnuMRou'="""" GOTO A^dmnRT  ; bypass arg, Goto to preserve place on stack"
^ZWCmcd("dmnu-newmSys","mcod",74)="         Goto ^dmnu  ;"
^ZWCmcd("dmnu-newmSys","mcod",75)=";Goto Q to finish"
^ZWCmcd("duv","mcod",1)="duv(dvM,VVL)  ;CKW/ESC i4feb23 gmsa/ rzro3/ ;20230204-10; ^dz* Utility variant of ^dv Debug"
^ZWCmcd("duv","mcod",2)=";  new: bug^duv(M,VL)"
^ZWCmcd("duv","mcod",3)="  ;"
^ZWCmcd("duv","mcod",4)="  ;"
^ZWCmcd("duv","mcod",5)="  ; Works from, @VL,  *VL* lists"
^ZWCmcd("duv","mcod",6)="  ;"
^ZWCmcd("duv","mcod",7)="  S %zshc=2"
^ZWCmcd("duv","mcod",8)="  NEW %KMO,%c"
^ZWCmcd("duv-A","mcod",14)="  ;* VVL, dvM, $IO ?"
^ZWCmcd("duv-A","mcod",15)="A NEW d,%i1,%i2,%VL,%n S d=$IO W:$X ! W ""** Debug "",%c,"":  "",dvM,!"
^ZWCmcd("duv-A","mcod",16)="  I $E(VVL)=""@"" S x=$P(VVL,""@"",2),VVL=@x B  ;"
^ZWCmcd("duv-A","mcod",17)="  F %i1=1:1:$L(VVL,"","") S %VL=$P(VVL,"","",%i1) DO  "
^ZWCmcd("duv-A","mcod",18)="  .I %VL'[""VL"" S %vn=%VL D WV Q  ;just one var"
^ZWCmcd("duv-A","mcod",19)="  .W:$X !,"" ** "" W %VL,""="" Q:$D(@%VL)=0  S %VL=@%VL W %VL,!  KILL:%KMO @%VL"
^ZWCmcd("duv-A","mcod",20)="  .F %i2=1:1:$L(%VL,"","") S %vn=$P(%VL,"","",%i2) D WV"
^ZWCmcd("duv-A","mcod",21)="  ;KILL VVL  if %KMO"
^ZWCmcd("duv-Ilog","mcod",37)=";* Open devdvlog"
^ZWCmcd("duv-Ilog","mcod",38)="Ilog  S devdvlog=""dvlog.txt"" OPEN devdvlog:(newversion)"
^ZWCmcd("duv-Ilog","mcod",39)="   U devdvlog W !,""Default ^duv log file ???  "",$ZD($H),!! D ^dvstk W !!!"
^ZWCmcd("duv-Ilog","mcod",40)="   Q"
^ZWCmcd("duv-Q","mcod",22)="Q  Q"
^ZWCmcd("duv-WA","mcod",70)="  ;*"
^ZWCmcd("duv-WA","mcod",71)="  ;  %vn array;  Count nodes"
^ZWCmcd("duv-WA","mcod",72)="WA  ;"
^ZWCmcd("duv-WA","mcod",73)="  S %S="""",%n=0 F %3=0:1 S %S=$O(@%vn@(%S)) Q:%S=""""  I $D(@%vn@(%S))>9 S %n=%n+1"
^ZWCmcd("duv-WA","mcod",74)="  W:$X ! W ""Array "",%vn,"" has "",%3,"" nodes"" I %n W "" and "",%n,"" with SubNodes"",!"
^ZWCmcd("duv-WA","mcod",75)="  KILL:%KMO @%vn"
^ZWCmcd("duv-WA","mcod",76)="  Q"
^ZWCmcd("duv-WQ","mcod",69)="WQ KILL:%KMO @%vn Q"
^ZWCmcd("duv-WV","mcod",61)=";*"
^ZWCmcd("duv-WV","mcod",62)="  ; %vn, @%vn,  $D(@vn)"
^ZWCmcd("duv-WV","mcod",63)="WV S %vn=$P(%vn,""_"") W:$X ! S %D=$D(@%vn) I %D>9 D WA Q:%D#2=0"
^ZWCmcd("duv-WV","mcod",64)="  S %v=$G(@%vn) I %v="""" S %v=""null"" S:$D(@%vn)#2=0 %v=""UNDEF."" W %vn,""="",%v,! G WQ"
^ZWCmcd("duv-WV","mcod",65)="  I +%v=%v W %vn,""="",%v,! G WQ"
^ZWCmcd("duv-WV","mcod",66)="  I %v W %vn,""="",%v,"" ("",+%v,"") "",! G WQ"
^ZWCmcd("duv-WV","mcod",67)="  I $L(%v)>50 W ""var "",%vn,"" (L="",$L(%v),"") '"",$E(%v,1,50),""..."",! G WQ"
^ZWCmcd("duv-WV","mcod",68)="  W %vn,""='"",%v,""' "",! "
^ZWCmcd("duv-ZBY","mcod",77)="  ;*"
^ZWCmcd("duv-ZBY","mcod",78)=" ;* * *   No internal Refs"
^ZWCmcd("duv-ZBY","mcod",79)="ZBY NEW Z2,me,stk,i,CA"
^ZWCmcd("duv-ZBY","mcod",80)=" zsh ""S"":Z2  S me=""^""_$T(+0),BY=""? ""_me"
^ZWCmcd("duv-ZBY","mcod",81)=" S stk="""" F i=0:1 S stk=$O(Z2(""S"",stk)) Q:stk=""""  S CA=Z2(""S"",stk) I CA'[me S BY=CA Q"
^ZWCmcd("duv-ZBY","mcod",82)=" Q"
^ZWCmcd("duv-ZBY","mcod",83)=" ; * * *"
^ZWCmcd("duv-aa","mcod",87)="aa  W:$X ! W ""** Arrays-"",! "
^ZWCmcd("duv-aa","mcod",88)="    S %vv=""%"" F %i=0:1 S %vv=$O(@%vv) Q:%vv=""""  DO  ;  Find Arrays midst all vars"
^ZWCmcd("duv-aa","mcod",89)="    .I $D(@%vv)>9 S %vn=%vv D WA Q"
^ZWCmcd("duv-aa","mcod",90)="    Q"
^ZWCmcd("duv-b","mcod",41)=";*"
^ZWCmcd("duv-b","mcod",42)="  ;Entry  b^duv  Save $I, USE 0 zsh ? Break"
^ZWCmcd("duv-b","mcod",43)="b(dvM,VVL) "
^ZWCmcd("duv-b2","mcod",44)="b2  NEW dBdv,%zshc,%3,%D,%KMO,%S,%i,%n,%v,%vn,%vv"
^ZWCmcd("duv-b2","mcod",45)="    S dBdv=$IO USE 0 S %zshc=3 D d2 ;D ^duv($G(dvM),$G(VVL))"
^ZWCmcd("duv-b2","mcod",46)="    B"
^ZWCmcd("duv-b2","mcod",47)="    U dBdv"
^ZWCmcd("duv-b2","mcod",48)="    Q"
^ZWCmcd("duv-bug","mcod",23)=";*  1aug17"
^ZWCmcd("duv-bug","mcod",24)="bug(dvM,VVL) I $G(dvM)="""" S dvM=""Bug! NOS"""
^ZWCmcd("duv-bug","mcod",25)="   I $G(VVL)="""" S VVL=""dvM"""
^ZWCmcd("duv-bug","mcod",26)="   D ^dvstk"
^ZWCmcd("duv-bug","mcod",27)="   G b2  ;simulate d b^dv wihtout extra stack layer"
^ZWCmcd("duv-bug","mcod",28)="   Q"
^ZWCmcd("duv-d2","mcod",9)="d2  I $G(dvM)="""" S dvM=""Err NOS ^duv"" S:$G(VVL)="""" VVL=""id"""
^ZWCmcd("duv-d2","mcod",10)="  S %KMO=0 I dvM[""KILL"" S %KMO=1"
^ZWCmcd("duv-d2","mcod",11)="  I $G(VVL)="""" S VVL=""@VL"""
^ZWCmcd("duv-d2","mcod",12)="  zsh ""s"":%ZSH"
^ZWCmcd("duv-d2","mcod",13)="    S %c=$G(%ZSH(""S"",%zshc)) I %c="""" S %c=""caller"""
^ZWCmcd("duv-err","mcod",55)=";*  Generc error  D be^dv"
^ZWCmcd("duv-err","mcod",56)=";RefBy: none locally  See G d2 ... SIC --- ?external entry, yes lots,~35 old"
^ZWCmcd("duv-err","mcod",57)=";  See cd ~/km7r;  grep -n ""err\^duv"" */r*/*.m  ; ..."
^ZWCmcd("duv-err","mcod",58)="err(dvM,VL) I $G(dvM)="""" ;  call with or without ()"
^ZWCmcd("duv-err","mcod",59)="     S VL=$G(VL)"
^ZWCmcd("duv-err","mcod",60)="     S dvM=""Error NOS"",VVL="""" G d2"
^ZWCmcd("duv-ka","mcod",84)=";*  Summarize and KILL (if %KMO) Arrays - EntryPoint"
^ZWCmcd("duv-ka","mcod",85)="ka  S %KMO=1 G aa ;List One line and Kill Arrays     D ka^duv"
^ZWCmcd("duv-la","mcod",86)="la  S %KMO=0  ;Just list      D la^duv"
^ZWCmcd("duv-log","mcod",29)=";*"
^ZWCmcd("duv-log","mcod",30)=";  ^dv output to log file  devdvlog"
^ZWCmcd("duv-log","mcod",31)="log(dvM,VVL) S dBdv=$IO I $G(devdvlog)="""" D Ilog"
^ZWCmcd("duv-log","mcod",32)="   I $G(devdvlog)="""" U 0 BREAK  Q  ;Bug ?"
^ZWCmcd("duv-log","mcod",33)="   U devdvlog S %zshc=3"
^ZWCmcd("duv-log","mcod",34)="   D d2"
^ZWCmcd("duv-log","mcod",35)="   U dBdv"
^ZWCmcd("duv-log","mcod",36)="   Q"
^ZWCmcd("duv-stb","mcod",125)="stb KILL %tb S %tb=2 F %i=1:1:$L(VWL,"","") DO  ;"
^ZWCmcd("duv-stb","mcod",126)="   .S %nw=$P(VWL,"","",%i),%w=$P(%nw,"":"",2),%vn=$P(%nw,"":"")"
^ZWCmcd("duv-stb","mcod",127)="   .I $L(%vn)+1>%w S %w=$L(%vn)+1  ; min width for label"
^ZWCmcd("duv-stb","mcod",128)="   .I '%w S %w=10 B"
^ZWCmcd("duv-stb","mcod",129)="   .S %tb(%i)=%tb,%tb=%tb+%w"
^ZWCmcd("duv-stb","mcod",130)=" S %tb(%i+1)=%tb"
^ZWCmcd("duv-stb","mcod",131)=" Q"
^ZWCmcd("duv-stb","mcod",132)=""
^ZWCmcd("duv-stb","mcod",133)="  "
^ZWCmcd("duv-w","mcod",118)=";*"
^ZWCmcd("duv-w","mcod",119)="w(VWL)  I $G(VWL)="""" B  Q"
^ZWCmcd("duv-w","mcod",120)=" D stb"
^ZWCmcd("duv-w","mcod",121)=" W:$X !"
^ZWCmcd("duv-w","mcod",122)=" F %i=1:1:$L(VWL,"","") S %vn=$P($P(VWL,"","",%i),"":"") W ?%tb(%i),$G(@%vn),"" """
^ZWCmcd("duv-w","mcod",123)=" W !"
^ZWCmcd("duv-w","mcod",124)=" Q"
^ZWCmcd("duv-wh","mcod",114)="wh(VWL)  D stb   W:$X !"
^ZWCmcd("duv-wh","mcod",115)=" F %i=1:1:$L(VWL,"","") S %vn=$P($P(VWL,"","",%i),"":"") W ?%tb(%i),%vn,"" """
^ZWCmcd("duv-wh","mcod",116)=" W !"
^ZWCmcd("duv-wh","mcod",117)=" Q"
^ZWCmcd("duv-wv","mcod",99)="wv S %v=$G(@%vn)"
^ZWCmcd("duv-wv","mcod",100)=" W:$X ! W %vn,""="",?10"
^ZWCmcd("duv-wv","mcod",101)=" I %v="""" W ""null."",! Q"
^ZWCmcd("duv-wv","mcod",102)=" I +%v=%v W %v,! Q"
^ZWCmcd("duv-wv","mcod",103)=" I $L(%v)+$X>80 DO  Q"
^ZWCmcd("duv-wv","mcod",104)=" .W ""'"" S %x=80-$X,%L=$L(%v) W $E(%v,1,%x),! S %x=%x+1 ;long string"
^ZWCmcd("duv-wv","mcod",105)=" .W ?10,""... ($L="",%L,"") "" F  DO  S %x=%x2+1 Q:%x>%L  W ?9,""..."""
^ZWCmcd("duv-wv","mcod",106)=" ..W ?9,"" ..."" S %x2=80-$X+%x W $E(%v,%x,%x2),! "
^ZWCmcd("duv-wv","mcod",107)=" W "" '"",%v,""' "",!"
^ZWCmcd("duv-wv","mcod",108)=" Q"
^ZWCmcd("duv-zar","mcod",109)=" ;* array @%vn"
^ZWCmcd("duv-zar","mcod",110)="zar S %S="""",%n=0 F %3=0:1 S %S=$O(@%vn@(%S)) Q:%S=""""  I $D(@%vn@(%S))>9 S %n=%n+1"
^ZWCmcd("duv-zar","mcod",111)=" W:$X ! W ""Array "",%vn,"" has "",%3,"" nodes"" I %n W "" with "",%n,"" SubNodes"",!"
^ZWCmcd("duv-zar","mcod",112)=" Q"
^ZWCmcd("duv-zar","mcod",113)="; * * *  29Oct15"
^ZWCmcd("duv-zshb","mcod",49)="    ;*  zsh  & Break (Use 0)   vs ^dvstk"
^ZWCmcd("duv-zshb","mcod",50)="zshb(dvM,VVL) NEW dBdv,%zshc"
^ZWCmcd("duv-zshb","mcod",51)="    S dBdv=$IO USE 0 S %zshc=3 D d2 ;D ^duv($G(dvM),$G(VVL))"
^ZWCmcd("duv-zshb","mcod",52)="    W:$X ! W ""ZSH:-"",! zsh  W !"
^ZWCmcd("duv-zshb","mcod",53)="    B  U dBdv Q"
^ZWCmcd("duv-zshb","mcod",54)="    Q"
^ZWCmcd("duv-zwr","mcod",91)=";*"
^ZWCmcd("duv-zwr","mcod",92)=";*   Sans Arrays, except one line, excludes %* vars"
^ZWCmcd("duv-zwr","mcod",93)="zwr   S %v0=""%zzzzz"" F %=0:1 S %v0=$O(@%v0) Q:%v0=""""  DO"
^ZWCmcd("duv-zwr","mcod",94)=" .S %vn=%v0"
^ZWCmcd("duv-zwr","mcod",95)=" .I $D(@%v0)>2 D:$D(@%v0)#2 wv D zar Q"
^ZWCmcd("duv-zwr","mcod",96)=" .D wv"
^ZWCmcd("duv-zwr","mcod",97)=" W:$X ! W "" That's All Folks ("",$G(%),"" vars)  !"",!!"
^ZWCmcd("duv-zwr","mcod",98)=" Q"
^ZWCmcd("dv","mcod",1)="dv(dvM,VVL)  ;CKW/ESC i28Aug14 gmsa/ rddv3/ ; 20220515  ;  Debug Var lists "
^ZWCmcd("dv","mcod",2)=";  new: bug^dv(M,VL)"
^ZWCmcd("dv","mcod",3)="  ;"
^ZWCmcd("dv","mcod",4)="  ;     gboo, rz/     ^f    with ^fd* TP Doc:  H7r/  aUtil/  dv/ "
^ZWCmcd("dv","mcod",5)="  ; or d ka^dv  Summarize and Kill Arrays"
^ZWCmcd("dv","mcod",6)="  ;   Refs ^fd*  in gboo/ rH/"
^ZWCmcd("dv","mcod",7)="  ;"
^ZWCmcd("dv","mcod",8)="  ;"
^ZWCmcd("dv","mcod",9)="  ; Works from, @VL,  *VL* lists"
^ZWCmcd("dv","mcod",10)="  ;"
^ZWCmcd("dv","mcod",11)="  S %zshc=2"
^ZWCmcd("dv","mcod",12)="  NEW %KMO,%c"
^ZWCmcd("dv-A","mcod",18)="  ;* VVL, dvM, $IO ?"
^ZWCmcd("dv-A","mcod",19)="A NEW d,%i1,%i2,%VL,%n S d=$IO W:$X ! W ""** Debug "",%c,"":  "",dvM,!"
^ZWCmcd("dv-A","mcod",20)="  I $E(VVL)=""@"" S x=$P(VVL,""@"",2),VVL=@x B  ;"
^ZWCmcd("dv-A","mcod",21)="  F %i1=1:1:$L(VVL,"","") S %VL=$P(VVL,"","",%i1) DO  "
^ZWCmcd("dv-A","mcod",22)="  .I %VL'[""VL"" S %vn=%VL D WV Q  ;just one var"
^ZWCmcd("dv-A","mcod",23)="  .W:$X !,"" ** "" W %VL,""="" Q:$D(@%VL)=0  S %VL=@%VL W %VL,!  KILL:%KMO @%VL"
^ZWCmcd("dv-A","mcod",24)="  .F %i2=1:1:$L(%VL,"","") S %vn=$P(%VL,"","",%i2) D WV"
^ZWCmcd("dv-A","mcod",25)="  ;KILL VVL  if %KMO"
^ZWCmcd("dv-Ilog","mcod",41)=";* Open devdvlog"
^ZWCmcd("dv-Ilog","mcod",42)="Ilog  S devdvlog=""dvlog.txt"" OPEN devdvlog:(newversion)"
^ZWCmcd("dv-Ilog","mcod",43)="   U devdvlog W !,""Default ^dv log file ???  "",$ZD($H),!! D ^dvstk W !!!"
^ZWCmcd("dv-Ilog","mcod",44)="   Q"
^ZWCmcd("dv-Q","mcod",26)="Q  Q"
^ZWCmcd("dv-WA","mcod",74)="  ;*"
^ZWCmcd("dv-WA","mcod",75)="  ;  %vn array;  Count nodes"
^ZWCmcd("dv-WA","mcod",76)="WA  ;"
^ZWCmcd("dv-WA","mcod",77)="  S %S="""",%n=0 F %3=0:1 S %S=$O(@%vn@(%S)) Q:%S=""""  I $D(@%vn@(%S))>9 S %n=%n+1"
^ZWCmcd("dv-WA","mcod",78)="  W:$X ! W ""Array "",%vn,"" has "",%3,"" nodes"" I %n W "" and "",%n,"" with SubNodes"",!"
^ZWCmcd("dv-WA","mcod",79)="  KILL:%KMO @%vn"
^ZWCmcd("dv-WA","mcod",80)="  Q"
^ZWCmcd("dv-WQ","mcod",73)="WQ KILL:%KMO @%vn Q"
^ZWCmcd("dv-WV","mcod",65)=";*"
^ZWCmcd("dv-WV","mcod",66)="  ; %vn, @%vn,  $D(@vn)"
^ZWCmcd("dv-WV","mcod",67)="WV S %vn=$P(%vn,""_"") W:$X ! S %D=$D(@%vn) I %D>9 D WA Q:%D#2=0"
^ZWCmcd("dv-WV","mcod",68)="  S %v=$G(@%vn) I %v="""" S %v=""null"" S:$D(@%vn)#2=0 %v=""UNDEF."" W %vn,""="",%v,! G WQ"
^ZWCmcd("dv-WV","mcod",69)="  I +%v=%v W %vn,""="",%v,! G WQ"
^ZWCmcd("dv-WV","mcod",70)="  I %v W %vn,""="",%v,"" ("",+%v,"") "",! G WQ"
^ZWCmcd("dv-WV","mcod",71)="  I $L(%v)>50 W ""var "",%vn,"" (L="",$L(%v),"") '"",$E(%v,1,50),""..."",! G WQ"
^ZWCmcd("dv-WV","mcod",72)="  W %vn,""='"",%v,""' "",! "
^ZWCmcd("dv-ZBY","mcod",81)="  ;*"
^ZWCmcd("dv-ZBY","mcod",82)=" ;* * *   No internal Refs"
^ZWCmcd("dv-ZBY","mcod",83)="ZBY NEW Z2,me,stk,i,CA"
^ZWCmcd("dv-ZBY","mcod",84)=" zsh ""S"":Z2  S me=""^""_$T(+0),BY=""? ""_me"
^ZWCmcd("dv-ZBY","mcod",85)=" S stk="""" F i=0:1 S stk=$O(Z2(""S"",stk)) Q:stk=""""  S CA=Z2(""S"",stk) I CA'[me S BY=CA Q"
^ZWCmcd("dv-ZBY","mcod",86)=" Q"
^ZWCmcd("dv-ZBY","mcod",87)=" ; * * *"
^ZWCmcd("dv-aa","mcod",91)="aa  W:$X ! W ""** Arrays-"",! "
^ZWCmcd("dv-aa","mcod",92)="    S %vv=""%"" F %i=0:1 S %vv=$O(@%vv) Q:%vv=""""  DO  ;  Find Arrays midst all vars"
^ZWCmcd("dv-aa","mcod",93)="    .I $D(@%vv)>9 S %vn=%vv D WA Q"
^ZWCmcd("dv-aa","mcod",94)="    Q"
^ZWCmcd("dv-b","mcod",45)=";*"
^ZWCmcd("dv-b","mcod",46)="  ;Entry  b^dv  Save $I, USE 0 zsh ? Break"
^ZWCmcd("dv-b","mcod",47)="b(dvM,VVL) "
^ZWCmcd("dv-b2","mcod",48)="b2  NEW dBdv,%zshc,%3,%D,%KMO,%S,%i,%n,%v,%vn,%vv"
^ZWCmcd("dv-b2","mcod",49)="    S dBdv=$IO USE 0 S %zshc=3 D d2 ;D ^dv($G(dvM),$G(VVL))"
^ZWCmcd("dv-b2","mcod",50)="    B"
^ZWCmcd("dv-b2","mcod",51)="    U dBdv"
^ZWCmcd("dv-b2","mcod",52)="    Q"
^ZWCmcd("dv-bug","mcod",27)=";*  1aug17"
^ZWCmcd("dv-bug","mcod",28)="bug(dvM,VVL) I $G(dvM)="""" S dvM=""Bug! NOS"""
^ZWCmcd("dv-bug","mcod",29)="   I $G(VVL)="""" S VVL=""dvM"""
^ZWCmcd("dv-bug","mcod",30)="   D ^dvstk"
^ZWCmcd("dv-bug","mcod",31)="   G b2  ;simulate d b^dv wihtout extra stack layer"
^ZWCmcd("dv-bug","mcod",32)="   Q"
^ZWCmcd("dv-d2","mcod",13)="d2  I $G(dvM)="""" S dvM=""Err NOS ^dv"" S:$G(VVL)="""" VVL=""id"""
^ZWCmcd("dv-d2","mcod",14)="  S %KMO=0 I dvM[""KILL"" S %KMO=1"
^ZWCmcd("dv-d2","mcod",15)="  I $G(VVL)="""" S VVL=""@VL"""
^ZWCmcd("dv-d2","mcod",16)="  zsh ""s"":%ZSH"
^ZWCmcd("dv-d2","mcod",17)="    S %c=$G(%ZSH(""S"",%zshc)) I %c="""" S %c=""caller"""
^ZWCmcd("dv-err","mcod",59)=";*  Generc error  D be^dv"
^ZWCmcd("dv-err","mcod",60)=";RefBy: none locally  See G d2 ... SIC --- ?external entry, yes lots,~35 old"
^ZWCmcd("dv-err","mcod",61)=";  See cd ~/km7r;  grep -n ""err\^dv"" */r*/*.m  ; ..."
^ZWCmcd("dv-err","mcod",62)="err(dvM,VL) I $G(dvM)="""" ;  call with or without ()"
^ZWCmcd("dv-err","mcod",63)="     S VL=$G(VL)"
^ZWCmcd("dv-err","mcod",64)="     S dvM=""Error NOS"",VVL="""" G d2"
^ZWCmcd("dv-ka","mcod",88)=";*  Summarize and KILL (if %KMO) Arrays - EntryPoint"
^ZWCmcd("dv-ka","mcod",89)="ka  S %KMO=1 G aa ;List One line and Kill Arrays     D ka^dv"
^ZWCmcd("dv-la","mcod",90)="la  S %KMO=0  ;Just list      D la^dv"
^ZWCmcd("dv-log","mcod",33)=";*"
^ZWCmcd("dv-log","mcod",34)=";  ^dv output to log file  devdvlog"
^ZWCmcd("dv-log","mcod",35)="log(dvM,VVL) S dBdv=$IO I $G(devdvlog)="""" D Ilog"
^ZWCmcd("dv-log","mcod",36)="   I $G(devdvlog)="""" U 0 BREAK  Q  ;Bug ?"
^ZWCmcd("dv-log","mcod",37)="   U devdvlog S %zshc=3"
^ZWCmcd("dv-log","mcod",38)="   D d2"
^ZWCmcd("dv-log","mcod",39)="   U dBdv"
^ZWCmcd("dv-log","mcod",40)="   Q"
^ZWCmcd("dv-stb","mcod",129)="stb KILL %tb S %tb=2 F %i=1:1:$L(VWL,"","") DO  ;"
^ZWCmcd("dv-stb","mcod",130)="   .S %nw=$P(VWL,"","",%i),%w=$P(%nw,"":"",2),%vn=$P(%nw,"":"")"
^ZWCmcd("dv-stb","mcod",131)="   .I $L(%vn)+1>%w S %w=$L(%vn)+1  ; min width for label"
^ZWCmcd("dv-stb","mcod",132)="   .I '%w S %w=10 B"
^ZWCmcd("dv-stb","mcod",133)="   .S %tb(%i)=%tb,%tb=%tb+%w"
^ZWCmcd("dv-stb","mcod",134)=" S %tb(%i+1)=%tb"
^ZWCmcd("dv-stb","mcod",135)=" Q"
^ZWCmcd("dv-stb","mcod",136)=""
^ZWCmcd("dv-stb","mcod",137)="  "
^ZWCmcd("dv-w","mcod",122)=";*"
^ZWCmcd("dv-w","mcod",123)="w(VWL)  I $G(VWL)="""" B  Q"
^ZWCmcd("dv-w","mcod",124)=" D stb"
^ZWCmcd("dv-w","mcod",125)=" W:$X !"
^ZWCmcd("dv-w","mcod",126)=" F %i=1:1:$L(VWL,"","") S %vn=$P($P(VWL,"","",%i),"":"") W ?%tb(%i),$G(@%vn),"" """
^ZWCmcd("dv-w","mcod",127)=" W !"
^ZWCmcd("dv-w","mcod",128)=" Q"
^ZWCmcd("dv-wh","mcod",118)="wh(VWL)  D stb   W:$X !"
^ZWCmcd("dv-wh","mcod",119)=" F %i=1:1:$L(VWL,"","") S %vn=$P($P(VWL,"","",%i),"":"") W ?%tb(%i),%vn,"" """
^ZWCmcd("dv-wh","mcod",120)=" W !"
^ZWCmcd("dv-wh","mcod",121)=" Q"
^ZWCmcd("dv-wv","mcod",103)="wv S %v=$G(@%vn)"
^ZWCmcd("dv-wv","mcod",104)=" W:$X ! W %vn,""="",?10"
^ZWCmcd("dv-wv","mcod",105)=" I %v="""" W ""null."",! Q"
^ZWCmcd("dv-wv","mcod",106)=" I +%v=%v W %v,! Q"
^ZWCmcd("dv-wv","mcod",107)=" I $L(%v)+$X>80 DO  Q"
^ZWCmcd("dv-wv","mcod",108)=" .W ""'"" S %x=80-$X,%L=$L(%v) W $E(%v,1,%x),! S %x=%x+1 ;long string"
^ZWCmcd("dv-wv","mcod",109)=" .W ?10,""... ($L="",%L,"") "" F  DO  S %x=%x2+1 Q:%x>%L  W ?9,""..."""
^ZWCmcd("dv-wv","mcod",110)=" ..W ?9,"" ..."" S %x2=80-$X+%x W $E(%v,%x,%x2),! "
^ZWCmcd("dv-wv","mcod",111)=" W "" '"",%v,""' "",!"
^ZWCmcd("dv-wv","mcod",112)=" Q"
^ZWCmcd("dv-zar","mcod",113)=" ;* array @%vn"
^ZWCmcd("dv-zar","mcod",114)="zar S %S="""",%n=0 F %3=0:1 S %S=$O(@%vn@(%S)) Q:%S=""""  I $D(@%vn@(%S))>9 S %n=%n+1"
^ZWCmcd("dv-zar","mcod",115)=" W:$X ! W ""Array "",%vn,"" has "",%3,"" nodes"" I %n W "" with "",%n,"" SubNodes"",!"
^ZWCmcd("dv-zar","mcod",116)=" Q"
^ZWCmcd("dv-zar","mcod",117)="; * * *  29Oct15"
^ZWCmcd("dv-zshb","mcod",53)="    ;*  zsh  & Break (Use 0)   vs ^dvstk"
^ZWCmcd("dv-zshb","mcod",54)="zshb(dvM,VVL) NEW dBdv,%zshc"
^ZWCmcd("dv-zshb","mcod",55)="    S dBdv=$IO USE 0 S %zshc=3 D d2 ;D ^dv($G(dvM),$G(VVL))"
^ZWCmcd("dv-zshb","mcod",56)="    W:$X ! W ""ZSH:-"",! zsh  W !"
^ZWCmcd("dv-zshb","mcod",57)="    B  U dBdv Q"
^ZWCmcd("dv-zshb","mcod",58)="    Q"
^ZWCmcd("dv-zwr","mcod",95)=";*"
^ZWCmcd("dv-zwr","mcod",96)=";*   Sans Arrays, except one line, excludes %* vars"
^ZWCmcd("dv-zwr","mcod",97)="zwr   S %v0=""%zzzzz"" F %=0:1 S %v0=$O(@%v0) Q:%v0=""""  DO"
^ZWCmcd("dv-zwr","mcod",98)=" .S %vn=%v0"
^ZWCmcd("dv-zwr","mcod",99)=" .I $D(@%v0)>2 D:$D(@%v0)#2 wv D zar Q"
^ZWCmcd("dv-zwr","mcod",100)=" .D wv"
^ZWCmcd("dv-zwr","mcod",101)=" W:$X ! W "" That's All Folks ("",$G(%),"" vars)  !"",!!"
^ZWCmcd("dv-zwr","mcod",102)=" Q"
^ZWCmcd("dv2","mcod",1)="dv2(dvM,VVL)  ;CKW/ESC i28Aug14 gmsa/ rddv3/ ; 20220515  ;  Debug Var lists "
^ZWCmcd("dv2","mcod",2)="; copy of ^dv avoid dependencies in rzro3./ for startup nearly bare,derive $zro"
^ZWCmcd("dv2","mcod",3)="  ;"
^ZWCmcd("dv2","mcod",4)="  ;     gboo, rz/     ^f    with ^fd* TP Doc:  H7r/  aUtil/  dv/ "
^ZWCmcd("dv2","mcod",5)="  ; or d ka^dv  Summarize and Kill Arrays"
^ZWCmcd("dv2","mcod",6)="  ;   Refs ^fd*  in gboo/ rH/"
^ZWCmcd("dv2","mcod",7)="  ;"
^ZWCmcd("dv2","mcod",8)="  ;"
^ZWCmcd("dv2","mcod",9)="  ; Works from, @VL,  *VL* lists"
^ZWCmcd("dv2","mcod",10)="  ;"
^ZWCmcd("dv2","mcod",11)="  S %zshc=2"
^ZWCmcd("dv2","mcod",12)="  NEW %KMO,%c"
^ZWCmcd("dv2-A","mcod",18)="  ;* VVL, dvM, $IO ?"
^ZWCmcd("dv2-A","mcod",19)="A NEW d,%i1,%i2,%VL,%n S d=$IO W:$X ! W ""** Debug "",%c,"":  "",dvM,!"
^ZWCmcd("dv2-A","mcod",20)="  I $E(VVL)=""@"" S x=$P(VVL,""@"",2),VVL=@x B  ;"
^ZWCmcd("dv2-A","mcod",21)="  F %i1=1:1:$L(VVL,"","") S %VL=$P(VVL,"","",%i1) DO  "
^ZWCmcd("dv2-A","mcod",22)="  .I %VL'[""VL"" S %vn=%VL D WV Q  ;just one var"
^ZWCmcd("dv2-A","mcod",23)="  .W:$X !,"" ** "" W %VL,""="" Q:$D(@%VL)=0  S %VL=@%VL W %VL,!  KILL:%KMO @%VL"
^ZWCmcd("dv2-A","mcod",24)="  .F %i2=1:1:$L(%VL,"","") S %vn=$P(%VL,"","",%i2) D WV"
^ZWCmcd("dv2-A","mcod",25)="  ;KILL VVL  if %KMO"
^ZWCmcd("dv2-Ilog","mcod",41)=";* Open devdvlog"
^ZWCmcd("dv2-Ilog","mcod",42)="Ilog  S devdvlog=""dvlog.txt"" OPEN devdvlog:(newversion)"
^ZWCmcd("dv2-Ilog","mcod",43)="   U devdvlog W !,""Default ^dv log file ???  "",$ZD($H),!! D ^dvstk W !!!"
^ZWCmcd("dv2-Ilog","mcod",44)="   Q"
^ZWCmcd("dv2-Q","mcod",26)="Q  Q"
^ZWCmcd("dv2-WA","mcod",74)="  ;*"
^ZWCmcd("dv2-WA","mcod",75)="  ;  %vn array;  Count nodes"
^ZWCmcd("dv2-WA","mcod",76)="WA  ;"
^ZWCmcd("dv2-WA","mcod",77)="  S %S="""",%n=0 F %3=0:1 S %S=$O(@%vn@(%S)) Q:%S=""""  I $D(@%vn@(%S))>9 S %n=%n+1"
^ZWCmcd("dv2-WA","mcod",78)="  W:$X ! W ""Array "",%vn,"" has "",%3,"" nodes"" I %n W "" and "",%n,"" with SubNodes"",!"
^ZWCmcd("dv2-WA","mcod",79)="  KILL:%KMO @%vn"
^ZWCmcd("dv2-WA","mcod",80)="  Q"
^ZWCmcd("dv2-WQ","mcod",73)="WQ KILL:%KMO @%vn Q"
^ZWCmcd("dv2-WV","mcod",65)=";*"
^ZWCmcd("dv2-WV","mcod",66)="  ; %vn, @%vn,  $D(@vn)"
^ZWCmcd("dv2-WV","mcod",67)="WV S %vn=$P(%vn,""_"") W:$X ! S %D=$D(@%vn) I %D>9 D WA Q:%D#2=0"
^ZWCmcd("dv2-WV","mcod",68)="  S %v=$G(@%vn) I %v="""" S %v=""null"" S:$D(@%vn)#2=0 %v=""UNDEF."" W %vn,""="",%v,! G WQ"
^ZWCmcd("dv2-WV","mcod",69)="  I +%v=%v W %vn,""="",%v,! G WQ"
^ZWCmcd("dv2-WV","mcod",70)="  I %v W %vn,""="",%v,"" ("",+%v,"") "",! G WQ"
^ZWCmcd("dv2-WV","mcod",71)="  I $L(%v)>50 W ""var "",%vn,"" (L="",$L(%v),"") '"",$E(%v,1,50),""..."",! G WQ"
^ZWCmcd("dv2-WV","mcod",72)="  W %vn,""='"",%v,""' "",! "
^ZWCmcd("dv2-ZBY","mcod",81)="  ;*"
^ZWCmcd("dv2-ZBY","mcod",82)=" ;* * *   No internal Refs"
^ZWCmcd("dv2-ZBY","mcod",83)="ZBY NEW Z2,me,stk,i,CA"
^ZWCmcd("dv2-ZBY","mcod",84)=" zsh ""S"":Z2  S me=""^""_$T(+0),BY=""? ""_me"
^ZWCmcd("dv2-ZBY","mcod",85)=" S stk="""" F i=0:1 S stk=$O(Z2(""S"",stk)) Q:stk=""""  S CA=Z2(""S"",stk) I CA'[me S BY=CA Q"
^ZWCmcd("dv2-ZBY","mcod",86)=" Q"
^ZWCmcd("dv2-ZBY","mcod",87)=" ; * * *"
^ZWCmcd("dv2-aa","mcod",91)="aa  W:$X ! W ""** Arrays-"",! "
^ZWCmcd("dv2-aa","mcod",92)="    S %vv=""%"" F %i=0:1 S %vv=$O(@%vv) Q:%vv=""""  DO  ;  Find Arrays midst all vars"
^ZWCmcd("dv2-aa","mcod",93)="    .I $D(@%vv)>9 S %vn=%vv D WA Q"
^ZWCmcd("dv2-aa","mcod",94)="    Q"
^ZWCmcd("dv2-b","mcod",45)=";*"
^ZWCmcd("dv2-b","mcod",46)="  ;Entry  b^dv  Save $I, USE 0 zsh ? Break"
^ZWCmcd("dv2-b","mcod",47)="b(dvM,VVL) "
^ZWCmcd("dv2-b2","mcod",48)="b2  NEW dBdv,%zshc,%3,%D,%KMO,%S,%i,%n,%v,%vn,%vv"
^ZWCmcd("dv2-b2","mcod",49)="    S dBdv=$IO USE 0 S %zshc=3 D d2 ;D ^dv($G(dvM),$G(VVL))"
^ZWCmcd("dv2-b2","mcod",50)="    B"
^ZWCmcd("dv2-b2","mcod",51)="    U dBdv"
^ZWCmcd("dv2-b2","mcod",52)="    Q"
^ZWCmcd("dv2-bug","mcod",27)=";*  1aug17"
^ZWCmcd("dv2-bug","mcod",28)="bug(dvM,VVL) I $G(dvM)="""" S dvM=""Bug! NOS"""
^ZWCmcd("dv2-bug","mcod",29)="   I $G(VVL)="""" S VVL=""dvM"""
^ZWCmcd("dv2-bug","mcod",30)="   D ^dvstk"
^ZWCmcd("dv2-bug","mcod",31)="   G b2  ;simulate d b^dv wihtout extra stack layer"
^ZWCmcd("dv2-bug","mcod",32)="   Q"
^ZWCmcd("dv2-d2","mcod",13)="d2  I $G(dvM)="""" S dvM=""Err NOS ^dv"" S:$G(VVL)="""" VVL=""id"""
^ZWCmcd("dv2-d2","mcod",14)="  S %KMO=0 I dvM[""KILL"" S %KMO=1"
^ZWCmcd("dv2-d2","mcod",15)="  I $G(VVL)="""" S VVL=""@VL"""
^ZWCmcd("dv2-d2","mcod",16)="  zsh ""s"":%ZSH"
^ZWCmcd("dv2-d2","mcod",17)="    S %c=$G(%ZSH(""S"",%zshc)) I %c="""" S %c=""caller"""
^ZWCmcd("dv2-err","mcod",59)=";*  Generc error  D be^dv"
^ZWCmcd("dv2-err","mcod",60)=";RefBy: none locally  See G d2 ... SIC --- ?external entry, yes lots,~35 old"
^ZWCmcd("dv2-err","mcod",61)=";  See cd ~/km7r;  grep -n ""err\^dv"" */r*/*.m  ; ..."
^ZWCmcd("dv2-err","mcod",62)="err(dvM,VL) I $G(dvM)="""" ;  call with or without ()"
^ZWCmcd("dv2-err","mcod",63)="     S VL=$G(VL)"
^ZWCmcd("dv2-err","mcod",64)="     S dvM=""Error NOS"",VVL="""" G d2"
^ZWCmcd("dv2-ka","mcod",88)=";*  Summarize and KILL (if %KMO) Arrays - EntryPoint"
^ZWCmcd("dv2-ka","mcod",89)="ka  S %KMO=1 G aa ;List One line and Kill Arrays     D ka^dv"
^ZWCmcd("dv2-la","mcod",90)="la  S %KMO=0  ;Just list      D la^dv"
^ZWCmcd("dv2-log","mcod",33)=";*"
^ZWCmcd("dv2-log","mcod",34)=";  ^dv output to log file  devdvlog"
^ZWCmcd("dv2-log","mcod",35)="log(dvM,VVL) S dBdv=$IO I $G(devdvlog)="""" D Ilog"
^ZWCmcd("dv2-log","mcod",36)="   I $G(devdvlog)="""" U 0 BREAK  Q  ;Bug ?"
^ZWCmcd("dv2-log","mcod",37)="   U devdvlog S %zshc=3"
^ZWCmcd("dv2-log","mcod",38)="   D d2"
^ZWCmcd("dv2-log","mcod",39)="   U dBdv"
^ZWCmcd("dv2-log","mcod",40)="   Q"
^ZWCmcd("dv2-stb","mcod",129)="stb KILL %tb S %tb=2 F %i=1:1:$L(VWL,"","") DO  ;"
^ZWCmcd("dv2-stb","mcod",130)="   .S %nw=$P(VWL,"","",%i),%w=$P(%nw,"":"",2),%vn=$P(%nw,"":"")"
^ZWCmcd("dv2-stb","mcod",131)="   .I $L(%vn)+1>%w S %w=$L(%vn)+1  ; min width for label"
^ZWCmcd("dv2-stb","mcod",132)="   .I '%w S %w=10 B"
^ZWCmcd("dv2-stb","mcod",133)="   .S %tb(%i)=%tb,%tb=%tb+%w"
^ZWCmcd("dv2-stb","mcod",134)=" S %tb(%i+1)=%tb"
^ZWCmcd("dv2-stb","mcod",135)=" Q"
^ZWCmcd("dv2-stb","mcod",136)=""
^ZWCmcd("dv2-stb","mcod",137)="  "
^ZWCmcd("dv2-w","mcod",122)=";*"
^ZWCmcd("dv2-w","mcod",123)="w(VWL)  I $G(VWL)="""" B  Q"
^ZWCmcd("dv2-w","mcod",124)=" D stb"
^ZWCmcd("dv2-w","mcod",125)=" W:$X !"
^ZWCmcd("dv2-w","mcod",126)=" F %i=1:1:$L(VWL,"","") S %vn=$P($P(VWL,"","",%i),"":"") W ?%tb(%i),$G(@%vn),"" """
^ZWCmcd("dv2-w","mcod",127)=" W !"
^ZWCmcd("dv2-w","mcod",128)=" Q"
^ZWCmcd("dv2-wh","mcod",118)="wh(VWL)  D stb   W:$X !"
^ZWCmcd("dv2-wh","mcod",119)=" F %i=1:1:$L(VWL,"","") S %vn=$P($P(VWL,"","",%i),"":"") W ?%tb(%i),%vn,"" """
^ZWCmcd("dv2-wh","mcod",120)=" W !"
^ZWCmcd("dv2-wh","mcod",121)=" Q"
^ZWCmcd("dv2-wv","mcod",103)="wv S %v=$G(@%vn)"
^ZWCmcd("dv2-wv","mcod",104)=" W:$X ! W %vn,""="",?10"
^ZWCmcd("dv2-wv","mcod",105)=" I %v="""" W ""null."",! Q"
^ZWCmcd("dv2-wv","mcod",106)=" I +%v=%v W %v,! Q"
^ZWCmcd("dv2-wv","mcod",107)=" I $L(%v)+$X>80 DO  Q"
^ZWCmcd("dv2-wv","mcod",108)=" .W ""'"" S %x=80-$X,%L=$L(%v) W $E(%v,1,%x),! S %x=%x+1 ;long string"
^ZWCmcd("dv2-wv","mcod",109)=" .W ?10,""... ($L="",%L,"") "" F  DO  S %x=%x2+1 Q:%x>%L  W ?9,""..."""
^ZWCmcd("dv2-wv","mcod",110)=" ..W ?9,"" ..."" S %x2=80-$X+%x W $E(%v,%x,%x2),! "
^ZWCmcd("dv2-wv","mcod",111)=" W "" '"",%v,""' "",!"
^ZWCmcd("dv2-wv","mcod",112)=" Q"
^ZWCmcd("dv2-zar","mcod",113)=" ;* array @%vn"
^ZWCmcd("dv2-zar","mcod",114)="zar S %S="""",%n=0 F %3=0:1 S %S=$O(@%vn@(%S)) Q:%S=""""  I $D(@%vn@(%S))>9 S %n=%n+1"
^ZWCmcd("dv2-zar","mcod",115)=" W:$X ! W ""Array "",%vn,"" has "",%3,"" nodes"" I %n W "" with "",%n,"" SubNodes"",!"
^ZWCmcd("dv2-zar","mcod",116)=" Q"
^ZWCmcd("dv2-zar","mcod",117)="; * * *  29Oct15"
^ZWCmcd("dv2-zshb","mcod",53)="    ;*  zsh  & Break (Use 0)   vs ^dvstk"
^ZWCmcd("dv2-zshb","mcod",54)="zshb(dvM,VVL) NEW dBdv,%zshc"
^ZWCmcd("dv2-zshb","mcod",55)="    S dBdv=$IO USE 0 S %zshc=3 D d2 ;D ^dv($G(dvM),$G(VVL))"
^ZWCmcd("dv2-zshb","mcod",56)="    W:$X ! W ""ZSH:-"",! zsh  W !"
^ZWCmcd("dv2-zshb","mcod",57)="    B  U dBdv Q"
^ZWCmcd("dv2-zshb","mcod",58)="    Q"
^ZWCmcd("dv2-zwr","mcod",95)=";*"
^ZWCmcd("dv2-zwr","mcod",96)=";*   Sans Arrays, except one line, excludes %* vars"
^ZWCmcd("dv2-zwr","mcod",97)="zwr   S %v0=""%zzzzz"" F %=0:1 S %v0=$O(@%v0) Q:%v0=""""  DO"
^ZWCmcd("dv2-zwr","mcod",98)=" .S %vn=%v0"
^ZWCmcd("dv2-zwr","mcod",99)=" .I $D(@%v0)>2 D:$D(@%v0)#2 wv D zar Q"
^ZWCmcd("dv2-zwr","mcod",100)=" .D wv"
^ZWCmcd("dv2-zwr","mcod",101)=" W:$X ! W "" That's All Folks ("",$G(%),"" vars)  !"",!!"
^ZWCmcd("dv2-zwr","mcod",102)=" Q"
^ZWCmcd("dvFLimg","mcod",1)="dvFLimg  ;CKW/ESC i8mar20 gmsa/ rmgbFL3/ ; 20200308-95 ; Init Super *FL lists"
^ZWCmcd("dvFLimg","mcod",2)="; AUD(VVL) : $$Q"
^ZWCmcd("dvFLimg","mcod",3)=";"
^ZWCmcd("dvFLimg","mcod",4)="; was ^dvIMG"
^ZWCmcd("dvFLimg","mcod",5)=";"
^ZWCmcd("dvFLimg-A","mcod",6)="A   S varFL=""vnde,vty_^DDv(vset,vn)"""
^ZWCmcd("dvFLimg-A","mcod",7)="    S vnIXL=""vn,lcvn_^DDx(vset,lcvn)=vn"""
^ZWCmcd("dvFLimg-A","mcod",8)="    ;  MRou"
^ZWCmcd("dvFLimg-A","mcod",9)="    S rouFL=""""    ; Dupl of ^mrIMG"
^ZWCmcd("dvFLimg-A","mcod",10)="    Q"
^ZWCmcd("dvFLimg-AUD","mcod",11)=";*"
^ZWCmcd("dvFLimg-AUD","mcod",12)=";$$Q  Audit list of SuperFL lists for format"
^ZWCmcd("dvFLimg-AUD","mcod",13)="AUD(VVL)  I $G(VVL)="""" D SVVL  ;Scan vars for *FL ;;"
^ZWCmcd("dvFLimg-AUD","mcod",14)="    NEW Q,FL,G2,vj,vi,vn  S Q="""""
^ZWCmcd("dvFLimg-AUD","mcod",15)="    F vj=1:1:$L(VVL,"","") S FLn=$P(VVL,"","",vj) DO"
^ZWCmcd("dvFLimg-AUD","mcod",16)="      .I FLn'?1A.31AN S Q2="" List var name ""_FLn_""?"" D b^dv(Q2,""FLn,FL,VVL"") S Q=Q_Q2 Q"
^ZWCmcd("dvFLimg-AUD","mcod",17)="      .I FLn'[""FL"" S Q2=""*FL has no FL"" D b^dv(Q2,""FLn,vj,VVL"") S Q=Q_Q2 Q"
^ZWCmcd("dvFLimg-AUD","mcod",18)="      .I $D(@FLn)'=1 S Q2=""FLn UNDEF"" D b^dv(Q2,""FLn,vj,VVL"") S Q=Q_Q2 Q"
^ZWCmcd("dvFLimg-AUD","mcod",19)="      .S FL=@FLn,G2=$P(FL,""_"",2),FL=$P(FL,""_"")"
^ZWCmcd("dvFLimg-AUD","mcod",20)="      .  I G2="""" D b^dv(Q2,""G2,vj,VVL"") S Q=Q_Q2"
^ZWCmcd("dvFLimg-AUD","mcod",21)="      .F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) DO"
^ZWCmcd("dvFLimg-AUD","mcod",22)="         ..I vn="""" S Q2=""Null vn"" D b^dv(Q2,""vi,FL,vj,VVL"") Q"
^ZWCmcd("dvFLimg-AUD","mcod",23)="         ..I vn'?1A.30AN S Q2=""vn fmt?"" D b^dv(Q2,""vn,vi,FL,FLn"") S Q=Q_Q2 Q"
^ZWCmcd("dvFLimg-AUD","mcod",24)="         ..S D=$D(@vn)  ; just force full syntax check now"
^ZWCmcd("dvFLimg-Q","mcod",25)="Q   Q:$Q Q"
^ZWCmcd("dvFLimg-Q","mcod",26)="    Q"
^ZWCmcd("dvFLimg-SVVL","mcod",27)=";*"
^ZWCmcd("dvFLimg-SVVL","mcod",28)=";*  Find in vars all with name *FL, compose into VVL"
^ZWCmcd("dvFLimg-SVVL","mcod",29)="; Vars : VVL"
^ZWCmcd("dvFLimg-SVVL","mcod",30)="SVVL  NEW Q,VAR,vi,vn  S VVL="""""
^ZWCmcd("dvFLimg-SVVL","mcod",31)="      ZSH ""V"":VAR"
^ZWCmcd("dvFLimg-SVVL","mcod",32)="      F vi=1:1 S vs=$G(VAR(""V"",vi)) Q:vs=""""  DO  ;"
^ZWCmcd("dvFLimg-SVVL","mcod",33)="        .I vs[""FL"" S vn=$P(vs,""="") I vn[""FL"",$P(vn,""FL"")'="""" DO"
^ZWCmcd("dvFLimg-SVVL","mcod",34)="           ..S VVL=VVL_"",""_vn"
^ZWCmcd("dvFLimg-SVVL","mcod",35)="        .S VVL=$E(VVL,2,999) ;remove leading comma"
^ZWCmcd("dvFLimg-SVVL","mcod",36)="      Q"
^ZWCmcd("dvIpg","mcod",1)="dvIpg  ;CKW/ESC  i18May16 gmsa/ rd2io/ ; 20160518-70 ; Page Names ^dv*"
^ZWCmcd("dvIpg","mcod",2)="  ;    vs rdv/  identical code"
^ZWCmcd("dvIpg","mcod",3)="  ;"
^ZWCmcd("dvIpg","mcod",4)="  ; Ref ^dmnList"
^ZWCmcd("dvIpg","mcod",5)=";  Menu  Mpj  code  eg. ""KA1""   :  $$ is wFil, devmnu"
^ZWCmcd("dvIpg-VVVL","mcod",17)=";*  MRou BE Page - identical to ^kaIpg"
^ZWCmcd("dvIpg-VVVL","mcod",18)=";*  Page Name for *FL list in MProj mpj  Ref ^dvvHFL  in T2DM dev"
^ZWCmcd("dvIpg-VVVL","mcod",19)="VVVL(VVFL,mpj)  I $G(mpj)="""" S mpj="""""
^ZWCmcd("dvIpg-VVVL","mcod",20)="     I $G(VVFL)="""" D bug^dv Q"
^ZWCmcd("dvIpg-VVVL","mcod",21)="     S Fil=""vFL-""_VVFL I mpj'="""" S Fil=Fil_""-""_mpj"
^ZWCmcd("dvIpg-VVVL","mcod",22)="     S Fil=Fil_"".html"""
^ZWCmcd("dvIpg-VVVL","mcod",23)="     Q Fil"
^ZWCmcd("dvIpg-VVVL","mcod",24)=";*"
^ZWCmcd("dvIpg-img","mcod",11)="  ;*"
^ZWCmcd("dvIpg-img","mcod",12)=";*  ^kuGimg   img.  HGen Summary of SuperVars"
^ZWCmcd("dvIpg-img","mcod",13)="img(Mpr)  NEW f"
^ZWCmcd("dvIpg-img","mcod",14)="     I $G(Mpr)="""" S Mpr=""dv"""
^ZWCmcd("dvIpg-img","mcod",15)="     S f=""IMG-Summary-""_Mpr_"".html"""
^ZWCmcd("dvIpg-img","mcod",16)="     Q f"
^ZWCmcd("dvIpg-mnu","mcod",6)="mnu(Mpj) I $G(Mpj)="""" S Mpj="""""
^ZWCmcd("dvIpg-mnu","mcod",7)="   S wFil=""Menu"" I Mpj'="""" S wFil=wFil_""-""_Mpj"
^ZWCmcd("dvIpg-mnu","mcod",8)="   S wFil=wFil_"".html"""
^ZWCmcd("dvIpg-mnu","mcod",9)="   S devmnu=$G(wBase)_$G(wFol)_wFil"
^ZWCmcd("dvIpg-mnu","mcod",10)="   Q wFil"
^ZWCmcd("dvby","mcod",1)="dvby()   ;CKW/ESC  i29sep18 ; 20180929-31 gmsa/ rddv3/; Just get Caller x2 levels"
^ZWCmcd("dvby","mcod",2)="  ;  RefBy: ^dws, T2DM/rTEST/ ^dwWL, T2DM/rsr/ ^qds, T2DM/rsr/ ^qder, ..."
^ZWCmcd("dvby","mcod",3)="  ;"
^ZWCmcd("dvby-A","mcod",4)=";*$$=C1 : C2"
^ZWCmcd("dvby-A","mcod",5)="A    NEW S,STK,L"
^ZWCmcd("dvby-A","mcod",6)="     ZSH ""S"":STK KILL S MERGE S=STK(""S"")"
^ZWCmcd("dvby-A","mcod",7)="     S L=$ZL"
^ZWCmcd("dvby-A","mcod",8)="     S C1=$G(S(2))"
^ZWCmcd("dvby-A","mcod",9)="     S C2=$G(S(3))"
^ZWCmcd("dvby-A","mcod",10)="     ;U $P W !,""$ZL="",L,!,""C1="",C1,!,""C2="",C2,!"
^ZWCmcd("dvby-A","mcod",11)="     ;zwr S W !!  B"
^ZWCmcd("dvby-A","mcod",12)="     Q:$Q C1  ; sic vs Error status"
^ZWCmcd("dvby-A","mcod",13)="     Q"
^ZWCmcd("dvc","mcod",1)="dvc  ;CKW/ESC  i23jan20 gmsa/ rd2c/ ; 20200123-78 ; Char based sr"
^ZWCmcd("dvc","mcod",2)=";"
^ZWCmcd("dvc","mcod",3)="    BREAK  HALT  ;No fall -through"
^ZWCmcd("dvc","mcod",4)="  ;"
^ZWCmcd("dvc-DSP","mcod",5)=";*  Replace all dbl spaces (or more) with single, and remove starting/ending"
^ZWCmcd("dvc-DSP","mcod",6)="DSP(X) NEW i I $G(X)="""" Q X"
^ZWCmcd("dvc-DSP","mcod",7)="    S X=$TR(X,$C(9)_$C(10)_$C(13),""   "")  ;replace tab,lf,cr with space"
^ZWCmcd("dvc-DSP","mcod",8)="    F i=0:1 Q:X'[""  ""  S X=$P(X,""  "")_"" ""_$P(X,""  "",2,9999)"
^ZWCmcd("dvc-DSP","mcod",9)=" Q $$TSP(X)"
^ZWCmcd("dvc-EOL","mcod",31)="  ;*"
^ZWCmcd("dvc-EOL","mcod",32)=";*  20aug20  stdize   RefBy:  mdk  "
^ZWCmcd("dvc-EOL","mcod",33)="EOL     S ECR=$C(13),ELF=$C(10),EFF=$C(14),tab=$C(9),EVT=$C(11)"
^ZWCmcd("dvc-EOL","mcod",34)=" S EOL=ELF,EOF=EFF"
^ZWCmcd("dvc-EOL","mcod",35)=" Q"
^ZWCmcd("dvc-EOL","mcod",36)=";*"
^ZWCmcd("dvc-EOL","mcod",37)=";*    ******"
^ZWCmcd("dvc-EOL","mcod",38)=";*  Tests"
^ZWCmcd("dvc-LC","mcod",25)="  ;*  Case & Canonic"
^ZWCmcd("dvc-LC","mcod",26)="LC(X) Q $TR(X,""ABCDEFGHIJKLMNOPQRSTUVWXYZ"",""abcdefghijklmnopqrstuvwxyz"")"
^ZWCmcd("dvc-LTDSPtb","mcod",16)=";*$$ Actually DSP already does both calls TSP in 2nd line "
^ZWCmcd("dvc-LTDSPtb","mcod",17)="LTDSPtb(X) NEW i"
^ZWCmcd("dvc-LTDSPtb","mcod",18)="        S X=$TR(X,$C(9)_$C(10)_$C(13),""   "")  ;replace tab,lf,cr with space"
^ZWCmcd("dvc-LTDSPtb","mcod",19)="        F i=0:1 Q:X'[""  ""  S X=$P(X,""  "")_"" ""_$P(X,""  "",2,9999)"
^ZWCmcd("dvc-LTDSPtb","mcod",20)=" ; Remove start and end spaces (only)"
^ZWCmcd("dvc-LTDSPtb","mcod",21)=" I $E($G(X))="" "" F i=1:1:$L(X) I $E(X,i)'="" "" S X=$E(X,i,999) Q"
^ZWCmcd("dvc-LTDSPtb","mcod",22)=" I $E(X,$L(X))="" "" F i=$L(X):-1:1 I $E(X,i)'="" "" S X=$E(X,1,i) Q"
^ZWCmcd("dvc-LTDSPtb","mcod",23)=" I X="" "" S X=""""  ; Funny case all spaces  vs end i=0 second line ?"
^ZWCmcd("dvc-LTDSPtb","mcod",24)=" Q X "
^ZWCmcd("dvc-TSP","mcod",10)=";*  Remove start and end spaces (only)"
^ZWCmcd("dvc-TSP","mcod",11)="TSP(X) NEW i S X=$TR(X,$C(9)_$C(10)_$C(13),""   "")  ;replace tab,lf,cr with space"
^ZWCmcd("dvc-TSP","mcod",12)=" I $E($G(X))="" "" F i=1:1:$L(X) I $E(X,i)'="" "" S X=$E(X,i,999) Q"
^ZWCmcd("dvc-TSP","mcod",13)=" I $E(X,$L(X))="" "" F i=$L(X):-1:1 I $E(X,i)'="" "" S X=$E(X,1,i) Q"
^ZWCmcd("dvc-TSP","mcod",14)=" I X="" "" S X=""""  ; Funny case all spaces  vs end i=0 second line ?"
^ZWCmcd("dvc-TSP","mcod",15)=" Q X"
^ZWCmcd("dvc-UC","mcod",27)="UC(X) Q $TR(X,""abcdefghijklmnopqrstuvwxyz"",""ABCDEFGHIJKLMNOPQRSTUVWXYZ"")"
^ZWCmcd("dvc-UC1","mcod",28)="UC1(X) Q $$UC($E(X))_$$LC($E(X,2,9999))   ; Cap 1st, rest LC"
^ZWCmcd("dvc-UC1","mcod",29)="  ;"
^ZWCmcd("dvc-can","mcod",30)="can(X) Q $$LC(X)"
^ZWCmcd("dvcaller","mcod",1)="dvcaller  ;CKW/EESC i13oct20 gmsa/ rd2vl/ ; 20201013-76 ; Identify sr caller from stack"
^ZWCmcd("dvcaller","mcod",2)=";"
^ZWCmcd("dvcaller","mcod",3)="; Returns RLL()  bad design..."
^ZWCmcd("dvcaller","mcod",4)=";"
^ZWCmcd("dvcaller","mcod",5)=";Experiment in Caller id in ^dgmg  - removed, ?bug in SFL^dgmg 13oct20"
^ZWCmcd("dvcaller","mcod",6)="  "
^ZWCmcd("dvcaller-X","mcod",7)="X    zsh :A D ^dvcaller DO  ;  This is Call Sequence in Utility  sic A bad choice of var  %A?"
^ZWCmcd("dvcaller-X","mcod",8)="    .NEW:1 RSZ,Rc,TRc,R2c,TR2c,R,FLn,L2n"
^ZWCmcd("dvcaller-X","mcod",9)="    .MERGE RSZ=A(""S"")  ;remove first subscr ""S"""
^ZWCmcd("dvcaller-X","mcod",10)="    .I $G(RSZ(1))'[""SFL"" D b^dv(""Err Caller"",""RSZ(1)"")"
^ZWCmcd("dvcaller-X","mcod",11)="    .S Rc=$G(RSZ(2))"
^ZWCmcd("dvcaller-X","mcod",12)="    .S TRc="""" I Rc[""^"" S TRc=$T(@Rc)"
^ZWCmcd("dvcaller-X","mcod",13)="    .S R2c="""",TR2c="""" I Rc[""FL"" S R2c=$G(RSZ(3))"
^ZWCmcd("dvcaller-X","mcod",14)="    .  I R2c[""^"" S R=Rc,Rc=R2c,R2c=R,RcTR2c=TRc,TRc=$T(@Rc)"
^ZWCmcd("dvcaller-X","mcod",15)="    .S FLn=$P(TRc,""FL("",2),FLn=$P(FLn,"")""),L2n=$P(FLn,"","",2),FLn=$P(FLn,"","")"
^ZWCmcd("dvcaller-X","mcod",16)="    .;D b^dv(""SFL Log:"",""Rc,TRc,R2c,TR2c,FLn,L2n,SFL,L2"")"
^ZWCmcd("dvcaller-X","mcod",17)="    .I FLn'="""",Rc'="""" S RLL(FLn,Rc)=TRc  ; first crack"
^ZWCmcd("dvd","mcod",1)="dvd(FL)   ;CKW/ESC  i2jun17 gmsa/ rmgbFL3/; 20170604-41  ; Display/HGen Data from *FL Lists"
^ZWCmcd("dvd","mcod",2)="  ;  si top entry vs label"
^ZWCmcd("dvd","mcod",3)="  ;"
^ZWCmcd("dvd","mcod",4)="  D dd($G(FL))"
^ZWCmcd("dvd","mcod",5)="  Q"
^ZWCmcd("dvd","mcod",6)="  "
^ZWCmcd("dvd","mcod",7)="  ;  and implied subscripts in FL_2"
^ZWCmcd("dvd-dd","mcod",8)="dd(FL)  ;Work from *FL"
^ZWCmcd("dvd-dd","mcod",9)="    I $G(FL)="""" D ^dvstk,b^dv(""No FL to display"",""FL"") Q"
^ZWCmcd("dvd-dd","mcod",10)="    I FL?.2U1.L1""FL"" W FL,""  "" S FL=$G(@FL)  ;Meta ^dvd(""LineFL"")"
^ZWCmcd("dvd-dd","mcod",11)="    I FL="""" W "" -- Var*FL is Undef. "" Q"
^ZWCmcd("dvd-dd","mcod",12)="    W:$X ! W FL,"":- """
^ZWCmcd("dvd-dd","mcod",13)="    D ds(FL)"
^ZWCmcd("dvd-dd","mcod",14)="    S G=$P(FL,""_"",2),VL=$P(FL,""_"")"
^ZWCmcd("dvd-dd","mcod",15)="    I G="""" D ^dvsch,b^dv("" No second part _ of FL"",""FL,G"") Q"
^ZWCmcd("dvd-dd","mcod",16)="    I $D(@G)=0 W:$X>20 ! W ""Node is Undef."",! Q"
^ZWCmcd("dvd-dd","mcod",17)="    F vi=1:1:$L(VL,"","") S vn=$P(VL,"","",vi) DO"
^ZWCmcd("dvd-dd","mcod",18)="      .S D=$D(@G@(vn)) "
^ZWCmcd("dvd-dd","mcod",19)="      .I D=0 S val=""UNDEF"""
^ZWCmcd("dvd-dd","mcod",20)="      .E  S val=$G(^(vn)) S:val="""" val=""null"""
^ZWCmcd("dvd-dd","mcod",21)="      .W:$X ! W ""  "",vn,"": "",val,!"
^ZWCmcd("dvd-dd","mcod",22)="    W:$X !"
^ZWCmcd("dvd-dd","mcod",23)="    Q"
^ZWCmcd("dvd-ds","mcod",24)=";*  Display subs values"
^ZWCmcd("dvd-ds","mcod",25)="ds(FL)  I $G(FL)'[""_"" Q"
^ZWCmcd("dvd-ds","mcod",26)="    S G=$P(FL,""_"",2),P=$P(G,""("",2),P=$P(P,"")"") I P="""" W ""  No subscr. "" Q"
^ZWCmcd("dvd-ds","mcod",27)="    I $X>60 W !,""  """
^ZWCmcd("dvd-ds","mcod",28)="    F pi=1:1:$L(P,"","") S sn=$P(P,"","",pi) DO"
^ZWCmcd("dvd-ds","mcod",29)="      .I sn?1N.1""."".N Q  ; ignore lit number, esp 0"
^ZWCmcd("dvd-ds","mcod",30)="      .I $E(sn)="""""""" W sn,""  "" Q"
^ZWCmcd("dvd-ds","mcod",31)="      .I sn'?1A.AN D b^dv(""? Subs "",""sn,pi,P,FL"") Q"
^ZWCmcd("dvd-ds","mcod",32)="      .S val=$G(@sn) S:val="""" val=""null"" S:$D(@sn)#2=0 val=""Undef"""
^ZWCmcd("dvd-ds","mcod",33)="      .I $L(val)>20 S val=$E(val,1,20)_""... """
^ZWCmcd("dvd-ds","mcod",34)="      .W ""  "",sn,""="",val,""  """
^ZWCmcd("dvd-ds","mcod",35)="    Q"
^ZWCmcd("dvd-ds","mcod",36)=";*"
^ZWCmcd("dvd-ds","mcod",37)=""
^ZWCmcd("dvd-ds","mcod",38)="    "
^ZWCmcd("dvd-ds","mcod",39)=""
^ZWCmcd("dvd-ds","mcod",40)=""
^ZWCmcd("dve","mcod",1)="dve  ;CKW/ESC i6aug22 ?/ ?/ ;20220806-35; Quickie Error expansion"
^ZWCmcd("dve","mcod",2)=";"
^ZWCmcd("dve","mcod",3)=";"
^ZWCmcd("dve","mcod",4)=";"
^ZWCmcd("dve-ASKSAV","mcod",34)=";*"
^ZWCmcd("dve-ASKSAV","mcod",35)="ASKSAV  R !,""Save this for later ?"",X"
^ZWCmcd("dve-ASKSAV","mcod",36)="      I X[""y""!(X[""Y"") W ""  sorry, not yet."",!"
^ZWCmcd("dve-ASKSAV","mcod",37)="      Q"
^ZWCmcd("dve-QARG","mcod",27)=";*  Specific Errors expansion"
^ZWCmcd("dve-QARG","mcod",28)="QARG  I ERnam[""QUITARGREQD"" DO  Q"
^ZWCmcd("dve-QARG","mcod",29)="        .W !,""Missing Q arg in ERtxt: "",!,?6,ERtxt,!"
^ZWCmcd("dve-QARG","mcod",30)="        .W ""Called by "",ERlb,!"
^ZWCmcd("dve-QARG","mcod",31)="      DO  ;"
^ZWCmcd("dve-QARG","mcod",32)="        .D b^dv(""Other QUITARG "",""ERnam,ERlb,ERtxt,ERde,ERnum,ERvalQ"")"
^ZWCmcd("dve-QARG","mcod",33)="      Q"
^ZWCmcd("dve-UNDEF","mcod",23)=";*"
^ZWCmcd("dve-UNDEF","mcod",24)=";    150373850,Ph5rd+13^mwMod5,%YDB-E-LVUNDEF, Undefined local variable: rdFL"
^ZWCmcd("dve-UNDEF","mcod",25)="UNDEF  D WER"
^ZWCmcd("dve-UNDEF","mcod",26)="       Q"
^ZWCmcd("dve-WER","mcod",20)=";*"
^ZWCmcd("dve-WER","mcod",21)="WER   D b^dv(""$ZE Error Dump"",""ERnam,ERlb,ERtxt,ERde,ERnum,ERvalQ"")"
^ZWCmcd("dve-WER","mcod",22)="      Q"
^ZWCmcd("dve-exp","mcod",11)=";*   expand/parse $ZS error   "
^ZWCmcd("dve-exp","mcod",12)="exp(ZS) I $G(ZS)="""" W !,""No $ZS value?"",! Q"
^ZWCmcd("dve-exp","mcod",13)="      S ERlb=$P(ZS,"","",2)"
^ZWCmcd("dve-exp","mcod",14)="      S ERtxt=$T(@ERlb)"
^ZWCmcd("dve-exp","mcod",15)="      S ERnum=$P(ZS,"","",1)"
^ZWCmcd("dve-exp","mcod",16)="      S ERnam=$P(ZS,"","",3)"
^ZWCmcd("dve-exp","mcod",17)="      S ERde=$P(ZS,"","",4)"
^ZWCmcd("dve-exp","mcod",18)="      S ERvalQ=$G(Q)"
^ZWCmcd("dve-exp","mcod",19)="      Q"
^ZWCmcd("dve-top","mcod",5)="top    S ZS0=$ZS D exp(ZS0)"
^ZWCmcd("dve-top","mcod",6)="       D ^dvstk ; write and %ZS(lev)"
^ZWCmcd("dve-top","mcod",7)="       I ERnam[""QUITARG"" D QARG"
^ZWCmcd("dve-top","mcod",8)="       I ERnam[""UNDEF"" D UNDEF"
^ZWCmcd("dve-top","mcod",9)="       D ASKSAV"
^ZWCmcd("dve-top","mcod",10)="       Q"
^ZWCmcd("dvf","mcod",1)="dvf(RVL)  ;CKW/ESC   i21May16 gmsa/ rvv/ ; 20160620 ; Test modules @*FL"
^ZWCmcd("dvf","mcod",2)="  ;"
^ZWCmcd("dvf","mcod",3)="  ;"
^ZWCmcd("dvf","mcod",4)="  I $G(RVL)="""" S RVL=""""  ;Super Var"
^ZWCmcd("dvf","mcod",5)="  ;"
^ZWCmcd("dvf-A","mcod",6)="A  D PVL(RVL)  ; parse to    ;  SmyV,"
^ZWCmcd("dvf-A","mcod",7)="  Q"
^ZWCmcd("dvf-A","mcod",8)="  ;  Save  %vars and vars in %vl list into %var  and KILL them"
^ZWCmcd("dvf-A","mcod",9)="  ;  -- vs Save All    ?Trying to Preserve vars"
^ZWCmcd("dvf-PVL","mcod",18)=";* * * * *"
^ZWCmcd("dvf-PVL","mcod",19)=";"
^ZWCmcd("dvf-PVL","mcod",20)="PVL(%vl) I $G(%vl)="""" B  Q  ; internal bug, local ref"
^ZWCmcd("dvf-PVL","mcod",21)="  S %FL=$P(%vl,""_""),%G=$P(%vl,""_"",2)"
^ZWCmcd("dvf-PVL","mcod",22)="  I %G'="""",%G[""("" S %s=$P(%G,""("",2),%s=$P(%s,"")"") W !,%s,!"
^ZWCmcd("dvf-PVL","mcod",23)="  W:$X ! W ""*FL"",""="",%vl,!"
^ZWCmcd("dvf-PVL","mcod",24)="  F %vi=1:1:$L(%s,"","") S %v=$P(%s,"","",%vi) I %v'="""" W:$X ! W %v,""="" D WV W !"
^ZWCmcd("dvf-PVL","mcod",25)="  F %vi=1:1:$L(%FL,"","") S %v=$P(%FL,"","",%vi) I %v'="""" W:$X ! W ""  "",%v,""="" D WV W !"
^ZWCmcd("dvf-PVL","mcod",26)="  Q"
^ZWCmcd("dvf-SmyV","mcod",10)="  ;* * * *"
^ZWCmcd("dvf-SmyV","mcod",11)="SmyV  I $D(%var) B"
^ZWCmcd("dvf-SmyV","mcod",12)="  KILL %var I $D(%v)=1 S %var(""%v"")=%v"
^ZWCmcd("dvf-SmyV","mcod",13)="  I $D(%vi)=1 S %var(""%vi"")=%vi"
^ZWCmcd("dvf-SmyV","mcod",14)="  S %v=""%"" F %vi=0:1 S %v=$O(@%v) Q:%v'[""%""  I $D(@%v)#2 B:$D(@%v)>1  S %var(@%v)=$G(@%) KILL @%v"
^ZWCmcd("dvf-SmyV","mcod",15)="  S %vl=""VVL,dVM,%KMO,VL,x,%c,d,%1,%i2,%VL,%n"""
^ZWCmcd("dvf-SmyV","mcod",16)="  F %vi=1:1:$L(%vl,"","") S %v=$P(%vl,"","",%vi) I $D(@%v)#2 B:$D(@%v)>1  S %var(%v)=$G(@%v) KILL @v"
^ZWCmcd("dvf-SmyV","mcod",17)="  Q"
^ZWCmcd("dvf-WV","mcod",27)=";*  "
^ZWCmcd("dvf-WV","mcod",28)=";Write @%v - val or Undef or Array   ; Flag WFL variant"
^ZWCmcd("dvf-WV","mcod",29)="WV  I $E(%v)="""""""" W %v,""  literal. "" Q"
^ZWCmcd("dvf-WV","mcod",30)="   I $D(@%v)=0 W ""UNDEF."" Q"
^ZWCmcd("dvf-WV","mcod",31)="   I $D(@%v)>9 W ""[Array]"" "
^ZWCmcd("dvf-WV","mcod",32)="   I $G(@%v)="""" W ""null"" Q"
^ZWCmcd("dvf-WV","mcod",33)="   W @%v"
^ZWCmcd("dvf-WV","mcod",34)="   Q"
^ZWCmcd("dvn","mcod",1)="dvn(VNL)  ;CKW/ESC i13dec22 gmsa./ rddv3/ ;20221213-52;Alt ^dv write line, @vn substitutions"
^ZWCmcd("dvn","mcod",2)=";"
^ZWCmcd("dvn","mcod",3)=";"
^ZWCmcd("dvn","mcod",4)=";  @vn ? and space following or any punct?"
^ZWCmcd("dvn","mcod",5)=";"
^ZWCmcd("dvn","mcod",6)=";  VNL"
^ZWCmcd("dvn-T","mcod",20)=";*"
^ZWCmcd("dvn-T","mcod",21)="T     KILL  S V=""This is it:@v1, but it goes on @v2 til here."""
^ZWCmcd("dvn-T","mcod",22)="      S v1=""ABC"",v2=""xyz"" D ^dvn(V)"
^ZWCmcd("dvn-T","mcod",23)="      KILL v1 D ^dvn(V)"
^ZWCmcd("dvn-T","mcod",24)="      S v2="""" D ^dvn(V)"
^ZWCmcd("dvn-T","mcod",25)="      Q"
^ZWCmcd("dvn-T","mcod",26)=";*"
^ZWCmcd("dvn-top","mcod",7)="top   I $G(VNL)="""" D bug^dv Q"
^ZWCmcd("dvn-top","mcod",8)="      S P=VNL S vi=1 KILL VP"
^ZWCmcd("dvn-top","mcod",9)="      F vi=1:2  S VP(vi)=$P(P,""@""),P2=$P(P,""@"",2,99) Q:P'[""@""  DO  ;"
^ZWCmcd("dvn-top","mcod",10)="        .F i=1:1 I $E(P2,i)'?1.AN  S vn=$E(P2,1,i-1),P=$E(P2,i,999) Q"
^ZWCmcd("dvn-top","mcod",11)="        .S VP(vi+1)=vn"
^ZWCmcd("dvn-top","mcod",12)="      ;zwr VP"
^ZWCmcd("dvn-top","mcod",13)="      W:$X ! F vi=1:2  W VP(vi) Q:'$D(VP(vi+1))  DO  ;"
^ZWCmcd("dvn-top","mcod",14)="        .S vn=VP(vi+1),val=$G(@vn),D=$D(@vn)"
^ZWCmcd("dvn-top","mcod",15)="        .I '(D#2) S val="" ""_vn_"" is UNDEF."""
^ZWCmcd("dvn-top","mcod",16)="        .I D#2,val="""" S val=""NULL."""
^ZWCmcd("dvn-top","mcod",17)="        .W val"
^ZWCmcd("dvn-top","mcod",18)="      W !"
^ZWCmcd("dvn-top","mcod",19)="      Q"
^ZWCmcd("dvstk","mcod",1)="dvstk    ;CKW/ESC  i12may16 gmsa/ rddv3/ ; 20220515 ; Caller Util stack -noIO"
^ZWCmcd("dvstk","mcod",2)="  ;"
^ZWCmcd("dvstk","mcod",3)="  ;"
^ZWCmcd("dvstk-N","mcod",4)="N  NEW:1 %ZSH,%ZS,nSTK,nZL,li,LR,LN,R,si,ls,eTR,zTR,ZC,LB"
^ZWCmcd("dvstk-N","mcod",5)="   zsh ""S"":%ZSH   ; See example below, 2-level array"
^ZWCmcd("dvstk-N","mcod",6)="    ; %ZSH(""S"",1:1)=   source label ^ MRou"
^ZWCmcd("dvstk-N","mcod",7)="    S nZL=$ZL"
^ZWCmcd("dvstk-N","mcod",8)="    S nSTK=$ZP(%ZSH(""S"","""")) "
^ZWCmcd("dvstk-N","mcod",9)="    I nZL'=nSTK USE 0 W !,""$ZL="",$ZL,"" but ZSH has "",nSTK,!"
^ZWCmcd("dvstk-N","mcod",10)="    S eTR=$ETRAP"
^ZWCmcd("dvstk-N","mcod",11)="    S zTR=$ZTRAP"
^ZWCmcd("dvstk-S","mcod",12)="S    F li=nSTK:-1:1 S ls=nSTK-li+1,LR=%ZSH(""S"",li) DO  ;"
^ZWCmcd("dvstk-S","mcod",13)="      . S R=$P(LR,""^"",2),LB=$P(LR,""^"")"
^ZWCmcd("dvstk-S","mcod",14)="      . S %ZS(ls,""R"")=R,%ZS(ls,""LB"")=LB"
^ZWCmcd("dvstk-S","mcod",15)="      .; W:$X ! W li,"" "",?4,LR"
^ZWCmcd("dvstk-S","mcod",16)="      . I LR[""("" S LN=""Dir Mode"""
^ZWCmcd("dvstk-S","mcod",17)="      . E  I LR'[""^"" S LN=LR"
^ZWCmcd("dvstk-S","mcod",18)="      . E  S LN=$T(@LR)"
^ZWCmcd("dvstk-S","mcod",19)="      . S %ZS(ls,""LN"")=LN"
^ZWCmcd("dvstk-S","mcod",20)="      .; W !,?6,LN,!"
^ZWCmcd("dvstk-S","mcod",21)="    S ZC=nSTK-1 S Caller=""?"""
^ZWCmcd("dvstk-S","mcod",22)="    I ZC S Caller=$G(%ZSH(""S"",ZC))_"": ""_$G(%ZSH(""L"",ZC))"
^ZWCmcd("dvstk-S","mcod",23)="    D WS"
^ZWCmcd("dvstk-S","mcod",24)="    Q"
^ZWCmcd("dvstk-WS","mcod",25)="WS   W:$X ! W ""Caller:"",Caller,""   Stack-"",!"
^ZWCmcd("dvstk-WS","mcod",26)="     F si=1:1:nSTK DO"
^ZWCmcd("dvstk-WS","mcod",27)="       .W:$X ! W si,"" "",?5,%ZS(si,""R""),"" "",%ZS(si,""LB""),""  "",?25,%ZS(si,""LN""),!"
^ZWCmcd("dvstk-WS","mcod",28)="     W ""  $ETRAP='"",eTR,""' "",!"
^ZWCmcd("dvstk-WS","mcod",29)="     W ""  $ZTRAP='"",zTR,""' "",!"
^ZWCmcd("dvstk-WS","mcod",30)="     W ""  $ZL="",nZL,!"
^ZWCmcd("dvstk-WS","mcod",31)="     W !"
^ZWCmcd("dvstk-WS","mcod",32)="     Q"
^ZWCmcd("dvstk-WS","mcod",33)="  ;* code from - only does zsch b  redirects if not $P to $P"
^ZWCmcd("dvstk-WS","mcod",34)="    ;*  zsh  & Break (Use 0)"
^ZWCmcd("dvstk-WS","mcod",35)=";   GTM>zwr %ZSH"
^ZWCmcd("dvstk-WS","mcod",36)=";  %ZSH(""S"",1)=""GFL+6^kas"""
^ZWCmcd("dvstk-WS","mcod",37)=";  %ZSH(""S"",2)=""    ($ZTRAP)"""
^ZWCmcd("dvstk-WS","mcod",38)=";  %ZSH(""S"",3)=""    (Direct mode) """
^ZWCmcd("dvstk-WS","mcod",39)=";  %ZSH(""S"",4)=""GFL+5^kas"""
^ZWCmcd("dvstk-WS","mcod",40)=";  %ZSH(""S"",5)=""AAA+1^kaITRxdc"""
^ZWCmcd("dvstk-WS","mcod",41)=";  %ZSH(""S"",6)=""kaITRxdc+4^kaITRxdc"""
^ZWCmcd("dvstk-WS","mcod",42)=";  %ZSH(""S"",7)=""kaITRprs+5^kaITRprs"""
^ZWCmcd("dvstk-WS","mcod",43)=";  %ZSH(""S"",8)=""L1^kaITRgo"""
^ZWCmcd("dvstk-WS","mcod",44)=";  %ZSH(""S"",9)=""A+9^kaITRgo"""
^ZWCmcd("dvstk-WS","mcod",45)=";  %ZSH(""S"",10)=""AList+15^kaITRgo"""
^ZWCmcd("dvstk-WS","mcod",46)=";  %ZSH(""S"",11)=""AList+9^kaITRgo"""
^ZWCmcd("dvstk-WS","mcod",47)=";  %ZSH(""S"",12)=""Ph3^kaMenu"""
^ZWCmcd("dvstk-WS","mcod",48)=";  %ZSH(""S"",13)=""33^a2"""
^ZWCmcd("dvstk-WS","mcod",49)=";  %ZSH(""S"",14)=""A^a2"""
^ZWCmcd("dvstk-WS","mcod",50)=";  %ZSH(""S"",15)=""+1^GTM$DMOD    (Direct mode) """
^ZWCmcd("dvstk-WS","mcod",51)=";"
^ZWCmcd("dvstk-WS","mcod",52)=""
^ZWCmcd("dvsys","mcod",1)="dvsys    ;CKW/ESC  i27feb20  gmsa/ rddv3/ ; 20200227-57 ; Sys status, Linux version, os, hw..."
^ZWCmcd("dvsys","mcod",2)="  ;  "
^ZWCmcd("dvsys","mcod",3)="  ;"
^ZWCmcd("dvsys","mcod",4)="  ;"
^ZWCmcd("dvsys-A","mcod",5)="A   S t=""temp-sys"",ZSY=""lsb_release -a>""_t"
^ZWCmcd("dvsys-A","mcod",6)="    OPEN t USE t R X,X2,X3"
^ZWCmcd("dvsys-A","mcod",7)="    CLOSE t"
^ZWCmcd("dvsys-A","mcod",8)="    W !,X,!,X2,!,X3,!"
^ZWCmcd("dvsys-A","mcod",9)="    S ZSY=""uname -a>t"" ZSY ZSY"
^ZWCmcd("dvsys-A","mcod",10)="        OPEN t USE t R X  ;,X2,X3"
^ZWCmcd("dvsys-A","mcod",11)="    CLOSE t"
^ZWCmcd("dvsys-A","mcod",12)="    W !,X,!  ; ,X2,!,X3,!"
^ZWCmcd("dvsys-A","mcod",13)="    Q"
^ZWCmcd("dvsys-A","mcod",14)=""
^ZWCmcd("dvsys-A","mcod",15)=""
^ZWCmcd("dvsys-A","mcod",16)=""
^ZWCmcd("dvsys-N","mcod",17)=";*************** from dvstk ?"
^ZWCmcd("dvsys-N","mcod",18)="N  NEW:0 %ZSH,%ZS,nSTK,nZL,li,LR,LN"
^ZWCmcd("dvsys-N","mcod",19)="   zsh ""S"":%ZSH   ; See example below, 2-level array"
^ZWCmcd("dvsys-N","mcod",20)="    ; %ZSH(""S"",1:1)=   source label ^ MRou"
^ZWCmcd("dvsys-N","mcod",21)="    S nZL=$ZL"
^ZWCmcd("dvsys-N","mcod",22)="    S nSTK=$ZP(%ZSH(""S"","""")) "
^ZWCmcd("dvsys-N","mcod",23)="    I nZL'=nSTK USE 0 W !,""$ZL="",$ZL,"" but ZSH has "",nSTK,!"
^ZWCmcd("dvsys-N","mcod",24)="    S eTR=$ETRAP"
^ZWCmcd("dvsys-N","mcod",25)="    S zTR=$ZTRAP"
^ZWCmcd("dvsys-S","mcod",26)="S    F li=nSTK:-1:1 S ls=nSTK-li+1,LR=%ZSH(""S"",li) DO  ;"
^ZWCmcd("dvsys-S","mcod",27)="      . S R=$P(LR,""^"",2),LB=$P(LR,""^"")"
^ZWCmcd("dvsys-S","mcod",28)="      . S %ZS(ls,""R"")=R,%ZS(ls,""LB"")=LB"
^ZWCmcd("dvsys-S","mcod",29)="      .; W:$X ! W li,"" "",?4,LR"
^ZWCmcd("dvsys-S","mcod",30)="      . I LR[""("" S LN=""Dir Mode"""
^ZWCmcd("dvsys-S","mcod",31)="      . E  I LR'[""^"" S LN=LR"
^ZWCmcd("dvsys-S","mcod",32)="      . E  S LN=$T(@LR)"
^ZWCmcd("dvsys-S","mcod",33)="      . S %ZS(ls,""LN"")=LN"
^ZWCmcd("dvsys-S","mcod",34)="      .; W !,?6,LN,!"
^ZWCmcd("dvsys-S","mcod",35)="    S ZC=nSTK-1 S Caller=""?"""
^ZWCmcd("dvsys-S","mcod",36)="    I ZC S Caller=$G(%ZSH(""S"",ZC))_"": ""_$G(%ZSH(""L"",ZC))"
^ZWCmcd("dvsys-S","mcod",37)="    D WS"
^ZWCmcd("dvsys-S","mcod",38)="    Q"
^ZWCmcd("dvsys-WS","mcod",39)="WS   W:$X ! W ""Caller:"",Caller,""   Stack-"",!"
^ZWCmcd("dvsys-WS","mcod",40)="     F si=1:1:nSTK DO"
^ZWCmcd("dvsys-WS","mcod",41)="       .W:$X ! W si,"" "",?5,%ZS(si,""R""),"" "",%ZS(si,""LB""),""  "",?25,%ZS(si,""LN""),!"
^ZWCmcd("dvsys-WS","mcod",42)="     W ""  $ETRAP='"",eTR,""' "",!"
^ZWCmcd("dvsys-WS","mcod",43)="     W ""  $ZTRAP='"",zTR,""' "",!"
^ZWCmcd("dvsys-WS","mcod",44)="     W ""  $ZL="",nZL,!"
^ZWCmcd("dvsys-WS","mcod",45)="     W !"
^ZWCmcd("dvsys-WS","mcod",46)="     Q"
^ZWCmcd("dvsys-WS","mcod",47)=""
^ZWCmcd("dvsys-WS","mcod",48)=""
^ZWCmcd("dvv","mcod",1)="dvv(Lvn)   ;CKW/ESC  i7Aug17 ;  2017030-90 ; Var Lists & Vars Util"
^ZWCmcd("dvv","mcod",2)="  ;  in  gmsa/ rdv/        was dev in mtxRube/rdv/ "
^ZWCmcd("dvv","mcod",3)="  ;RefBy: mHSTA3 ^"
^ZWCmcd("dvv","mcod",4)="  zsh ""S"":%ZST zsh ""*"":%ZAL"
^ZWCmcd("dvv","mcod",5)="  S CLR=$$CLR^dvzc($T(+0))  ; : Caller"
^ZWCmcd("dvv","mcod",6)="  D LV(Lvn)"
^ZWCmcd("dvv","mcod",7)="  Q"
^ZWCmcd("dvv","mcod",8)="  ;  %VN(vn,a  in {vde,vTy,val}   %VN()  Produced by ^dvvr"
^ZWCmcd("dvv","mcod",9)="  ;  %VLF(Lvn,a  a in {Lde,LTy,Lva  }"
^ZWCmcd("dvv","mcod",10)="  ;  %VAL         Values, saved or live ? @vn, subscr by cb or timestamp"
^ZWCmcd("dvv-LV","mcod",19)=";*  Lvn is a List, may be descr or not in %VL"
^ZWCmcd("dvv-LV","mcod",20)="LV(Lvn)  I $G(Lvn)="""" D bug^dv Q"
^ZWCmcd("dvv-LV","mcod",21)="     NEW Lva"
^ZWCmcd("dvv-LV","mcod",22)="     S Lva="""" I $D(@Lvn) S Lva=@Lvn"
^ZWCmcd("dvv-LV","mcod",23)="     E  S Lva=$G(%VL(Lvn,""Lva""))"
^ZWCmcd("dvv-LV","mcod",24)="     I Lva="""" D bug^dv Q"
^ZWCmcd("dvv-LV","mcod",25)="     D WLa(Lva)  ;"
^ZWCmcd("dvv-LV","mcod",26)="     Q"
^ZWCmcd("dvv-VLL","mcod",11)="VLL(VLLn)    I $G(VLLn)="""" S VLL="""" D bug^dv Q"
^ZWCmcd("dvv-VLL","mcod",12)="     NEW VLL,vli,VLn"
^ZWCmcd("dvv-VLL","mcod",13)="     S VLL=@VLLn"
^ZWCmcd("dvv-VLL","mcod",14)="     W !!,""Lists:"",VLLn,"" - '"",VLL,""'"",!"
^ZWCmcd("dvv-VLL","mcod",15)="     F vli=1:1:$L(VLL,"","") S VLn=$P(VLL,"","",vli) DO  ;"
^ZWCmcd("dvv-VLL","mcod",16)="       .D LV(VLn)"
^ZWCmcd("dvv-VLL","mcod",17)="     Q"
^ZWCmcd("dvv-VLL","mcod",18)="  ;"
^ZWCmcd("dvv-WLL","mcod",45)=";* Write long line - wrap/break it"
^ZWCmcd("dvv-WLL","mcod",46)="; val, vn, vde"
^ZWCmcd("dvv-WLL","mcod",47)="WLL  W:$X ! W vn,""- "",vde,!"
^ZWCmcd("dvv-WLL","mcod",48)="     S V=val,L=$L(V) S wd=80 "
^ZWCmcd("dvv-WLL","mcod",49)="     F vx=wd-5:-1:wd-15 I "" -_?.""[$E(V,vx) S V1=$E(V,1,vx),V=$E(V,vx+1,999) W:$X ! W ""  "",V1,! Q"
^ZWCmcd("dvv-WLL","mcod",50)="     F vj=1:1:5 Q:V=""""  F vx=wd-5:-1  I "" -_?.""[$E(V,vx)!(wd-15=vx) S V1=$E(V,1,vx),V=$E(V,vx+1,999) W:$X ! W "" ..."",V1,! Q"
^ZWCmcd("dvv-WLL","mcod",51)="     I V'="""" W ""  ..."",$L(V),"" more!"",!"
^ZWCmcd("dvv-WLL","mcod",52)="     Q"
^ZWCmcd("dvv-WLa","mcod",27)=";*  Write to $P"
^ZWCmcd("dvv-WLa","mcod",28)="WLa(Lva) I $G(Lva)="""" D bug^dv"
^ZWCmcd("dvv-WLa","mcod",29)="         S Lde=$G(%VL(Lvn,""Lde""))"
^ZWCmcd("dvv-WLa","mcod",30)="     W !,""WLa:"",Lvn,"": "",Lva,!  I Lde'="""" W:$X ! W ""  "",Lde,!"
^ZWCmcd("dvv-WLa","mcod",31)="     NEW vi,vn,val"
^ZWCmcd("dvv-WLa","mcod",32)="     F vi=1:1:$L(Lva,"","") S vn=$P(Lva,"","",vi) DO  ;"
^ZWCmcd("dvv-WLa","mcod",33)="       .S val=$G(@vn) I val="""" S val=""null"" S:$D(@vn)=0 val=""Undef"""
^ZWCmcd("dvv-WLa","mcod",34)="       .S vde=$G(%VA(vn,""vde""))"
^ZWCmcd("dvv-WLa","mcod",35)="       .S L=$L(val)"
^ZWCmcd("dvv-WLa","mcod",36)="       .I L<10 DO  Q"
^ZWCmcd("dvv-WLa","mcod",37)="          ..W:$X ! W vn,"": "",val  W:vde'="""" ""  /"",vde  W !"
^ZWCmcd("dvv-WLa","mcod",38)="       .I $L(vde)+L<70 DO  Q"
^ZWCmcd("dvv-WLa","mcod",39)="          ..W:$X ! W vn,"": '"",val W:vde'="""" ""  /"",vde  W !"
^ZWCmcd("dvv-WLa","mcod",40)="       .I L>70 D WLL Q"
^ZWCmcd("dvv-WLa","mcod",41)="       .DO"
^ZWCmcd("dvv-WLa","mcod",42)="          ..W:$X ! W vn,"": '"",val,""' "",! W:vde'="""" ""  /"",vde,!"
^ZWCmcd("dvv-WLa","mcod",43)="     W:$X !"
^ZWCmcd("dvv-WLa","mcod",44)="     Q"
^ZWCmcd("dvvHVL","mcod",1)="dvvHVL(VVVL,mpj)  ;CKW/ESC   i1jul18  ; 20180701-50 ; HGen *VL var list page"
^ZWCmcd("dvvHVL","mcod",2)="  ; dev in gmsa/rvv/  was (T2DM/ rdv/)       sic: own $$sp, $$link"
^ZWCmcd("dvvHVL","mcod",3)="  ;"
^ZWCmcd("dvvHVL","mcod",4)="  ;     RefBy:  DVV^qdDIS, DVV^cqMa   both Menu: $doc  dvv."
^ZWCmcd("dvvHVL","mcod",5)="  ;      Uses %VN(vn,  produced by ^ddvvr (not called here)"
^ZWCmcd("dvvHVL","mcod",6)="  ;     Depends on: ^hgh"
^ZWCmcd("dvvHVL","mcod",7)="  I $G(VVVL)="""" D bug^dv Q"
^ZWCmcd("dvvHVL","mcod",8)="  I VVVL'[""VL"",VVVL'[""FL"" D b^dv(""VVVL is not the name of a *FL/*VL var"",""VVVL"")  ;Blunder on?"
^ZWCmcd("dvvHVL","mcod",9)="  I $G(mpj)="""" S mpj=""mpjUNK"""
^ZWCmcd("dvvHVL","mcod",10)="  S L=$G(@VVVL) I L="""" D b^dv(""Err *FL/*VL Var is Null"",""VVVL"") Q"
^ZWCmcd("dvvHVL","mcod",11)="  S GBA=$P(L,""_"",2),VL=$P(L,""_"")"
^ZWCmcd("dvvHVL","mcod",12)="  S subn="""" I GBA[""("" S subn=$P(GBA,""("",2),subn=$P(subn,"")"")"
^ZWCmcd("dvvHVL","mcod",13)="  S TItb=VVVL,TIhd=""Super Var List"""
^ZWCmcd("dvvHVL","mcod",14)="  S TIft=""by ^""_$T(+0)_""  ""_$ZD($H,""DDMONYY 24:60"")"
^ZWCmcd("dvvHVL","mcod",15)="  S hFil=$$VVVL^dvIpg(VVVL,mpj)"
^ZWCmcd("dvvHVL","mcod",16)="  S devh=$$devh^dvIdev(hFil)  ; devh"
^ZWCmcd("dvvHVL","mcod",17)="  D HG1^dvh(devh)"
^ZWCmcd("dvvHVL","mcod",18)="  D guts"
^ZWCmcd("dvvHVL","mcod",19)="  D HG2^dvh(devh)"
^ZWCmcd("dvvHVL","mcod",20)="  Q"
^ZWCmcd("dvvHVL-DMGB","mcod",36)=";*    "
^ZWCmcd("dvvHVL-DMGB","mcod",37)="DMGB  W:$X ! W ""<div class=dmgb >"""
^ZWCmcd("dvvHVL-DMGB","mcod",38)="      W ""_P2 MGbl: "",GBA"
^ZWCmcd("dvvHVL-DMGB","mcod",39)="      W !,""</div>"""
^ZWCmcd("dvvHVL-DMGB","mcod",40)="      Q"
^ZWCmcd("dvvHVL-DV1","mcod",30)=";* Intro "
^ZWCmcd("dvvHVL-DV1","mcod",31)="DV1   W:$X ! W ""<div class=dv1 >"",!"
^ZWCmcd("dvvHVL-DV1","mcod",32)="      W ""*FL Var:"",VVVL,"" - """
^ZWCmcd("dvvHVL-DV1","mcod",33)="      W $G(@VVVL)   ; Needs wrap on comma delim ---"
^ZWCmcd("dvvHVL-DV1","mcod",34)="      W !,""</div>"""
^ZWCmcd("dvvHVL-DV1","mcod",35)="      Q"
^ZWCmcd("dvvHVL-DVV","mcod",25)=";* VVVL"
^ZWCmcd("dvvHVL-DVV","mcod",26)="DVV   D DV1"
^ZWCmcd("dvvHVL-DVV","mcod",27)="      D DMGB"
^ZWCmcd("dvvHVL-DVV","mcod",28)="      D VL1"
^ZWCmcd("dvvHVL-DVV","mcod",29)="      Q"
^ZWCmcd("dvvHVL-TOC","mcod",50)=";*"
^ZWCmcd("dvvHVL-TOC","mcod",51)=";*  HGen TOC page"
^ZWCmcd("dvvHVL-TOC","mcod",52)="TOC(LVV,mpj)  I $G(LVV)=""""!($G(mpj)="""") D bug^dv Q"
^ZWCmcd("dvvHVL-TOC","mcod",53)="     S hFil=""VVL-TOC.html"" S devh=$$devh^dvIdev(hFil)"
^ZWCmcd("dvvHVL-TOC","mcod",54)="     S TIhd=""Super Var List Doc Pages  - TOC"",TIhd=""xVL-TOC"""
^ZWCmcd("dvvHVL-TOC","mcod",55)="     D HG1^dvh(devh)"
^ZWCmcd("dvvHVL-TOC","mcod",56)="     F vli=1:1:$L(LVV,"","") S vln=$P(LVV,"","",vli) I vln'="""" DO  ;"
^ZWCmcd("dvvHVL-TOC","mcod",57)="       .S Fil=$$VVVL^dvIpg(vln,mpj)"
^ZWCmcd("dvvHVL-TOC","mcod",58)="       .D wlnk(vln,Fil) W ""<br/>"",!"
^ZWCmcd("dvvHVL-TOC","mcod",59)="     D HG2^dvh(devh)"
^ZWCmcd("dvvHVL-TOC","mcod",60)="     Q"
^ZWCmcd("dvvHVL-VL1","mcod",41)=";*  List Vars"
^ZWCmcd("dvvHVL-VL1","mcod",42)="VL1   W:$X ! W ""<div class=vl1 >"""
^ZWCmcd("dvvHVL-VL1","mcod",43)="      F vi=1:1:$L(VL,"","") S vn=$P(VL,"","",vi) I vn'="""" DO  ;"
^ZWCmcd("dvvHVL-VL1","mcod",44)="        .S val=$G(@vn)"
^ZWCmcd("dvvHVL-VL1","mcod",45)="        .S vde=$G(%VN(vn,""vde""))"
^ZWCmcd("dvvHVL-VL1","mcod",46)="        .W ""<br/>vn:"",vn,"" - "",vde,""  """
^ZWCmcd("dvvHVL-VL1","mcod",47)="        .I $L(val)>20 W ""<br/> "",$$sp(3)"
^ZWCmcd("dvvHVL-VL1","mcod",48)="        .I val'="""" W val,$$sp(3)"
^ZWCmcd("dvvHVL-VL1","mcod",49)="      Q"
^ZWCmcd("dvvHVL-guts","mcod",21)=";*"
^ZWCmcd("dvvHVL-guts","mcod",22)="guts  W !,""<pre>"",! DO   W:$X ! W ""</pre>"",! Q"
^ZWCmcd("dvvHVL-guts","mcod",23)="        .W !,""<body>"",! D DVV   W:$X ! W ""</body>"",! Q"
^ZWCmcd("dvvHVL-guts","mcod",24)="      Q"
^ZWCmcd("dvvHVL-sp","mcod",61)=";*"
^ZWCmcd("dvvHVL-sp","mcod",62)="sp(n) NEW i,sp I '$G(n) S n=4  ;undef or zero"
^ZWCmcd("dvvHVL-sp","mcod",63)="      I n>10 S n=10  ; max"
^ZWCmcd("dvvHVL-sp","mcod",64)="      S sp=""&nbsp;&nbsp;&nbsp;"" F i=n-3:1:n S sp=sp_""&nbsp;"""
^ZWCmcd("dvvHVL-sp","mcod",65)="     Q sp"
^ZWCmcd("dvvHVL-wlnk","mcod",66)=";* Write LINK <a   literal href No path adj here"
^ZWCmcd("dvvHVL-wlnk","mcod",67)="wlnk(txt,href,cls) I $G(txt)="""" S txt=""Link?"""
^ZWCmcd("dvvHVL-wlnk","mcod",68)="     I $G(href)="""" D bug^dv Q"
^ZWCmcd("dvvHVL-wlnk","mcod",69)="     I $G(cls)="""" S cls="""""
^ZWCmcd("dvvHVL-wlnk","mcod",70)="     W ""<a href='"",href,""' """
^ZWCmcd("dvvHVL-wlnk","mcod",71)="     I cls'="""" W ""class='"",cls,""' """
^ZWCmcd("dvvHVL-wlnk","mcod",72)="     W "">"",txt,""</a>"""
^ZWCmcd("dvvHVL-wlnk","mcod",73)="     Q"
^ZWCmcd("dvvHVL-wlnk","mcod",74)="     "
^ZWCmcd("dvvMDkCom","mcod",1)="dvvMDkCom(devm,devh)  ;CKW/ESC  i9Jul18 ; 20180709-01 ; MDkCompile Vers1 / Quickie code"
^ZWCmcd("dvvMDkCom","mcod",2)="  ;         in T2DM/  rdv/   "
^ZWCmcd("dvvMDkCom","mcod",3)="  ;"
^ZWCmcd("dvvMDkCom","mcod",4)="  ;"
^ZWCmcd("dvvMDkCom-A","mcod",5)="A    I $G(devm)="""" D bug^dv Q"
^ZWCmcd("dvvMDkCom-A","mcod",6)="     I $G(devh)="""" S devh=$P(devm,"".MDk"")_"".md2.html"""
^ZWCmcd("dvvMDkCom-A","mcod",7)="     D RDF^dvs(devm) I 'RF D b^dv(""Err opening devm *.MDk "",""devm,devh"") Q"
^ZWCmcd("dvvMDkCom-A","mcod",8)="     ;  RF()"
^ZWCmcd("dvvMDkCom-A","mcod",9)="     S TI=""MDkCompile from ""_devm"
^ZWCmcd("dvvMDkCom-A","mcod",10)="     S TItb=""MDkCom"""
^ZWCmcd("dvvMDkCom-A","mcod",11)="     D HG1^dvh(devh)"
^ZWCmcd("dvvMDkCom-A","mcod",12)="     D guts"
^ZWCmcd("dvvMDkCom-A","mcod",13)="     D HG2^dvh(devh)"
^ZWCmcd("dvvMDkCom-A","mcod",14)="     Q"
^ZWCmcd("dvvMDkCom-CL1","mcod",23)=";*"
^ZWCmcd("dvvMDkCom-CL1","mcod",24)=";*  L"
^ZWCmcd("dvvMDkCom-CL1","mcod",25)="CL1  S nsp=0,P1="""""
^ZWCmcd("dvvMDkCom-CL1","mcod",26)="     I $E(L)="" "" DO"
^ZWCmcd("dvvMDkCom-CL1","mcod",27)="       .F nsp=1:1 I $E(L,nsp+1)'="" "" S L=$E(L,nsp+1,9999) Q"
^ZWCmcd("dvvMDkCom-CL1","mcod",28)="     I $E(L)?1P S P1=$E(L) DO"
^ZWCmcd("dvvMDkCom-CL1","mcod",29)="       .F nP1=1:1 I $E(L,nP1+1)'=P1 S L=$E(L,nP1+1,9999) Q"
^ZWCmcd("dvvMDkCom-CL1","mcod",30)="     I P1=""#"" D Hn"
^ZWCmcd("dvvMDkCom-CL1","mcod",31)="     D WC"
^ZWCmcd("dvvMDkCom-CL1","mcod",32)="     Q"
^ZWCmcd("dvvMDkCom-Hn","mcod",41)=";*"
^ZWCmcd("dvvMDkCom-Hn","mcod",42)="Hn   I (nP1'?1n)!('nP1) D bug^dv Q"
^ZWCmcd("dvvMDkCom-Hn","mcod",43)="     W ""<h"",nP1,"">"",L"
^ZWCmcd("dvvMDkCom-Hn","mcod",44)="     W ""</"",nP1,"">"""
^ZWCmcd("dvvMDkCom-Hn","mcod",45)="     Q"
^ZWCmcd("dvvMDkCom-Hn","mcod",46)=";*"
^ZWCmcd("dvvMDkCom-WC","mcod",33)=";*  chop and test L words (space delim)"
^ZWCmcd("dvvMDkCom-WC","mcod",34)="WC   F wi=1:1:$L(L,"" "") S WD=$P(L,"" "",wi) D WW"
^ZWCmcd("dvvMDkCom-WC","mcod",35)="     W !"
^ZWCmcd("dvvMDkCom-WC","mcod",36)="     Q"
^ZWCmcd("dvvMDkCom-WW","mcod",37)=";*"
^ZWCmcd("dvvMDkCom-WW","mcod",38)="WW   S wd=$$LC^dvs(WD)"
^ZWCmcd("dvvMDkCom-WW","mcod",39)="     S dwd=$G(^TD(wd)) I dwd="""" W WD,"" "" Q  ;Dictionary"
^ZWCmcd("dvvMDkCom-WW","mcod",40)="     Q"
^ZWCmcd("dvvMDkCom-guts","mcod",15)=";*"
^ZWCmcd("dvvMDkCom-guts","mcod",16)=";    Txmo  [ {pre,ptag }"
^ZWCmcd("dvvMDkCom-guts","mcod",17)=";    "
^ZWCmcd("dvvMDkCom-guts","mcod",18)=";"
^ZWCmcd("dvvMDkCom-guts","mcod",19)="guts ;"
^ZWCmcd("dvvMDkCom-guts","mcod",20)="     F ri=1:1:RF S L=$G(RF(ri)) D CL1"
^ZWCmcd("dvvMDkCom-guts","mcod",21)="     U $P W:$X ! W ""^"",$T(+0),"" Completed "",devh,!"
^ZWCmcd("dvvMDkCom-guts","mcod",22)="     Q"
^ZWCmcd("dvvTest","mcod",1)="dvvTest  ;CKW/ESC  i10Aug17 ; 20170810-86 ; Test ^dvv and WLL"
^ZWCmcd("dvvTest","mcod",2)="  ;"
^ZWCmcd("dvvTest","mcod",3)=";"
^ZWCmcd("dvvTest-S","mcod",25)=";*"
^ZWCmcd("dvvTest-S","mcod",26)="S   S L=$L(val) D WLL^dvv "
^ZWCmcd("dvvTest-S","mcod",27)="    Q"
^ZWCmcd("dvvTest-T","mcod",4)="T      ; Set Up %VA, %VL temp for testing"
^ZWCmcd("dvvTest-T","mcod",5)="     KILL %VA,%VL"
^ZWCmcd("dvvTest-T","mcod",6)="     S Lvn=""iaVL"",Lva=""CCL,FmL,FTL,ORL,ORLp,ORLn,xFN,xCF,xTYn,xFB,xBC,xBN"""
^ZWCmcd("dvvTest-T","mcod",7)="     S %VL(Lvn,""Lva"")=Lva"
^ZWCmcd("dvvTest-T","mcod",8)="     S %VL(Lvn,""Lde"")=""Std Conversion Strings by ^rbIA"""
^ZWCmcd("dvvTest-T","mcod",9)="     S VLLx=""iaVLx"",iaVLx=""CCL,xFB,xFN"""
^ZWCmcd("dvvTest-T","mcod",10)="     D VLL^dvv(""VLLx"")"
^ZWCmcd("dvvTest-T","mcod",11)="     W !,""***"",!"
^ZWCmcd("dvvTest-T","mcod",12)="     S vn=""CCL"",%VA(vn,""vde"")=""Color List, Caps, in order   WYORBG"""
^ZWCmcd("dvvTest-T","mcod",13)="     S CCL=""WYORBG"""
^ZWCmcd("dvvTest-T","mcod",14)="     D VLL^dvv(""VLLx"")"
^ZWCmcd("dvvTest-T","mcod",15)="     W !,""***"",!"
^ZWCmcd("dvvTest-T","mcod",16)="     D ^rbIA   S VLLx=""iaVL,ia2VL"""
^ZWCmcd("dvvTest-T","mcod",17)="     D VLL^dvv(""VLLx"")"
^ZWCmcd("dvvTest-T","mcod",18)="     Q"
^ZWCmcd("dvvTest-TWLL","mcod",19)=";*  val, L, vn, vde"
^ZWCmcd("dvvTest-TWLL","mcod",20)="TWLL  S vn=""XXX"",vde=""Test var XX in TWLL^dvvTest"""
^ZWCmcd("dvvTest-TWLL","mcod",21)="     S val=""short"" D S"
^ZWCmcd("dvvTest-TWLL","mcod",22)="     S val=""This is  a fairly long lllllllllllllllllllllllllllllll Word1  word2,word3"" D S"
^ZWCmcd("dvvTest-TWLL","mcod",23)="     S val=""This is  a fairly long lllllllllllllllllllllllllllllll much longer longer longer longer longer Word1  word2,word3"" D S     "
^ZWCmcd("dvvTest-TWLL","mcod",24)="     Q"
^ZWCmcd("dvvr","mcod",1)="dvvr  ;CKW/ESC  i20Jul18 ; 20180720-25 ; Gather var vde from MRou via grep"
^ZWCmcd("dvvr","mcod",2)="  ; in gmsa/  rvv/  dev/kate edit in T2DM"
^ZWCmcd("dvvr","mcod",3)="  ;    RefBy: 1) DVV^qdDIS Menu: $doc dvv.      2) Menu: $doc  dvvr."
^ZWCmcd("dvvr","mcod",4)="  ;"
^ZWCmcd("dvvr","mcod",5)="  ;  :  %VN(vn,   in {vde,vdty,vref,"
^ZWCmcd("dvvr","mcod",6)="  ;  :  $VLF(Lvn,       *FL vars"
^ZWCmcd("dvvr","mcod",7)="  ;  grep pipe file-         temp-pipe.txt   in T2DM/ doc"
^ZWCmcd("dvvr","mcod",8)="  ;   QSdm  T2DM  Menu $doc  dvvr. "
^ZWCmcd("dvvr","mcod",9)="  ;   Just *IMG.m  in MPrj   r*/  Subdirs"
^ZWCmcd("dvvr","mcod",10)="  ;   First space piece after ;; must look like a var-name"
^ZWCmcd("dvvr","mcod",11)="  KILL  ; "
^ZWCmcd("dvvr-CB","mcod",73)=";*  CodeBlock Ref  ;;label^Mrou  "
^ZWCmcd("dvvr-CB","mcod",74)="CB    S cbi=$P(vn,""^"",2)_""-""_$P(vn,""^"")  ;either may be null"
^ZWCmcd("dvvr-CB","mcod",75)="      S cbde=vde"
^ZWCmcd("dvvr-CB","mcod",76)="      S %CB(cbi,""cbde"")=cbde"
^ZWCmcd("dvvr-CB","mcod",77)="      Q"
^ZWCmcd("dvvr-CB","mcod",78)=" "
^ZWCmcd("dvvr-II","mcod",29)=";* Init"
^ZWCmcd("dvvr-II","mcod",30)="II    KILL %VN,%VLF   ; vs merge"
^ZWCmcd("dvvr-II","mcod",31)="      S vnFL=""vde,Vna,mrou,vri,vFol,L2,vT,nLn,T1_%VN(vn)"" "
^ZWCmcd("dvvr-II","mcod",32)="      S nVN=0"
^ZWCmcd("dvvr-II","mcod",33)="      Q"
^ZWCmcd("dvvr-T1","mcod",36)=";*  grep file Lines"
^ZWCmcd("dvvr-T1","mcod",37)=";** rsr/qdIMG.m:22:;;qaFL *FL Main List DM QS log record"
^ZWCmcd("dvvr-T1","mcod",38)=";*"
^ZWCmcd("dvvr-T1","mcod",39)=";* Parse identifier  Vna or cb...   from grep-output !  MRou line incidentally..."
^ZWCmcd("dvvr-T1","mcod",40)=";* includes grep info then MRou line itself to parse, ?TOI - not yet"
^ZWCmcd("dvvr-T1","mcod",41)=";*  T : Vna, vn, mrou, "
^ZWCmcd("dvvr-T1","mcod",42)="T1    S T1=$P(T,"":""),nLn=$P(T,"":"",2),L=$P(T,"":"",3,999),vn="""",Vna="""""
^ZWCmcd("dvvr-T1","mcod",43)="      I L[$C(9) S L=$TR(L,$C(9),"" "")  ; no tabs/ convert to space"
^ZWCmcd("dvvr-T1","mcod",44)="      S nSl=$L(T1,""/""),mrou=$P(T1,""/"",nSl),vFol=$P(T1,""/"",1,nSl-1)"
^ZWCmcd("dvvr-T1","mcod",45)="      I mrou'["".m"" Q"
^ZWCmcd("dvvr-T1","mcod",46)="      I mrou'[""IMG"",mrou'[""img"" Q  ;Ignore all but ^*IMG or ^*img"
^ZWCmcd("dvvr-T1","mcod",47)="      I mrou[""Menu"" Q  ; Ignore Menu with conflicting ;; lines"
^ZWCmcd("dvvr-T1","mcod",48)="      I vFol'="""" S vFol=vFol_""/"""
^ZWCmcd("dvvr-T1","mcod",49)="      F nSp=1:1:9 I $E(L)="" "" S L=$E(L,2,9999)  ; remove init/post-key spaces, up to 9"
^ZWCmcd("dvvr-T1","mcod",50)="      ;  I $E(L,1,2)'="";;"" Q  ;Ignore  ';;' later in line"
^ZWCmcd("dvvr-T1","mcod",51)="      S v1=$P(L,"";;"",2),v=$P(v1,"" ""),L2=$P(v1,"" "",2,9999),vde=L2"
^ZWCmcd("dvvr-T1","mcod",52)="      I v="""" Q"
^ZWCmcd("dvvr-T1","mcod",53)="      I v[""."" Q"
^ZWCmcd("dvvr-T1","mcod",54)="      I v[""^"" D CB"
^ZWCmcd("dvvr-T1","mcod",55)="      S Vna=v,vn=$$LC^dvs(v)"
^ZWCmcd("dvvr-T1","mcod",56)="      Q"
^ZWCmcd("dvvr-TFL","mcod",69)=";*"
^ZWCmcd("dvvr-TFL","mcod",70)="TFL   S %VLF(vn)=Vna"
^ZWCmcd("dvvr-TFL","mcod",71)="      S %VLF(vn,""Lde"")=$G(vde)"
^ZWCmcd("dvvr-TFL","mcod",72)="      Q"
^ZWCmcd("dvvr-VAR","mcod",57)=";*  ;; var name sp -> %VN()"
^ZWCmcd("dvvr-VAR","mcod",58)="VAR   D T^dws(""vnFL=vde,mrou,vri,vFol,L2,vT,nLn,T1_%VN(vn)"")"
^ZWCmcd("dvvr-VAR","mcod",59)="      S vlst=$G(%VN(vn)),L8=$G(%VN(vn,""L2""))"
^ZWCmcd("dvvr-VAR","mcod",60)="      I vlst'="""",vlst'=Vna D b^dv(""Vna case clash"",""vlst,Vna,vn,mrou,nLn"")"
^ZWCmcd("dvvr-VAR","mcod",61)="      I L8'="""",L8'=L2 D b^dv(""Duplicate entry for vn"",""vn,mrou,nLn,L2,L8"")  ; proceed"
^ZWCmcd("dvvr-VAR","mcod",62)="      I vlst=Vna KILL %VN(vn)  ; replace"
^ZWCmcd("dvvr-VAR","mcod",63)="      ;S %VN(vn)=Vna  ; Vna actual case, vn is lc"
^ZWCmcd("dvvr-VAR","mcod",64)="      S nVN=nVN+1  ; count num vars found"
^ZWCmcd("dvvr-VAR","mcod",65)="      S vri=ri,vT=T"
^ZWCmcd("dvvr-VAR","mcod",66)="      D SFL^dvs(vnFL)  ; Save in %VN(vn) Array"
^ZWCmcd("dvvr-VAR","mcod",67)="        ;F fi=1:1:$L(fL,"","") S fn=$P(fL,"","",fi),val=$G(@fn) I val'="""" S %VN(vn,fn)=@fn"
^ZWCmcd("dvvr-VAR","mcod",68)="      Q"
^ZWCmcd("dvvr-WriN","mcod",34)="WriN  W:$X ! W ""^"",$T(+0),"" Found "",nVN,"" vars."",!"
^ZWCmcd("dvvr-WriN","mcod",35)="      Q"
^ZWCmcd("dvvr-grep","mcod",12)="grep  S devP=$$devp^dvIdev(""temp-pipe.txt"")"
^ZWCmcd("dvvr-grep","mcod",13)="      S MPrj=$G(Mpr)  I MPrj="""" S MPrj=""T2DM"""
^ZWCmcd("dvvr-grep","mcod",14)="      S Rns=""*.m""  ; All MRou for now vs NameSpace"
^ZWCmcd("dvvr-grep","mcod",15)="      S ZCmd=""cd ~/km7r/""_MPrj_""; grep -n """"^\;\;"""" r*/""_Rns_"" >""_devP"
^ZWCmcd("dvvr-grep","mcod",16)="      USE $P W:$X ! W ""Searching (grep) for dbl ;; vne lines in Mpj MRou-"",! zwr ZCmd W !"
^ZWCmcd("dvvr-grep","mcod",17)="      ZSY ZCmd"
^ZWCmcd("dvvr-grep","mcod",18)="      KILL RF D RDF^dvs(devp) I 'RF D b^dv(""Failed to read pipe file?"",""devp"") Q"
^ZWCmcd("dvvr-grep","mcod",19)="      ;USE $P W:$X ! W ""Found "",RF,"" lines with dbl semcolons-"",!"
^ZWCmcd("dvvr-grep","mcod",20)="      ;"
^ZWCmcd("dvvr-grep","mcod",21)="      D II"
^ZWCmcd("dvvr-grep","mcod",22)="      F ri=1:1:RF S T=$G(RF(ri)) I T'="""" DO  ; ea line"
^ZWCmcd("dvvr-grep","mcod",23)="        .D T1 I vn="""" Q"
^ZWCmcd("dvvr-grep","mcod",24)="        .I vn?1.A.N.AN D VAR"
^ZWCmcd("dvvr-grep","mcod",25)="        .I Vna?1.AN1""FL"" D TFL  ; in addition to VAR"
^ZWCmcd("dvvr-grep","mcod",26)="        .I vn[""^"" D CB  ; Label^MRou variants => cb CodeBlock"
^ZWCmcd("dvvr-grep","mcod",27)="      USE $P D WriN"
^ZWCmcd("dvvr-grep","mcod",28)="      Q"
^ZWCmcd("dvzb","mcod",1)="dvzb(%cb,%VL) ;CKW/ESC i13oct20 gmsa/ rd2vl/ ; 20201013-77 ; zb target sr"
^ZWCmcd("dvzb","mcod",2)=";"
^ZWCmcd("dvzb","mcod",3)=";    Caller  ZSH S:%AZSH D ^dvzb   vs zb  Alt"
^ZWCmcd("dvzb","mcod",4)=";    Maily list vars in %VL, %VL could come from %cb & ^Q* something"
^ZWCmcd("dvzb","mcod",5)=";    Eg  zb QS^dgmg:""D ^dvzb(""""SFL^dgmg"""",""G,FL,SFL,%vi,%vn,%val,%old"")"
^ZWCmcd("dvzb","mcod",6)=";"
^ZWCmcd("dvzb","mcod",7)=";"
^ZWCmcd("dvzb-A","mcod",8)="A     ;I $D(%AZSH)=0 S Q=""Caller Utility Error ^""_$T(+0) USE $P W:$X ! W Q,! B  Q  ;"
^ZWCmcd("dvzb-A","mcod",9)="      NEW %vi,%vn,%val,%D"
^ZWCmcd("dvzb-A","mcod",10)="      S %cb=$G(%cb)  ; MRou code block  mrou-label"
^ZWCmcd("dvzb-A","mcod",11)="      S %VL=$G(%VL)"
^ZWCmcd("dvzb-A","mcod",12)="      D DVL"
^ZWCmcd("dvzb-A","mcod",13)="      Q"
^ZWCmcd("dvzb-DVL","mcod",14)=";*"
^ZWCmcd("dvzb-DVL","mcod",15)="DVL   F %vi=1:1:$L(%VL,"","") S %vn=$P(%VL,"","",%vi) I %vn'="""" D V1"
^ZWCmcd("dvzb-DVL","mcod",16)="      W Q"
^ZWCmcd("dvzb-DVL","mcod",17)="      Q"
^ZWCmcd("dvzb-V1","mcod",18)=";*"
^ZWCmcd("dvzb-V1","mcod",19)="V1    W:$X !"
^ZWCmcd("dvzb-V1","mcod",20)="      S %val=$G(@%vn),%D=$D(@%vn)"
^ZWCmcd("dvzb-V1","mcod",21)="      I %D=0 S %val=""<UNDEF>"""
^ZWCmcd("dvzb-V1","mcod",22)="      I %D=10 S %val=""<UNDEF x Array>"""
^ZWCmcd("dvzb-V1","mcod",23)="      W %vn,"": "",%val,!"
^ZWCmcd("dvzb-V1","mcod",24)="      "
^ZWCmcd("dvzl","mcod",1)="dvzl(zro)   ;CKW/ESC   i1sep16 gmsa/ rdv/ ; 20171121  1020pm   ; Zlink Utility"
^ZWCmcd("dvzl","mcod",2)="  ;;     Update  (prior ^dvzl2 in emergency bug) from mtxRube/  gv1/  rdv/  "
^ZWCmcd("dvzl","mcod",3)="  ;    --> gmma/  rd2zro/ ^dzzl  is Clean 16sep20"
^ZWCmcd("dvzl","mcod",4)="  ;"
^ZWCmcd("dvzl","mcod",5)="  ;   prototype tested in mHSTA ^t"
^ZWCmcd("dvzl","mcod",6)="  ;   early prod moved to gmsa/rdv/    used by ?KA1"
^ZWCmcd("dvzl","mcod",7)="  ;   rev to debug in mtxRube/ gv1/ rdv/ ref by ^r    new sr zrox"
^ZWCmcd("dvzl","mcod",8)="  ;"
^ZWCmcd("dvzl","mcod",9)="  ;"
^ZWCmcd("dvzl-Err","mcod",45)="Err(M)  NEW D S D=$IO U $G(devlog) W:$X ! W M,!"
^ZWCmcd("dvzl-Err","mcod",46)="        ; S Err(M,...)=M"
^ZWCmcd("dvzl-Err","mcod",47)="        U D"
^ZWCmcd("dvzl-Err","mcod",48)="        Q"
^ZWCmcd("dvzl-Qz5","mcod",16)="Qz5   KILL:1 zdir,odir,sdir,zro"
^ZWCmcd("dvzl-Qz5","mcod",17)="      Q"
^ZWCmcd("dvzl-ao","mcod",41)="ao      S OC=OC_C Q"
^ZWCmcd("dvzl-as","mcod",42)="as      S SC=SC_C Q"
^ZWCmcd("dvzl-delo5","mcod",49)=";*"
^ZWCmcd("dvzl-delo5","mcod",50)=";* vers for zdir(oi,si)"
^ZWCmcd("dvzl-delo5","mcod",51)="delo5   ;I $G(odir)="""" D b^dv(""No odir"",""odir,oi"") Q"
^ZWCmcd("dvzl-delo5","mcod",52)="        NEW:1 oi,ZRM"
^ZWCmcd("dvzl-delo5","mcod",53)="        F oi=1:1 Q:$D(zdir(oi))=0  S odir=$G(zdir(oi)) DO"
^ZWCmcd("dvzl-delo5","mcod",54)="          .I odir[""ou"" Q  ;Save $GB util *.o files for execution in git clone"
^ZWCmcd("dvzl-delo5","mcod",55)="          .I $D(zdir(oi))<10  Q  ; No source files"
^ZWCmcd("dvzl-delo5","mcod",56)="          .I odir[""gtm""  Q  ; Do not delete in /gtm Dir"
^ZWCmcd("dvzl-delo5","mcod",57)="          .S ZRM=""rm -v ""_odir_""/*.o"""
^ZWCmcd("dvzl-delo5","mcod",58)="          .ZSY ZRM"
^ZWCmcd("dvzl-delo5","mcod",59)="          .I $ZSY"
^ZWCmcd("dvzl-delo5","mcod",60)="        Q"
^ZWCmcd("dvzl-delo5","mcod",61)="  ;"
^ZWCmcd("dvzl-pz","mcod",79)=";*"
^ZWCmcd("dvzl-pz","mcod",80)=";*  Pauze to see results of compile-"
^ZWCmcd("dvzl-pz","mcod",81)="pz W:$X ! W ""Finished zl List in zl^"",$T(+0),!!"
^ZWCmcd("dvzl-pz","mcod",82)="        NEW X"
^ZWCmcd("dvzl-pz","mcod",83)=" W ""Pause after zl."",! R X I X=""."" W ""...Quitting."" Q"
^ZWCmcd("dvzl-pz","mcod",84)=" Q"
^ZWCmcd("dvzl-so","mcod",43)="so      Q:OC=""""  S odir=$G(odir)+1,zdir(odir)=OC,OC="""",SC="""" W odir,""  "",zdir(odir)  Q"
^ZWCmcd("dvzl-ss","mcod",44)="ss      Q:SC=""""  S sdir=$G(sdir)+1,zdir(odir,sdir)=SC,SC=""""  Q"
^ZWCmcd("dvzl-z5","mcod",10)="z5    NEW sdir,odir,zBase,zsl,zsd,mpr,mpf,zl,zd,di8,ZC,ZRM"
^ZWCmcd("dvzl-z5","mcod",11)="      I $G(zro)="""" S zro=$zro"
^ZWCmcd("dvzl-z5","mcod",12)="      D zrox(zro)  ; zdir(oi,si)"
^ZWCmcd("dvzl-z5","mcod",13)="      D delo5"
^ZWCmcd("dvzl-z5","mcod",14)="      D zl5"
^ZWCmcd("dvzl-z5","mcod",15)="      D pz"
^ZWCmcd("dvzl-zl5","mcod",62)=";* 5th Variant after zrox : zdir(odir,sdir)=FileRef, odir #"
^ZWCmcd("dvzl-zl5","mcod",63)="zl5     U $P W !,""Performing zl5 on-  ^"",$T(+0),!"
^ZWCmcd("dvzl-zl5","mcod",64)="        NEW:1 oi,od,sn,si"
^ZWCmcd("dvzl-zl5","mcod",65)="        F oi=1:1 S od=$D(zdir(oi)) Q:od=0"
^ZWCmcd("dvzl-zl5","mcod",66)="        F oi=oi-1:-1:1 S od=$D(zdir(oi)) I od=11  DO  ;"
^ZWCmcd("dvzl-zl5","mcod",67)="          .S odir=zdir(oi)"
^ZWCmcd("dvzl-zl5","mcod",68)="          .S sn="""" F si=0:1 S sn=$O(zdir(oi,sn),-1) Q:sn=""""  DO  ;"
^ZWCmcd("dvzl-zl5","mcod",69)="            ..S sdir=zdir(oi,sn)"
^ZWCmcd("dvzl-zl5","mcod",70)="            ..D zls5(odir,sdir)"
^ZWCmcd("dvzl-zl5","mcod",71)="        Q"
^ZWCmcd("dvzl-zls5","mcod",72)=";*  new variant of zls"
^ZWCmcd("dvzl-zls5","mcod",73)="zls5(odir,sdir,stem)  I $G(stem)="""" S stem=""*"""
^ZWCmcd("dvzl-zls5","mcod",74)="        S ZC=""cd ""_odir_"";  $gtm_dist/mumps ""_sdir_""/""_stem_"".m"""
^ZWCmcd("dvzl-zls5","mcod",75)="        W:$X ! W ""ZC:"",ZC,!"
^ZWCmcd("dvzl-zls5","mcod",76)="        ZSY ZC"
^ZWCmcd("dvzl-zls5","mcod",77)="          I $ZSY W:$X ! W ""  Empty Folders are ok in $zro"",!"
^ZWCmcd("dvzl-zls5","mcod",78)="        Q"
^ZWCmcd("dvzl-zrox","mcod",18)=";*"
^ZWCmcd("dvzl-zrox","mcod",19)=";*  Vers 2 of zros sr  $zro : PM, zdir(oi,si)  odir, sdir"
^ZWCmcd("dvzl-zrox","mcod",20)="zrox(zro)    KILL zdir   NEW:1 ci,C,odir,sdir,PM,OC,SC,vi,vn,val"
^ZWCmcd("dvzl-zrox","mcod",21)="        S PM=1,OC="""",SC="""" F ci=1:1:$L(zro) S C=$E(zro,ci) DO  Q:PM>7  ;"
^ZWCmcd("dvzl-zrox","mcod",22)="          .I PM=1 DO  Q  ; obj file"
^ZWCmcd("dvzl-zrox","mcod",23)="            ..I C="" "" D so  Q  ;leave PM=1"
^ZWCmcd("dvzl-zrox","mcod",24)="            ..I C=""("" D so  S PM=2 Q"
^ZWCmcd("dvzl-zrox","mcod",25)="            ..I C?1A  D ao Q"
^ZWCmcd("dvzl-zrox","mcod",26)="            ..I C?1N  I $L(OC) D ao Q"
^ZWCmcd("dvzl-zrox","mcod",27)="            ..D ao Q"
^ZWCmcd("dvzl-zrox","mcod",28)="            ..D Err(""Char ? ""_C) S PM=8"
^ZWCmcd("dvzl-zrox","mcod",29)="          .I PM=2 DO   ;src file"
^ZWCmcd("dvzl-zrox","mcod",30)="            ..I C="" "" D ss Q  ;leave PM=2"
^ZWCmcd("dvzl-zrox","mcod",31)="            ..I C="")"" D ss S PM=1 Q"
^ZWCmcd("dvzl-zrox","mcod",32)="            ..I C?1A D as Q"
^ZWCmcd("dvzl-zrox","mcod",33)="            ..D as Q"
^ZWCmcd("dvzl-zrox","mcod",34)="            ..I C?1N  I $L(SC) D as Q"
^ZWCmcd("dvzl-zrox","mcod",35)="            ..D b^dv(""Format Err src File"",""zro,ci,C,odir,sdir"") S PM=8"
^ZWCmcd("dvzl-zrox","mcod",36)="        I PM>7 D b^dv(""Err zrsx Parse"",""C,ci,zro,odir,sdir,PM"")"
^ZWCmcd("dvzl-zrox","mcod",37)="        I PM=2 D b^dv(""Erro Parsing Finished inside paren?"",""zro,PM"")"
^ZWCmcd("dvzl-zrox","mcod",38)="        I $D(zdir(2))'=11 zwr zdir D b^dv(""kw std expects 2nd obj to have sub-src"",""zdir(2)"") S PM=11"
^ZWCmcd("dvzl-zrox","mcod",39)="        Q"
^ZWCmcd("dvzl-zrox","mcod",40)=";srs  add C, Set zdir(odir) or zdir(odir,sdir)"
^ZWCmcd("dw","mcod",1)="dw   ;CKW/ESC  i4sep20 gmsa/ rvv/ ; 20201029-87 ; ZWR  in organized fashion"
^ZWCmcd("dw","mcod",2)=";"
^ZWCmcd("dw","mcod",3)=";"
^ZWCmcd("dw","mcod",4)=";"
^ZWCmcd("dw-A","mcod",5)="A    NEW %vi,%vn,%val  KILL %VV"
^ZWCmcd("dw-A","mcod",6)="     D ka^dv  ;List and kill Arrays"
^ZWCmcd("dw-A","mcod",7)="     ZSH ""V"":%VZ"
^ZWCmcd("dw-A","mcod",8)="     F %vi=1:1 S %L=$G(%VZ(""V"",%vi)) Q:%L=""""  DO  ;"
^ZWCmcd("dw-A","mcod",9)="       .S %vn=$P(%L,""=""),%val=$P(%L,""="",2,999)"
^ZWCmcd("dw-A","mcod",10)="       .I %vn[""FL"",$P(%vn,""FL"",2)="""" S %VFL(""FL"",%vn)=%val ; ? and in %VV"
^ZWCmcd("dw-A","mcod",11)="       .I $E(%vn,1,3)=""dev"" S %VFL(""dev"",%vn)=%val"
^ZWCmcd("dw-A","mcod",12)="       .;   et. al."
^ZWCmcd("dw-A","mcod",13)="       .S %VV(%vn)=%val"
^ZWCmcd("dw-A","mcod",14)="     ;KILL %VZ"
^ZWCmcd("dw-A","mcod",15)="     ;D sFL  ; Find *FL vars"
^ZWCmcd("dw-A","mcod",16)="     zwr %VFL"
^ZWCmcd("dw-A","mcod",17)="     zwr %VV"
^ZWCmcd("dw-A","mcod",18)="     Q"
^ZWCmcd("dw-A","mcod",19)="     "
^ZWCmcd("dw-A","mcod",20)="     "
^ZWCmcd("dw-OER","mcod",39)="OER    B  "
^ZWCmcd("dw-OER","mcod",40)="       Q"
^ZWCmcd("dw-OER2","mcod",41)="OER2   B"
^ZWCmcd("dw-OER2","mcod",42)="       Q"
^ZWCmcd("dw-TZ","mcod",65)=";*    tdw. navMenu"
^ZWCmcd("dw-TZ","mcod",66)="TZ    KILL ARt  "
^ZWCmcd("dw-TZ","mcod",67)="      F i=2,4,6 F j=2*i,2*i+1 S ARt(i,j)=$R(100)"
^ZWCmcd("dw-TZ","mcod",68)="      F i=1:1:6 S ARt(2,4,i)=$R(100)"
^ZWCmcd("dw-TZ","mcod",69)="      S ARt=6"
^ZWCmcd("dw-TZ","mcod",70)="      zwr ARt"
^ZWCmcd("dw-TZ","mcod",71)="      D Z(""ARt"") ; : Z(i)"
^ZWCmcd("dw-TZ","mcod",72)="      W !! zwr Z W !"
^ZWCmcd("dw-TZ","mcod",73)="      Q"
^ZWCmcd("dw-UER","mcod",36)="UER    U $P I $ZS[""EOF"" G Z2       "
^ZWCmcd("dw-UER","mcod",37)="       D b^dv(""Err besides EOF"",""ZS,zi"")"
^ZWCmcd("dw-UER","mcod",38)="       Q"
^ZWCmcd("dw-Z","mcod",21)=";*  %VFL { *""FL""    dev*   "
^ZWCmcd("dw-Z","mcod",22)=";*  DO ZWR od Array to pipe, modify format in Z(i)"
^ZWCmcd("dw-Z","mcod",23)="Z(An)  S dev=""ZW"" OPEN dev:(newversion:exception=""G OER^""_$T(+0))"
^ZWCmcd("dw-Z","mcod",24)="       USE dev zwr @An W ! CLOSE dev"
^ZWCmcd("dw-Z","mcod",25)="       USE $P W 123,!"
^ZWCmcd("dw-Z","mcod",26)="       OPEN dev:(rewind:exception=""G OER2^""_$T(+0))"
^ZWCmcd("dw-Z","mcod",27)="       USE $P W 456,!"
^ZWCmcd("dw-Z","mcod",28)="       F i=1:1 DO  Q:ZEOF  Q:Z2  Q:X=""""   ; Q:(X'[""("")&(i'=1)  ;"
^ZWCmcd("dw-Z","mcod",29)="         .USE dev R X "
^ZWCmcd("dw-Z","mcod",30)="         .S ZEOF=$ZEOF,Z2=$T "
^ZWCmcd("dw-Z","mcod",31)="         .USE $P W !,i,"" "",X,""  "",$L(X),"" ZEOF:"",ZEOF,"" Z2:"",Z2,!"
^ZWCmcd("dw-Z","mcod",32)="         .I ZEOF Q"
^ZWCmcd("dw-Z","mcod",33)="         .I Z2 B  Q"
^ZWCmcd("dw-Z","mcod",34)="         .S Z(i)=X,Z=i"
^ZWCmcd("dw-Z","mcod",35)="       G Z2"
^ZWCmcd("dw-Z2","mcod",43)=";* cont after Read loop Z() : Z()'       "
^ZWCmcd("dw-Z2","mcod",44)="Z2     F si=1:1:9 S SS(si)="""""
^ZWCmcd("dw-Z2","mcod",45)="       F zi=1:1:Z S L=Z(zi) DO  ;"
^ZWCmcd("dw-Z2","mcod",46)="         .S PS=$P(L,""("",2,9),PS=$P(PS,"")"")"
^ZWCmcd("dw-Z2","mcod",47)="         .I PS="""" Q  ; No subscr,eg head node"
^ZWCmcd("dw-Z2","mcod",48)="         .S ncp=$L(PS,"","")"
^ZWCmcd("dw-Z2","mcod",49)="         .F si=1:1:ncp S S(si)=$P(PS,"","",si)"
^ZWCmcd("dw-Z2","mcod",50)="         .S T=1 F si=1:1:ncp DO  "
^ZWCmcd("dw-Z2","mcod",51)="            ..I T,S(si)=SS(si) D ssi Q"
^ZWCmcd("dw-Z2","mcod",52)="            ..I SS(si)="""" S SS(si)=S(si) Q"
^ZWCmcd("dw-Z2","mcod",53)="            ..S SS(si)=S(si),T=0"
^ZWCmcd("dw-Z2","mcod",54)="         .S L2=$P(L,""("")_""(""_PS_"")""_$P(L,"")"",2,9)"
^ZWCmcd("dw-Z2","mcod",55)="         .W:$X ! W zi,"" "",?5,L2,!"
^ZWCmcd("dw-Z2","mcod",56)="         .S Z(zi)=L2  ; or Z@(zi)=L2   and PS null copy above"
^ZWCmcd("dw-Z2","mcod",57)="       Q"
^ZWCmcd("dw-Z2","mcod",58)=""
^ZWCmcd("dw-ssi","mcod",59)=";* set sub si in PS to spaces"
^ZWCmcd("dw-ssi","mcod",60)=";*  si, L, PS : PS'"
^ZWCmcd("dw-ssi","mcod",61)="ssi    S ns=$L(S(si)),sp=$E(""                    "",1,ns)"
^ZWCmcd("dw-ssi","mcod",62)="       S $P(PS,"","",si)=sp"
^ZWCmcd("dw-ssi","mcod",63)="       Q"
^ZWCmcd("dw-ssi","mcod",64)=""
^ZWCmcd("dws","mcod",1)="dws   ;CKW/ESC  i29oct18 gmsa/ rmgbFL3/ ; 20181029-78 ; Sr for ^dw* Write WFL"
^ZWCmcd("dws","mcod",2)="  ; T^dws  is special, outgrew parents, WFL copy in rd2mg for T^dws"
^ZWCmcd("dws","mcod",3)="  ;"
^ZWCmcd("dws","mcod",4)="  BREAK  HALT  ; Top reserved"
^ZWCmcd("dws-IMG","mcod",22)="IMG   D IMG^dwWLW  ; : wanFL here eventually"
^ZWCmcd("dws-IMG","mcod",23)="     D T(""wanFL=wvn,wtb,ws,wcap,wf,nwl_fa(wi)"")"
^ZWCmcd("dws-IMG","mcod",24)="     Q"
^ZWCmcd("dws-IMG","mcod",25)="  ;"
^ZWCmcd("dws-T","mcod",5)=";*"
^ZWCmcd("dws-T","mcod",6)=";*  from ^qds  Test *FL variable Comment in situ"
^ZWCmcd("dws-T","mcod",7)=";*  Test VFL Comment inline vs actual var"
^ZWCmcd("dws-T","mcod",8)="T(XXXX) NEW FLna,VFL,FL,G,C1,C2,M,D S D=$IO"
^ZWCmcd("dws-T","mcod",9)="     S C1=$$^dvby() I $G(C2)="""" B"
^ZWCmcd("dws-T","mcod",10)="     S FLna=$P(XXXX,""=""),VFL=$P(XXXX,""="",2,99)"
^ZWCmcd("dws-T","mcod",11)="     I FLna["":"" S FLna=$P(XXXX,"":""),VFL=$P(XXXX,"":"",2,99)"
^ZWCmcd("dws-T","mcod",12)="       I FLna="""" D b^dv("" Arg T^qds needs VFL="",""XXXX,FLna,C2"") Q"
^ZWCmcd("dws-T","mcod",13)="     I $D(@FLna)=0 USE $P W:$X ! DO  W M,! Q"
^ZWCmcd("dws-T","mcod",14)="       .S M=""in ""_C2_"",  T^qds,  VFL '""_FLna_""' is UNDEF D ^*IMG - """
^ZWCmcd("dws-T","mcod",15)="     I @FLna'=VFL USE $P W:$X ! DO  "
^ZWCmcd("dws-T","mcod",16)="       .W ""  "",FLna,"" in ^"",C2,""    does not match Comment XXXX -"",!"
^ZWCmcd("dws-T","mcod",17)="       .W FLna,"":"",?8,@FLna,!"
^ZWCmcd("dws-T","mcod",18)="       .W ""XXXX:"",?8,VFL,!"
^ZWCmcd("dws-T","mcod",19)="     USE D  ; in case b^dv does USE $P"
^ZWCmcd("dws-T","mcod",20)="     Q"
^ZWCmcd("dws-T","mcod",21)="  ;"
^ZWCmcd("dws-fa0","mcod",69)=";*       "
^ZWCmcd("dws-fa0","mcod",70)=";* get fa(0,  to local : "
^ZWCmcd("dws-fa0","mcod",71)="fa0   S vn="""" F fi=0:1 S vn=$O(fa(0,vn)) Q:vn=""""  S @vn=fa(0,vn)"
^ZWCmcd("dws-fa0","mcod",72)="      Q"
^ZWCmcd("dws-hdr","mcod",31)=";*      "
^ZWCmcd("dws-hdr","mcod",32)="hdr(wid)  I $G(wid)="""" S wid=0"
^ZWCmcd("dws-hdr","mcod",33)="      W:$X ! D fa0 F wi=1:1:nwi DO"
^ZWCmcd("dws-hdr","mcod",34)="        .S tb=$G(fa(wi,""wtb"")),wvn=$G(fa(wi,""wvn""))"
^ZWCmcd("dws-hdr","mcod",35)="        .W ?tb,wvn,"" """
^ZWCmcd("dws-hdr","mcod",36)="      W !"
^ZWCmcd("dws-hdr","mcod",37)="      Q"
^ZWCmcd("dws-hdr2","mcod",26)=";* Header Line,  fa() "
^ZWCmcd("dws-hdr2","mcod",27)="hdr2   D IMG  ; : wanFL"
^ZWCmcd("dws-hdr2","mcod",28)="      D GFL^dvs(wanFL)  ; wi, fa(wi) : wtb,..."
^ZWCmcd("dws-hdr2","mcod",29)="      D bug^dv"
^ZWCmcd("dws-hdr2","mcod",30)="      Q"
^ZWCmcd("dws-hfa","mcod",43)="hfa   I $G(wid)="""" S wid=0 D fa0"
^ZWCmcd("dws-hfa","mcod",44)="      S aL=""wtb,wf,ws,wcap,wun"""
^ZWCmcd("dws-hfa","mcod",45)="      F ai=1:1:$L(aL,"","") S an=$P(aL,"","",ai) D wan"
^ZWCmcd("dws-hfa","mcod",46)="      D xl"
^ZWCmcd("dws-hfa","mcod",47)="      Q"
^ZWCmcd("dws-hfl","mcod",38)="hfl   W:$X !  D fa0 F wi=1:1:nwi DO"
^ZWCmcd("dws-hfl","mcod",39)="        .S tb=$G(fa(wi,""wtb"")),wvn=$G(fa(wi,""wvn"")),wf=$G(fa(wi,""wf""))"
^ZWCmcd("dws-hfl","mcod",40)="        .W ?tb,$E(""--------------------"",1,wf),"" """
^ZWCmcd("dws-hfl","mcod",41)="      W !"
^ZWCmcd("dws-hfl","mcod",42)="      Q"
^ZWCmcd("dws-wan","mcod",48)="wan      W:$X ! W ?10,an,"" "" F wi=1:1:nwi DO"
^ZWCmcd("dws-wan","mcod",49)="        .S tb=$G(fa(wi,""wtb"")),wvn=$G(fa(wi,""wvn""))"
^ZWCmcd("dws-wan","mcod",50)="        .S wav=$G(fa(wi,an))"
^ZWCmcd("dws-wan","mcod",51)="        .W ?tb,wav,"" """
^ZWCmcd("dws-wan","mcod",52)="      W ! Q"
^ZWCmcd("dws-wfa","mcod",62)=";*"
^ZWCmcd("dws-wfa","mcod",63)=";* Quickie output fa()  - zwr"
^ZWCmcd("dws-wfa","mcod",64)="wfa    W:$X ! I $D(fa)=0 W "" fa() is UNDEF!"",! Q"
^ZWCmcd("dws-wfa","mcod",65)="       I $G(WFL)'="""" W WFL,!!"
^ZWCmcd("dws-wfa","mcod",66)="       zwr fa"
^ZWCmcd("dws-wfa","mcod",67)="       W !"
^ZWCmcd("dws-wfa","mcod",68)="       Q"
^ZWCmcd("dws-xl","mcod",53)=";* Write $x scale"
^ZWCmcd("dws-xl","mcod",54)="xl    W:$X ! NEW i,dn  S dn=""123456789+"""
^ZWCmcd("dws-xl","mcod",55)="      F i=1:1:11 W dn"
^ZWCmcd("dws-xl","mcod",56)="      W ! Q"
^ZWCmcd("dws-xl2","mcod",57)="xl2    W:$X ! NEW i,d10,x"
^ZWCmcd("dws-xl2","mcod",58)="      F i=0:1:11 S d10=i*10 S:'d10 d10=""00"" DO  ;"
^ZWCmcd("dws-xl2","mcod",59)="        .I $X>d10 S x=$X D b^dv(""Err "",""d10,x,i"")"
^ZWCmcd("dws-xl2","mcod",60)="        .W ?d10,""1 "",d10,"" 6789+"""
^ZWCmcd("dws-xl2","mcod",61)="      W ! Q"
^ZWCmcd("dzCBL","mcod",1)="dzCBL  ;CKW/ESC i14feb23 gmsa./ rzro3/ ;20230214-80;Compose zro from PBL,GBL"
^ZWCmcd("dzCBL","mcod",2)=";"
^ZWCmcd("dzCBL","mcod",3)=";"
^ZWCmcd("dzCBL","mcod",4)=";"
^ZWCmcd("dzCBL-AR","mcod",36)=";*  "
^ZWCmcd("dzCBL-AR","mcod",37)="AR(RL,RB) S RB=$G(RB) I RB="""" Q"
^ZWCmcd("dzCBL-AR","mcod",38)="       F li=1:1:$L(RL,"","") S rd=$P(RL,"","",li)  S zro=zro_RB_rd_"" """
^ZWCmcd("dzCBL-AR","mcod",39)="       Q"
^ZWCmcd("dzCBL-Bldzro","mcod",12)=";*  PBL, GBL, MBL  : -> zro"
^ZWCmcd("dzCBL-Bldzro","mcod",13)="Bldzro S zrix=""umad"""
^ZWCmcd("dzCBL-Bldzro","mcod",14)="       S kwsys=""km3a"""
^ZWCmcd("dzCBL-Bldzro","mcod",15)="       S LUser=""kw"""
^ZWCmcd("dzCBL-Bldzro","mcod",16)="       ;"
^ZWCmcd("dzCBL-Bldzro","mcod",17)="       S MIB=$ZTRNLNM(""PWD"")  ; current dir on mumps start"
^ZWCmcd("dzCBL-Bldzro","mcod",18)="       S MXB=$ZTRNLNM(""ydb_dist"")  ; gtmy, symlink to ydb vers"
^ZWCmcd("dzCBL-Bldzro","mcod",19)="       S izro=$ZTRNLNM(""ydb_routines"")  ; Mrou path list $zro"
^ZWCmcd("dzCBL-Bldzro","mcod",20)="       ;  Don't ref $zro or will get crash if errors, frustrating"
^ZWCmcd("dzCBL-Bldzro","mcod",21)="       S SBi=$ZTRNLNM(""SB"")"
^ZWCmcd("dzCBL-Bldzro","mcod",22)="       S PBi=$ZTRNLNM(""PB"")"
^ZWCmcd("dzCBL-Bldzro","mcod",23)="       S SB=""/home/""_LUser_""/""_kwsys_""/"""
^ZWCmcd("dzCBL-Bldzro","mcod",24)="       S PB=SB_zrix_""/"""
^ZWCmcd("dzCBL-Bldzro","mcod",25)="       ;"
^ZWCmcd("dzCBL-Bldzro","mcod",26)="       S zro=MXB_"" ""  ; source and obj, existing, both in $ydb_dist  itself"
^ZWCmcd("dzCBL-Bldzro","mcod",27)="            ;don't delete *.o and don't compile   -> oi=1,si=1"
^ZWCmcd("dzCBL-Bldzro","mcod",28)="       S zro=zro_"" o( """
^ZWCmcd("dzCBL-Bldzro","mcod",29)="       D AR(PBL)"
^ZWCmcd("dzCBL-Bldzro","mcod",30)="       S zro=zro_"") ou( """
^ZWCmcd("dzCBL-Bldzro","mcod",31)="       D AR(GBL,""../gmsa/"")"
^ZWCmcd("dzCBL-Bldzro","mcod",32)="       I $G(MBL)'="""" D AR(MBL,""../gmma/"")"
^ZWCmcd("dzCBL-Bldzro","mcod",33)="       S zro=zro_"" )""       "
^ZWCmcd("dzCBL-Bldzro","mcod",34)="       S zro=zro_"" ""_MXB_""/libyottadb.so ""_MXB_""/libyottadbutil.so""  ; GDE.o is in ydb_dist"
^ZWCmcd("dzCBL-Bldzro","mcod",35)="       Q"
^ZWCmcd("dzCBL-umad","mcod",5)=";*  See zro^mam"
^ZWCmcd("dzCBL-umad","mcod",6)="umad   S PBL=""rcfg,ra1,"" "
^ZWCmcd("dzCBL-umad","mcod",7)="       S GBL=""rzro3,rdv2"" "
^ZWCmcd("dzCBL-umad","mcod",8)="       S MBL=""rbrzm1"" "
^ZWCmcd("dzCBL-umad","mcod",9)="       D Bldzro"
^ZWCmcd("dzCBL-umad","mcod",10)="       USE $P W !!,""zro:"",zro,!!!"
^ZWCmcd("dzCBL-umad","mcod",11)="       Q"
^ZWCmcd("dzCzro","mcod",1)="dzCzro(PB,PBL,GBL) ;CKW/ESC i5apr23 gmsa./  rzro3/ ;20230405-50;Compose zroLST from rdir lists"
^ZWCmcd("dzCzro","mcod",2)=";"
^ZWCmcd("dzCzro","mcod",3)=";   dist $ZTRNLNM"
^ZWCmcd("dzCzro","mcod",4)=";"
^ZWCmcd("dzCzro-Q","mcod",19)="Q     Q:$Q Q Q:Q="""""
^ZWCmcd("dzCzro-Qb","mcod",20)="Qb    D b^duv(Q,""PBL,GBL,UBL,zro,z"")"
^ZWCmcd("dzCzro-Qb","mcod",21)="      Q:$Q Q Q"
^ZWCmcd("dzCzro-az","mcod",22)=";*  Add rdir & path B (or $PB/ ) to z, accumulating zro"
^ZWCmcd("dzCzro-az","mcod",23)="az(rdir,B) NEW Q S Q="""" ;NEW z,Bn"
^ZWCmcd("dzCzro-az","mcod",24)="      S B=$G(B) I B="""" S Q=""err B~PB,GB az^""_$T(+0) D bug^dv(Q,""B,PB,GB,rdir,z"") G Qb"
^ZWCmcd("dzCzro-az","mcod",25)="      I rdir[""$"" DO  ;"
^ZWCmcd("dzCzro-az","mcod",26)="         .S Bn=$P($P(rdir,""$"",2),""/""),rdir=$P(rdir,""/"",2)"
^ZWCmcd("dzCzro-az","mcod",27)="         .I Bn?1U1""B"" S B=$G(@Bn) I B="""" D b^dv(""Err $*B "",""B,Bn,rdir,z,PB,GB"") ;"
^ZWCmcd("dzCzro-az","mcod",28)="      ;D b^duv(""Log az^""_$T(+0),""B,Bn,rdir,z"")"
^ZWCmcd("dzCzro-az","mcod",29)="      I $E(B)'=""/"" S Q=""Err B az^""_$T(+0) D b^duv(Q,""rdir,B,z"")"
^ZWCmcd("dzCzro-az","mcod",30)="      S z=z_B_rdir_"" """
^ZWCmcd("dzCzro-az","mcod",31)="      Goto Q"
^ZWCmcd("dzCzro-az","mcod",32)=""
^ZWCmcd("dzCzro-az","mcod",33)="      "
^ZWCmcd("dzCzro-top","mcod",5)="top   NEW Q S Q="""" "
^ZWCmcd("dzCzro-top","mcod",6)="      I $G(PBL)="""" D bug^dv G Qb"
^ZWCmcd("dzCzro-top","mcod",7)="      I $G(GBL)="""" D bug^dv G Qb"
^ZWCmcd("dzCzro-top","mcod",8)="      ; Kludge convenience comma list to space list (takes either now)"
^ZWCmcd("dzCzro-top","mcod",9)="      I PBL["","" S PBL=$TR(PBL,"","","" "") "
^ZWCmcd("dzCzro-top","mcod",10)="      I GBL["","" S GBL=$TR(GBL,"","","" "")"
^ZWCmcd("dzCzro-top","mcod",11)="      D ENV^dzIB  ; from PB"
^ZWCmcd("dzCzro-top","mcod",12)="      ;D b^dv(""Log PB,GB"",""PB,GB,PBL,GBL"")"
^ZWCmcd("dzCzro-top","mcod",13)="      S z=dist_"" ""_PB_""o("""
^ZWCmcd("dzCzro-top","mcod",14)="      F di=1:1:$L(PBL,"" "") S r=$P(PBL,"" "",di) I r'="""" D az(r,PB)"
^ZWCmcd("dzCzro-top","mcod",15)="      S z=z_"") ou("""
^ZWCmcd("dzCzro-top","mcod",16)="      F di=1:1:$L(GBL,"" "") S r=$P(GBL,"" "",di) I r'="""" D az(r,GB)"
^ZWCmcd("dzCzro-top","mcod",17)="      S z=z_"") ""_dist_""/libyottadb.so ""_dist_""/libyottadbutil.so"""
^ZWCmcd("dzCzro-top","mcod",18)="      S zro=z"
^ZWCmcd("dzFdir","mcod",1)="dzFdir(sdir)  ;CKW/ESC i27aug20 gmsa/ rd2zro/ ; 20200827-75 ; Look at Files in one sdir (rdir/?)"
^ZWCmcd("dzFdir","mcod",2)=";"
^ZWCmcd("dzFdir","mcod",3)=";  : D2abs, rdNSL  Short Abstract  1st file, (x n files *.m)"
^ZWCmcd("dzFdir","mcod",4)=";"
^ZWCmcd("dzFdir-A","mcod",5)=";* RefBy: s2+8^dzs"
^ZWCmcd("dzFdir-A","mcod",6)="A     I $G(sdir)="""" D bug^dv Q"
^ZWCmcd("dzFdir-A","mcod",7)="      NEW Q,url,zsurl,x,fi,furl,n,fil,nf  S Q="""""
^ZWCmcd("dzFdir-A","mcod",8)="      S url=$ZPARSE(sdir)"
^ZWCmcd("dzFdir-A","mcod",9)="        I url="""" D b^dv(""Arg sdir failed ZPARSE"",""sdir"") Q"
^ZWCmcd("dzFdir-A","mcod",10)="        I $E(url,$L(url))=""/"" S url=$E(url,$L(url)-1)  ;remove terminal /"
^ZWCmcd("dzFdir-A","mcod",11)="      S zsurl=url_""/*.m"""
^ZWCmcd("dzFdir-A","mcod",12)="      D IB^dzIMG  ; SB, GB, PB"
^ZWCmcd("dzFdir-A","mcod",13)="      S x=$ZSEARCH(PB),D2abs="""""
^ZWCmcd("dzFdir-A","mcod",14)="      F fi=0:1 S furl=$ZSEARCH(zsurl) Q:furl=""""  DO  ;"
^ZWCmcd("dzFdir-A","mcod",15)="        .S n=$L(furl,""/""),fil=$P(furl,""/"",n)"
^ZWCmcd("dzFdir-A","mcod",16)="        .I fi=0 S D2abs=fil"
^ZWCmcd("dzFdir-A","mcod",17)="      I fi S nf=""(x ""_fi_"") "" S D2abs=D2abs_nf"
^ZWCmcd("dzFdir-A","mcod",18)="      Q:$Q Q  "
^ZWCmcd("dzFdir-A","mcod",19)="      Q"
^ZWCmcd("dzFdir-A","mcod",20)=";*      "
^ZWCmcd("dzGzro","mcod",1)="dzGzro  ;CKW/ESC i2jun20 gmsa/ rd2zro/ ; 20200602-88 ; Index ^QZRO, ^QZx $zro by mpj & cfg/*profile.sh"
^ZWCmcd("dzGzro","mcod",2)=";"
^ZWCmcd("dzGzro","mcod",3)="; No top entry"
^ZWCmcd("dzGzro","mcod",4)=";"
^ZWCmcd("dzGzro-Ens","mcod",75)=";*"
^ZWCmcd("dzGzro-Ens","mcod",76)="Ens     S nNS(ns)=ne"
^ZWCmcd("dzGzro-Ens","mcod",77)="        Q"
^ZWCmcd("dzGzro-IQZ","mcod",51)=";*"
^ZWCmcd("dzGzro-IQZ","mcod",52)="IQZ     KILL ^QZRO,^QZx"
^ZWCmcd("dzGzro-IQZ","mcod",53)="        S SB=""/home/kw/km6a"""
^ZWCmcd("dzGzro-IQZ","mcod",54)="        S GB=SB_""/gmsa"""
^ZWCmcd("dzGzro-IQZ","mcod",55)="        S PWD=$ZTRNLNM(""PWD"")  ; sic vs base when grep run, /home/kw/km6a"""
^ZWCmcd("dzGzro-IQZ","mcod",56)="        S mBase=""/home/kw/km6a/""  ; ?mpj/"
^ZWCmcd("dzGzro-IQZ","mcod",57)="        Q"
^ZWCmcd("dzGzro-NS","mcod",68)=";*"
^ZWCmcd("dzGzro-NS","mcod",69)="NS      F i=1:1:nn I $E(mr,i)'=$E(ns,i)  DO  ;"
^ZWCmcd("dzGzro-NS","mcod",70)="          .D Ens"
^ZWCmcd("dzGzro-NS","mcod",71)="          .I i=1 S ns=mr,ne=1,nn=$L(ns) Q  ;No letters match"
^ZWCmcd("dzGzro-NS","mcod",72)="          .S ns=$E(mr,1,i-1),ne=1,nn=$L(ns)"
^ZWCmcd("dzGzro-NS","mcod",73)="        S ne=ne+1"
^ZWCmcd("dzGzro-NS","mcod",74)="        Q"
^ZWCmcd("dzGzro-SQx","mcod",35)=";*"
^ZWCmcd("dzGzro-SQx","mcod",36)="SQx     I mpj'="""" S ^QZx(""mpj"",mpj)=qzid"
^ZWCmcd("dzGzro-SQx","mcod",37)="        Q"
^ZWCmcd("dzGzro-SQx","mcod",38)=";; su3/cfg/sud-profile.sh:9:export gtmroutines=""$PB/o($PB/r $PB/rsr $PB/rdv $GB/gmsa/rdv) $gtm_dist"""
^ZWCmcd("dzGzro-SQx","mcod",39)=""
^ZWCmcd("dzGzro-grep","mcod",5)=";*$$Q  : ^QZRO(qzid), ^QZx("
^ZWCmcd("dzGzro-grep","mcod",6)=";*RefBy:  KAcf/rcfg/cfMenu.m:38:  ;;  z2.   grep^dzGzro  Gather ZRO ^QZRO profiles for projects"
^ZWCmcd("dzGzro-grep","mcod",7)="grep()  ;"
^ZWCmcd("dzGzro-grep","mcod",8)="        S devp=""/home/kw/km6a/gmsa/rd2zro/grep-zro-2jun20.txt"""
^ZWCmcd("dzGzro-grep","mcod",9)="        S Q=$$^devRD(devp) I Q'="""" D b^dv(Q,""Q"")"
^ZWCmcd("dzGzro-grep","mcod",10)="          ;  RDa()"
^ZWCmcd("dzGzro-grep","mcod",11)="        D IQZ,^dzIMG  ; : zroFL, "
^ZWCmcd("dzGzro-grep","mcod",12)="        F ri=1:1:RDa S L=RDa(ri)  I L'="""" DO  ;"
^ZWCmcd("dzGzro-grep","mcod",13)="          .I L'[""gtmroutine"" Q"
^ZWCmcd("dzGzro-grep","mcod",14)="          .I L[""grep"" Q"
^ZWCmcd("dzGzro-grep","mcod",15)="          .I $E($P(L,"":"",3),1,6)[""#"" Q  ; D b^dv("" # "",""L,ri"") Q"
^ZWCmcd("dzGzro-grep","mcod",16)="          .D NFL^dgmg(zroFL)  ;clear profile, set @vn null"
^ZWCmcd("dzGzro-grep","mcod",17)="          .S qL=L"
^ZWCmcd("dzGzro-grep","mcod",18)="          .S mFol=$P(L,"":""),n=$L(mFol,""/"")"
^ZWCmcd("dzGzro-grep","mcod",19)="          .I $P(mFol,""/"",n-1)'=""cfg"" D b^dv(""Err mFol cfg ?"",""mFol,ri,L"")"
^ZWCmcd("dzGzro-grep","mcod",20)="          .S mpj=$P(mFol,""/"",1,n-2)"
^ZWCmcd("dzGzro-grep","mcod",21)="          .S PB=SB_""/""_mpj"
^ZWCmcd("dzGzro-grep","mcod",22)="          .S qPB=SB_""/""_mpj,qSB=SB,qGB=GB,qPB=PB"
^ZWCmcd("dzGzro-grep","mcod",23)="          .S fPro=$P(mFol,""/"",n)"
^ZWCmcd("dzGzro-grep","mcod",24)="          .S p2=$P(L,""routines="""""",2),szro=$P(p2,"""""""")"
^ZWCmcd("dzGzro-grep","mcod",25)="          .I szro="""" D b^dv(""log szro"",""szro,L,p2"")"
^ZWCmcd("dzGzro-grep","mcod",26)="          .D xzro"
^ZWCmcd("dzGzro-grep","mcod",27)="          .D T^dws(""zroFL=szro,qzro,mFol,mBase,mpj,fPro,qSB,qGB,qPB,qL_^QZRO(qzid)"")"
^ZWCmcd("dzGzro-grep","mcod",28)="          .S Q=$$qzidNxt^dzIMG  ; : new qzid"
^ZWCmcd("dzGzro-grep","mcod",29)="          .S Q=$$SFL^dgmg(zroFL) ; qzid, ^QZRO"
^ZWCmcd("dzGzro-grep","mcod",30)="          .D SQx"
^ZWCmcd("dzGzro-grep","mcod",31)="        USE $P W:$X ! W "" Completed (^""_$T(+0)_"") about ""_ri_"" ^QZRO profiles."",! "
^ZWCmcd("dzGzro-grep","mcod",32)="        D ^GP5(""^QZRO"")"
^ZWCmcd("dzGzro-grep","mcod",33)="        D ^GP5(""^QZx"")"
^ZWCmcd("dzGzro-grep","mcod",34)="        Q"
^ZWCmcd("dzGzro-nsZXU","mcod",58)=";*"
^ZWCmcd("dzGzro-nsZXU","mcod",59)="nsZXU   ;"
^ZWCmcd("dzGzro-nsZXU","mcod",60)="        I $D(RXU)=0 D b^dv(""Must do check first to see RXU"",""qzid"") Q"
^ZWCmcd("dzGzro-nsZXU","mcod",61)="        KILL nNS S ns="""""
^ZWCmcd("dzGzro-nsZXU","mcod",62)="        S mr=0 F mi=0:1 S mr=$O(RXU(mr)) Q:mr=""""  D NS"
^ZWCmcd("dzGzro-nsZXU","mcod",63)="        USE $P W:$X ! W ""Name Spaces-"",!"
^ZWCmcd("dzGzro-nsZXU","mcod",64)="        S ns="""" F ni=0:1 S ns=$O(nNS(ns)) Q:ns=""""  DO  ;"
^ZWCmcd("dzGzro-nsZXU","mcod",65)="          .S n=$G(nNS(ns))"
^ZWCmcd("dzGzro-nsZXU","mcod",66)="          .W:$X ! W ""  "",ns,""  x "",n,!"
^ZWCmcd("dzGzro-nsZXU","mcod",67)="        Q"
^ZWCmcd("dzGzro-xzro","mcod",40)=";*  szro  SB, GB, PB, Substitute for $PB etc in szro -> qzro  z/qzro"
^ZWCmcd("dzGzro-xzro","mcod",41)="xzro    S z=szro"
^ZWCmcd("dzGzro-xzro","mcod",42)="        S V=""$PB"" F i=1:1 Q:z'[V  S z=$P(z,V)_PB_$P(z,V,2,99)"
^ZWCmcd("dzGzro-xzro","mcod",43)="        S V=""$GB"" F i=i:1 Q:z'[V  S z=$P(z,V)_GB_$P(z,V,2,99)"
^ZWCmcd("dzGzro-xzro","mcod",44)="        S V=""$SB"" F i=i:1 Q:z'[V  S z=$P(z,V)_SB_$P(z,V,2,99)"
^ZWCmcd("dzGzro-xzro","mcod",45)="        F V=""$mBase"",""$gtmMBase"",""$MPbase"",""$tbase"" F i=1:1 Q:z'[V  S z=$P(z,V)_PB_$P(z,V,2,99)"
^ZWCmcd("dzGzro-xzro","mcod",46)="        F V=""$gmsaBase"",""$MPJ"",""$MBase"" F i=1:1 Q:z'[V  S z=$P(z,V)_GB_$P(z,V,2,99)"
^ZWCmcd("dzGzro-xzro","mcod",47)="        F V=""$Gfd"" F i=1:1 Q:z'[V  S z=$P(z,V)_""gmfd""_$P(z,V,2,99)"
^ZWCmcd("dzGzro-xzro","mcod",48)="        S qzro=z"
^ZWCmcd("dzGzro-xzro","mcod",49)="        I $L(z,""$"")>2  D b^dv("" More $ "",""mpj,szro,qzro,z,i"")  ; tolerate one $gtm_dist remaining"
^ZWCmcd("dzGzro-xzro","mcod",50)="        Q"
^ZWCmcd("dzIB","mcod",1)="dzIB(zroA) ;CKW/ESC i5apr23  gmsa./  rzro3/ ;20230405-50; ^devIB equiv, need in rzro! $ZTRNENV"
^ZWCmcd("dzIB","mcod",2)=";  : dist,SB,PB,GB,  MB, W2B"
^ZWCmcd("dzIB","mcod",3)=";1. Derive from $zro, tricky/KLUDGE vs my form of $zro"
^ZWCmcd("dzIB","mcod",4)=";2. $ZTRN    base on devy  $SB, $PB, $GB, ... "
^ZWCmcd("dzIB","mcod",5)=";"
^ZWCmcd("dzIB","mcod",6)=";   See prior IB^dzIMG "
^ZWCmcd("dzIB-ENV","mcod",14)="ENV() NEW Q S Q="""""
^ZWCmcd("dzIB-ENV","mcod",15)="      S dist=$ZTRNLNM(""ydb_dist"") I dist="""" S dist=$ZTRNLNM(""gtm_dist"")"
^ZWCmcd("dzIB-ENV","mcod",16)="      S zrodevy=$ZTRNLNM(""ydb_routines"")"
^ZWCmcd("dzIB-ENV","mcod",17)="      S zgldevy=$ZTRNLNM(""ydb_gbldir"")"
^ZWCmcd("dzIB-ENV","mcod",18)="      S EVL=""PWD,SB,PB,GB,MB,W2B"" F i=1:1:$L(EVL,"","") S ev=$P(EVL,"","",i) DO  ;"
^ZWCmcd("dzIB-ENV","mcod",19)="        .S v=$ZTRNLNM(ev)"
^ZWCmcd("dzIB-ENV","mcod",20)="        .I ev[""B"" S v=v_""/""  ;env var vs sys var convention adjust for terminal /"
^ZWCmcd("dzIB-ENV","mcod",21)="        .S @ev=v"
^ZWCmcd("dzIB-ENV","mcod",22)="      Goto Q"
^ZWCmcd("dzIB-Q","mcod",10)="Q     Q:$Q Q  Q:Q="""""
^ZWCmcd("dzIB-Qb","mcod",11)="Qb    S Q=""IB Err ^""_$T(+0) D b^duv(Q,""zroA,dist,SB,PB,GB"")"
^ZWCmcd("dzIB-Qb","mcod",12)="      Q:$Q Q Q"
^ZWCmcd("dzIB-Qb","mcod",13)="; Env Vars at Start ydb : dist, SB,PB,GB,MB,W2B, zrodevy,zgldevy"
^ZWCmcd("dzIB-kwmpj","mcod",37)=";*"
^ZWCmcd("dzIB-kwmpj","mcod",38)=";*  PB : kwmpj, LUser, kwsys"
^ZWCmcd("dzIB-kwmpj","mcod",39)="kwmpj(PB)  I $G(PB)="""" D bug^duv Q"
^ZWCmcd("dzIB-kwmpj","mcod",40)="      NEW Q,nsl"
^ZWCmcd("dzIB-kwmpj","mcod",41)="      S nsl=$L(PB,""/"") I nsl'=6 S Q=""err expect PB nsl=6"" D bug^duv(Q,""nsl,PB"")"
^ZWCmcd("dzIB-kwmpj","mcod",42)="      S kwmpj=$P(PB,""/"",5)"
^ZWCmcd("dzIB-kwmpj","mcod",43)="      S LUser=$P(PB,""/"",3)"
^ZWCmcd("dzIB-kwmpj","mcod",44)="      S kwsys=$P(PB,""/"",4)"
^ZWCmcd("dzIB-kwmpj","mcod",45)="      S SB=$P(PB,""/"",1,3)_""/"""
^ZWCmcd("dzIB-kwmpj","mcod",46)="      S GB=SB_""gmsa/"""
^ZWCmcd("dzIB-kwmpj","mcod",47)="      S MB=SB_""gmma/"""
^ZWCmcd("dzIB-kwmpj","mcod",48)="      S W2B=PB_""ww2m/"""
^ZWCmcd("dzIB-kwmpj","mcod",49)="      Q"
^ZWCmcd("dzIB-mpjIB","mcod",50)=";* mpjDir  : mpjDir, LUser,kwsys, SB,PB,MB,W2B (ww2mbr/)"
^ZWCmcd("dzIB-mpjIB","mcod",51)="mpjIB(mpjDa) I $G(mpjDa)="""" D bug^duv Q"
^ZWCmcd("dzIB-mpjIB","mcod",52)="      S mpjDir=mpjDa"
^ZWCmcd("dzIB-mpjIB","mcod",53)="      S zroI=$zro"
^ZWCmcd("dzIB-mpjIB","mcod",54)="      S kwsys=""km3a"""
^ZWCmcd("dzIB-mpjIB","mcod",55)="      S LUser=""kw"""
^ZWCmcd("dzIB-mpjIB","mcod",56)="      S SB=""/home/""_LUser_""/""_kwsys_""/"""
^ZWCmcd("dzIB-mpjIB","mcod",57)="      S PB=SB_mpjDir_""/"""
^ZWCmcd("dzIB-mpjIB","mcod",58)="      S GB=SB_""gmsa/"""
^ZWCmcd("dzIB-mpjIB","mcod",59)="      S MB=SB_""gmma/"""
^ZWCmcd("dzIB-mpjIB","mcod",60)="      S W2B=PB_""ww2m/""      "
^ZWCmcd("dzIB-mpjIB","mcod",61)="      I zroI'[SB D b^duv(""Err $zro vs SB "",""mpjD,SB,PB,zroI"")"
^ZWCmcd("dzIB-mpjIB","mcod",62)="      Q"
^ZWCmcd("dzIB-mpjIB","mcod",63)=";*"
^ZWCmcd("dzIB-top","mcod",7)="top   NEW Q S Q="""" I $G(zroA)="""" D bug^dv Q"
^ZWCmcd("dzIB-top","mcod",8)="      I $G(zroA)'="""" D zro G Q"
^ZWCmcd("dzIB-top","mcod",9)="      ;D ENV   ; use ENV^dzIB"
^ZWCmcd("dzIB-zro","mcod",23)=";*"
^ZWCmcd("dzIB-zro","mcod",24)=";*  from zro : SB,PB,GB,MB,W2B, dist, mpjDir, zrid'"
^ZWCmcd("dzIB-zro","mcod",25)="zro   NEW x,ns,nsl"
^ZWCmcd("dzIB-zro","mcod",26)="      S dist=$P(zroA,"" "")"
^ZWCmcd("dzIB-zro","mcod",27)="      S x=$P(zroA,""o(""),ns=$L(x,"" "")"
^ZWCmcd("dzIB-zro","mcod",28)="      I ns=2 S PB=$P($P(x,"" "",ns),""o/"")"
^ZWCmcd("dzIB-zro","mcod",29)="      E  D b^dv(""Err PB from zroA"",""ns,x,zroA"") KILL  Q ;only crash"
^ZWCmcd("dzIB-zro","mcod",30)="      S nsl=$L(PB,""/""),SB=$P(PB,""/"",1,nsl-2)_""/"",mpjDir=$P(PB,""/"",nsl-1)"
^ZWCmcd("dzIB-zro","mcod",31)="      S GB=SB_""gmsa/"""
^ZWCmcd("dzIB-zro","mcod",32)="      S MB=SB_""gmma/"""
^ZWCmcd("dzIB-zro","mcod",33)="      S W2B=PB_""ww2m/"""
^ZWCmcd("dzIB-zro","mcod",34)="      I $G(zrid)="""",$D(^ZWZ(mpj)) S zrid=mpj"
^ZWCmcd("dzIB-zro","mcod",35)="      D b^duv(""Log zro^""_$T(+0),""dist,SB,PB,GB,MB,W2B,mpjDir,zrid"")"
^ZWCmcd("dzIB-zro","mcod",36)="      Q"
^ZWCmcd("dzIMG","mcod",1)="dzIMG  ;CKW/ESC  i2jun20 gmsa/ rd2zro/ ; 20200602-92 ; ^dz* zro SuperFL lists"
^ZWCmcd("dzIMG","mcod",2)=";"
^ZWCmcd("dzIMG","mcod",3)=";"
^ZWCmcd("dzIMG-A","mcod",4)="A      S zroFL=""szro,qzro,mFol,mBase,mpj,fPro,qSB,qGB,qPB,qL_^QZRO(qzid)""  ; sic vs ^mwIMG mbr ^ZWZ"
^ZWCmcd("dzIMG-A","mcod",5)="       D T^dws(""zroFL=szro,qzro,mFol,mBase,mpj,fPro,qSB,qGB,qPB,qL_^QZRO(qzid)"")"
^ZWCmcd("dzIMG-A","mcod",6)="       ;"
^ZWCmcd("dzIMG-A","mcod",7)="       ;"
^ZWCmcd("dzIMG-A","mcod",8)="       Q"
^ZWCmcd("dzIMG-IB","mcod",13)=";*"
^ZWCmcd("dzIMG-IB","mcod",14)=";*  Special Set of Folder Variables"
^ZWCmcd("dzIMG-IB","mcod",15)=";  RefBy: gmgu/ "
^ZWCmcd("dzIMG-IB","mcod",16)="IB      S SB=""/home/kw/km3a/"" ; vs ^devIB"
^ZWCmcd("dzIMG-IB","mcod",17)="        S GB=SB_""gmsa/"""
^ZWCmcd("dzIMG-IB","mcod",18)="        S MB=SB_""gmma/"""
^ZWCmcd("dzIMG-IB","mcod",19)="        S PB=MB  ; here ?"
^ZWCmcd("dzIMG-IB","mcod",20)="        S WB=PB_""wwm/"""
^ZWCmcd("dzIMG-IB","mcod",21)="        Q"
^ZWCmcd("dzIMG-IB","mcod",22)=";"
^ZWCmcd("dzIMG-IB","mcod",23)=";  zr0FL=""zzro,czro,izro,rzro,nrd,nmr,ncb,rd,devHzd_^ZWZ(zrid)"""
^ZWCmcd("dzIMG-qzidNxt","mcod",9)=";*$$Q  : qzid"
^ZWCmcd("dzIMG-qzidNxt","mcod",10)="qzidNxt()  S qzid=$G(^QZRO(0,""qzidNxt"")) I qzid="""" S qzid=100"
^ZWCmcd("dzIMG-qzidNxt","mcod",11)="           S ^QZRO(0,""qzidNxt"")=qzid+1"
^ZWCmcd("dzIMG-qzidNxt","mcod",12)="           Q """"  ; No errors yet"
^ZWCmcd("dzIzro","mcod",1)="dzIzro   ;CKW/ESC i9sep22 km3a/ gmsa/ rzro3/ ;20220909-40;Derive and test existence of rdir - $zro"
^ZWCmcd("dzIzro","mcod",2)=";"
^ZWCmcd("dzIzro","mcod",3)=";"
^ZWCmcd("dzIzro-III","mcod",41)=";*"
^ZWCmcd("dzIzro-III","mcod",42)="III    S kwsys=""km3a"",kwmpj=""umad"""
^ZWCmcd("dzIzro-III","mcod",43)="       S SB=""/home/kw/""_kwsys_""/"""
^ZWCmcd("dzIzro-III","mcod",44)="       S PB=SB_kwmpj_""/"""
^ZWCmcd("dzIzro-III","mcod",45)="       S GB=SB_""gmsa/"""
^ZWCmcd("dzIzro-III","mcod",46)="       S MB=SB_""gmma/"""
^ZWCmcd("dzIzro-III","mcod",47)="       ;"
^ZWCmcd("dzIzro-III","mcod",48)="       S rdLPB0=""rcfg"""
^ZWCmcd("dzIzro-III","mcod",49)="       S rdLPB1=""ra1,rMGR"""
^ZWCmcd("dzIzro-III","mcod",50)="       S rdLGB=""rzro3 rmgbFL3 rmenu3 rTOI7 rvv rhgen4b rdev3 rd2c rdbget rdve1 rd2vl"""
^ZWCmcd("dzIzro-III","mcod",51)="       S rdLMB=""r rcfg-gmma rbrzm1 ragmma rkbd1 rmide15 rmFL rns rMIDE rHNMP  rTJ rProto rnav2 rthr rguH rilist rmbs rgrep rTAC rmGP3"""
^ZWCmcd("dzIzro-III","mcod",52)="       S zro1="""""
^ZWCmcd("dzIzro-III","mcod",53)="       Q"
^ZWCmcd("dzIzro-III","mcod",54)="       "
^ZWCmcd("dzIzro-III","mcod",55)=""
^ZWCmcd("dzIzro-III","mcod",56)=";;export ydb_routines=""$ydb_dist $PB/o(   \"
^ZWCmcd("dzIzro-III","mcod",57)=";;       $PB/ra1 $PB/rcfg $PB/rMGR ) \"
^ZWCmcd("dzIzro-III","mcod",58)=";;$PB/ou( \"
^ZWCmcd("dzIzro-III","mcod",59)=";;       $MB/r \"
^ZWCmcd("dzIzro-III","mcod",60)=";;       $MB/rcfg-gmma \"
^ZWCmcd("dzIzro-III","mcod",61)=";;       $MB/rbrzm1 \"
^ZWCmcd("dzIzro-III","mcod",62)=";;       $GB/rdve1 \"
^ZWCmcd("dzIzro-III","mcod",63)=";;       $MB/ragmma \"
^ZWCmcd("dzIzro-III","mcod",64)=";;       $MB/rkbd1 \"
^ZWCmcd("dzIzro-III","mcod",65)=";;       $MB/rmide15 \"
^ZWCmcd("dzIzro-III","mcod",66)=";;       $MB/rmFL \"
^ZWCmcd("dzIzro-III","mcod",67)=";;       $MB/rns \"
^ZWCmcd("dzIzro-III","mcod",68)=";;       $MB/rMIDE \"
^ZWCmcd("dzIzro-III","mcod",69)=";;       $MB/rHNMP  \"
^ZWCmcd("dzIzro-III","mcod",70)=";;       $MB/rTJ \"
^ZWCmcd("dzIzro-III","mcod",71)=";;       $MB/rProto \"
^ZWCmcd("dzIzro-III","mcod",72)=";;       $MB/rnav2 \"
^ZWCmcd("dzIzro-III","mcod",73)=";;       $MB/rthr \"
^ZWCmcd("dzIzro-III","mcod",74)=";;       $MB/rguH "
^ZWCmcd("dzIzro-III","mcod",75)=";;       $MB/rilist \"
^ZWCmcd("dzIzro-III","mcod",76)=";;       $MB/rmbs \"
^ZWCmcd("dzIzro-III","mcod",77)=";;       $MB/rgrep \"
^ZWCmcd("dzIzro-III","mcod",78)=";;       $MB/rTAC \"
^ZWCmcd("dzIzro-III","mcod",79)=";;       $GB/rzro3 \"
^ZWCmcd("dzIzro-III","mcod",80)=";;       $GB/rmgbFL3 \"
^ZWCmcd("dzIzro-III","mcod",81)=";;       $MB/rmGP3 \"
^ZWCmcd("dzIzro-III","mcod",82)=";;       $GB/rmenu3 \"
^ZWCmcd("dzIzro-III","mcod",83)=";;       $GB/rTOI7  \"
^ZWCmcd("dzIzro-III","mcod",84)=";;       $GB/rvv \"
^ZWCmcd("dzIzro-III","mcod",85)=";;       $GB/rhgen4b \"
^ZWCmcd("dzIzro-III","mcod",86)=";;       $GB/rdev3 \"
^ZWCmcd("dzIzro-III","mcod",87)=";;       $GB/rd2c \"
^ZWCmcd("dzIzro-III","mcod",88)=";;       $GB/rdbget \"
^ZWCmcd("dzIzro-III","mcod",89)=";;       $GB/rd2vl)"""
^ZWCmcd("dzIzro-Q","mcod",36)=";*"
^ZWCmcd("dzIzro-Q","mcod",37)="Q      Q:$Q Q Q:Q=""""  D qz Q"
^ZWCmcd("dzIzro-Qbug","mcod",38)="Qbug   D qz Q:$Q Q Q"
^ZWCmcd("dzIzro-R1","mcod",23)=";*  append rdir to zro1  - accumulating $zro value"
^ZWCmcd("dzIzro-R1","mcod",24)="R1(rdir,BB)  ;"
^ZWCmcd("dzIzro-R1","mcod",25)="       S zro1=zro1_"" ""_BB_rdir"
^ZWCmcd("dzIzro-R1","mcod",26)="       Q"
^ZWCmcd("dzIzro-T1","mcod",27)=";*  test rdir for existence and containing at least on mRou *.m file       "
^ZWCmcd("dzIzro-T1","mcod",28)="T1(rdir,BB)  ;"
^ZWCmcd("dzIzro-T1","mcod",29)="       S schd=BB_rdir"
^ZWCmcd("dzIzro-T1","mcod",30)="       S schr=BB_rdir_""*.m"""
^ZWCmcd("dzIzro-T1","mcod",31)="       S durl=$ZPARSE(schd) I durl="""" D b^dv(""Err schd"",""durl,schd,rdir,BB"")"
^ZWCmcd("dzIzro-T1","mcod",32)="       S x=ZSEARCH(""^X"")  ; clear ptr"
^ZWCmcd("dzIzro-T1","mcod",33)="       S murl=$ZSEARCH(schr) I murl="""" S Q=""Empty rdir, no *.m"" D b^dv(Q,""Q,murl,schr,rdir,BB"") Q"
^ZWCmcd("dzIzro-T1","mcod",34)="       ; just ck for one mRou.m"
^ZWCmcd("dzIzro-T1","mcod",35)="       Q"
^ZWCmcd("dzIzro-TR","mcod",13)=";*"
^ZWCmcd("dzIzro-TR","mcod",14)="TR(rdL,BB)  ;"
^ZWCmcd("dzIzro-TR","mcod",15)="       NEW Q S Q="""""
^ZWCmcd("dzIzro-TR","mcod",16)="       I $G(rdL)="""" S Q=""arg-rdL"" G Qbug"
^ZWCmcd("dzIzro-TR","mcod",17)="       I $G(BB)="""" S Q=""Null BB"" G Qbug"
^ZWCmcd("dzIzro-TR","mcod",18)="       I ($E(BB)'=""/"")!($E(BB,$L(BB))'=""/"") S Q=""BB fmt"" G Qbug"
^ZWCmcd("dzIzro-TR","mcod",19)="       ;"
^ZWCmcd("dzIzro-TR","mcod",20)="       F di=1:1:$L(rdL,"" "") S rdir=$P(rdL,"" "",di) I rdir'="""" D R1(rdir,BB)"
^ZWCmcd("dzIzro-TR","mcod",21)="       ;"
^ZWCmcd("dzIzro-TR","mcod",22)="       Q"
^ZWCmcd("dzIzro-qz","mcod",39)="qz     D b^dv(""Err ^""_$T(+0),""Q,rdL,BB"")"
^ZWCmcd("dzIzro-qz","mcod",40)="       Q"
^ZWCmcd("dzIzro-top","mcod",4)="top    D III"
^ZWCmcd("dzIzro-top","mcod",5)="       D TR(rdLPB0,PB)"
^ZWCmcd("dzIzro-top","mcod",6)="       D TR(rdLPB1,PB)"
^ZWCmcd("dzIzro-top","mcod",7)="       S zro2=PB_""o(""_zro1_"") """
^ZWCmcd("dzIzro-top","mcod",8)="       S zro1="" ""_PB_""ou("""
^ZWCmcd("dzIzro-top","mcod",9)="       D TR(rdLGB,GB)"
^ZWCmcd("dzIzro-top","mcod",10)="       D TR(rdLMB,MB)"
^ZWCmcd("dzIzro-top","mcod",11)="       S izro=zro2_zro1_"")""  ; lib*.so ?"
^ZWCmcd("dzIzro-top","mcod",12)="       Q"
^ZWCmcd("dzMa","mcod",1)="dzMa  ;CKW/ESC  i28aug19 gmsa/  rd2zro/ ; 20190828-51 ; Ma Sequences rzro/"
^ZWCmcd("dzMa","mcod",2)=";"
^ZWCmcd("dzMa","mcod",3)=";"
^ZWCmcd("dzMa","mcod",4)=";  fdMenu / dzMenu olf. "
^ZWCmcd("dzMa-ns","mcod",5)="ns   D ^dzrop($zro)  ; : zdir()"
^ZWCmcd("dzMa-ns","mcod",6)="     D ^dzns"
^ZWCmcd("dzMa-ns","mcod",7)="     Q"
^ZWCmcd("dzMa-olf","mcod",8)=";*"
^ZWCmcd("dzMa-olf","mcod",9)=";*    dzMenu  "
^ZWCmcd("dzMa-olf","mcod",10)="olf    S fil=""aa-OLF-dz-24aug20.mdk"""
^ZWCmcd("dzMa-olf","mcod",11)="       S fol=""rzro3/""  ; fol=""rd2zro/"""
^ZWCmcd("dzMa-olf","mcod",12)="       D IB^dzIMG"
^ZWCmcd("dzMa-olf","mcod",13)="       S devr=GB_fol_fil"
^ZWCmcd("dzMa-olf","mcod",14)="       S Q=$$^geEL(devr)   ; Feb 16  2022 gmma/rilist/geEL.m"
^ZWCmcd("dzMa-olf","mcod",15)="       ;...?"
^ZWCmcd("dzMa-olf","mcod",16)="       Q"
^ZWCmcd("dzMa-olf","mcod",17)=";*"
^ZWCmcd("dzMdup","mcod",1)="dzMdup(zro) ;CKW/ESC i2jun20 gmsa/ rd2zro/ ; 20200602-70 ; Find list of MRou in zdir, Test dup MRou"
^ZWCmcd("dzMdup","mcod",2)=";$$Q  or not        was ^dzMdir  (sic)"
^ZWCmcd("dzMdup","mcod",3)=";"
^ZWCmcd("dzMdup","mcod",4)=";falls from top---"
^ZWCmcd("dzMdup-A","mcod",5)="A       NEW zdir"
^ZWCmcd("dzMdup-A","mcod",6)="        D ^dzroz($G(zro))  ; zro : zdir(oi,si)"
^ZWCmcd("dzMdup-A","mcod",7)="        NEW RXU,Ru  ; Arrays, Clean up"
^ZWCmcd("dzMdup-A","mcod",8)="        NEW Q"
^ZWCmcd("dzMdup-A","mcod",9)="        S Q=$$RXU  ; zdir :  Find Dupl mrou refs in zro/zdir sdir's"
^ZWCmcd("dzMdup-A","mcod",10)="        Q:$Q Q"
^ZWCmcd("dzMdup-A","mcod",11)="        Q"
^ZWCmcd("dzMdup-Dup","mcod",52)=";*$$Q   RXU()  : Q  msg $P/$IO"
^ZWCmcd("dzMdup-Dup","mcod",53)="Dup()   NEW Q,mr,mi,url,url2,i S Q="""""
^ZWCmcd("dzMdup-Dup","mcod",54)="      USE $P W:$X ! W ""Checking for Duplications in $zro-"",!"
^ZWCmcd("dzMdup-Dup","mcod",55)="      S mr=0"
^ZWCmcd("dzMdup-Dup","mcod",56)="      F mi=0:1 S mr=$O(RXU(mr)) Q:mr=""""  S url=$O(RXU(mr,"""")) S url2=$O(RXU(mr,url)) I url2'="""" DO  ;"
^ZWCmcd("dzMdup-Dup","mcod",57)="        .I url2[""gtmy/"" Q  ;Skip utilities, both case ways"
^ZWCmcd("dzMdup-Dup","mcod",58)="        .I url2[""/usr"" Q  ;Skip oi=1 ydb_dist if in /usr/local/lib/yottadb"
^ZWCmcd("dzMdup-Dup","mcod",59)="        .W !,url,!,url2,!!"
^ZWCmcd("dzMdup-Dup","mcod",60)="        .S Q=Q+1"
^ZWCmcd("dzMdup-Dup","mcod",61)="        .S url=url2 F i=0:1 S url=$O(RXU(mr,url)) Q:url=""""  W url,!"
^ZWCmcd("dzMdup-Dup","mcod",62)="      I Q="""" W:$X ! W ""No duplications- No overlapping MRou in different $zro groups."",!"
^ZWCmcd("dzMdup-Dup","mcod",63)="      Q Q"
^ZWCmcd("dzMdup-Dup","mcod",64)=";*"
^ZWCmcd("dzMdup-Dup","mcod",65)=""
^ZWCmcd("dzMdup-Dup","mcod",66)=""
^ZWCmcd("dzMdup-Dup","mcod",67)="      "
^ZWCmcd("dzMdup-F1","mcod",38)=";* One File url    "
^ZWCmcd("dzMdup-F1","mcod",39)="F1   S n=$L(url,""/""),fil=$P(url,""/"",n)"
^ZWCmcd("dzMdup-F1","mcod",40)="     S MRou=$P(fil,"".m"")        "
^ZWCmcd("dzMdup-F1","mcod",41)="     S ii=oi_""-""_si_""-""_ri_""-""_MRou"
^ZWCmcd("dzMdup-F1","mcod",42)="     S mr=$ZCONVERT(MRou,""L"")  ; vs mr=$$LC^dvc(MRou)"
^ZWCmcd("dzMdup-F1","mcod",43)="     ;D b^dv(""Log MRou "",""fil,n,url,MRou,mr"")        "
^ZWCmcd("dzMdup-F1","mcod",44)="     S Ru(mr,url)=ri"
^ZWCmcd("dzMdup-F1","mcod",45)="     S RXU(mr,url)=ii  ; ? Identical structure... Cumulative across zro"
^ZWCmcd("dzMdup-F1","mcod",46)="     S m=$G(RXU(mr)) I m="""" S RXU(mr)=MRou"
^ZWCmcd("dzMdup-F1","mcod",47)="     I oi=1 DO:0   Q ; Ignore, no err msg"
^ZWCmcd("dzMdup-F1","mcod",48)="       .D b^dv(""Ignore dup Case when ydb_dist when oi=1 "",""oi,ii,m,MRou"")"
^ZWCmcd("dzMdup-F1","mcod",49)="     I m'="""",m'=MRou D ^dv(""Case clash ?"",""m,MRou,mr"") ;Lists as dup too"
^ZWCmcd("dzMdup-F1","mcod",50)="     Q"
^ZWCmcd("dzMdup-F1","mcod",51)=""
^ZWCmcd("dzMdup-RXU","mcod",20)="RXU()  NEW Q,oi,si S Q="""""
^ZWCmcd("dzMdup-RXU","mcod",21)="      KILL RXU"
^ZWCmcd("dzMdup-RXU","mcod",22)="      F oi=1:1 Q:$D(zdir(oi))=0  F si=1:1 Q:$D(zdir(oi,si))=0   S Q=$$SRU(oi,si)"
^ZWCmcd("dzMdup-RXU","mcod",23)="      S Q=$$Dup  ; : Q"
^ZWCmcd("dzMdup-RXU","mcod",24)="      Q:$Q Q"
^ZWCmcd("dzMdup-RXU","mcod",25)="      Q"
^ZWCmcd("dzMdup-SRU","mcod",26)=";*"
^ZWCmcd("dzMdup-SRU","mcod",27)=";*$$Q zdir(oi,si)   - one dir, Ru() and cumulative RXU(mr,url)=ii"
^ZWCmcd("dzMdup-SRU","mcod",28)="SRU(oi,si)  KILL Ru  ; not RXU here, it is cumulative"
^ZWCmcd("dzMdup-SRU","mcod",29)="      NEW Q,m,ri,ii,n,mr,MRou,url,durl,ref,fil,x"
^ZWCmcd("dzMdup-SRU","mcod",30)="      S Q="""""
^ZWCmcd("dzMdup-SRU","mcod",31)="      ;"
^ZWCmcd("dzMdup-SRU","mcod",32)="      S durl=$G(zdir(oi,si))  ; sdir"
^ZWCmcd("dzMdup-SRU","mcod",33)="      I durl[""gtm"" Q """"  ;Skip Utilities, gtm/ or gtmy/"
^ZWCmcd("dzMdup-SRU","mcod",34)="      S x=$ZSEARCH(durl)"
^ZWCmcd("dzMdup-SRU","mcod",35)="      S ref=durl_""/*.m"""
^ZWCmcd("dzMdup-SRU","mcod",36)="      F ri=1:1 S url=$ZSEARCH(ref) Q:url=""""  D F1  ;"
^ZWCmcd("dzMdup-SRU","mcod",37)="    Q Q"
^ZWCmcd("dzMdup-zdir","mcod",12)=";*$$Q      alt entry without recalculating zdir from zro"
^ZWCmcd("dzMdup-zdir","mcod",13)="zdir()  NEW Q  S Q=""""  NEW RXU,Ru"
^ZWCmcd("dzMdup-zdir","mcod",14)="        S Q=$$RXU  ; zdir : RXU  dup mrou refs"
^ZWCmcd("dzMdup-zdir","mcod",15)="        Q:$Q Q"
^ZWCmcd("dzMdup-zdir","mcod",16)="        Q"
^ZWCmcd("dzMdup-zdir","mcod",17)=";"
^ZWCmcd("dzMdup-zdir","mcod",18)=";"
^ZWCmcd("dzMdup-zdir","mcod",19)=";$$Q  zdir : Writes if Dup MRou or case-clash"
^ZWCmcd("dzMenu","mcod",1)="dzMenu  ;CKW/ESC i25aug20 gmsa/ rd2zro/ ; 20200825-60 ; zro Utility Menu - Directly callable"
^ZWCmcd("dzMenu","mcod",2)=";"
^ZWCmcd("dzMenu","mcod",3)=";"
^ZWCmcd("dzMenu","mcod",4)="    S mSys=""dzMenu"""
^ZWCmcd("dzMenu","mcod",5)="    I ($zro'[""/rd2zro""),($zro'[""/rzro""),($zro'[""/rzro3"") DO  G Q   ; one or other"
^ZWCmcd("dzMenu","mcod",6)="           .D b^dv(""Need access to rzro3 or rd2zro or rzro"",""zro,mSys"")"
^ZWCmcd("dzMenu","mcod",7)="    D COMM  ;Always compile"
^ZWCmcd("dzMenu","mcod",8)="          S m=$G(^MNU(0,""mSysCur""))"
^ZWCmcd("dzMenu","mcod",9)="          I m'=mSys D b^dv(""Why not cur?"",""mSys"") S ^MNU(0,""mSysCur"")=mSys"
^ZWCmcd("dzMenu","mcod",10)="    D ^dmnu  ; ^MNU(0,""mSysCur"")"
^ZWCmcd("dzMenu-COMM","mcod",28)=";*  Compile Menu $T -> RM(), then Compile  ^dmnucom"
^ZWCmcd("dzMenu-COMM","mcod",29)="COMM   KILL RM   S RM=0   NEW ri,L"
^ZWCmcd("dzMenu-COMM","mcod",30)="       F I=1:1 S L=$T(Menu+I) Q:L[""***""   Q:L=""""  I L["";;"" DO"
^ZWCmcd("dzMenu-COMM","mcod",31)="         .S RM=RM+1,RM(RM)=$P(L,"";;"",2,9)"
^ZWCmcd("dzMenu-COMM","mcod",32)="       ;"
^ZWCmcd("dzMenu-COMM","mcod",33)="       D ^dmnCom(mSys)  ;Compile RM() to ^MNU(mSys  and make mSysCur"
^ZWCmcd("dzMenu-COMM","mcod",34)="       Q"
^ZWCmcd("dzMenu-Menu","mcod",13)=";*"
^ZWCmcd("dzMenu-Menu","mcod",14)="Menu    ;Text for "
^ZWCmcd("dzMenu-Menu","mcod",15)="        ;LineSyntax:  No-indent is mnu, Indent is an option"
^ZWCmcd("dzMenu-Menu","mcod",16)="        ;mab. dPRP_dDE  "
^ZWCmcd("dzMenu-Menu","mcod",17)="        ;  op.  dopLR  dopDE # where dopLR contains ^  or menu mab./exists"
^ZWCmcd("dzMenu-Menu","mcod",18)="        ;  dnxt1  or dnxt2 Syntax: | pipe prefix"
^ZWCmcd("dzMenu-Menu","mcod",19)="        ;  $prefix is transfer to other Menu ($mab)"
^ZWCmcd("dzMenu-Menu","mcod",20)="  ;;mm. Select from zro Menu  |mm"
^ZWCmcd("dzMenu-Menu","mcod",21)="  ;;  a.    ^dzs     Display zdir/zro  readably, rdNSL, D2abs, with DupMRou-ck"
^ZWCmcd("dzMenu-Menu","mcod",22)="  ;;  gp6.  GP6^mwMa  Revised GP6  of Mgbl ZWlk"
^ZWCmcd("dzMenu-Menu","mcod",23)="  ;;  ns.   ns^dzMa   NameSpaces"
^ZWCmcd("dzMenu-Menu","mcod",24)="  ;;  olf.  olf^dzMa  Edit sequence of rd2zro/ OLF file"
^ZWCmcd("dzMenu-Menu","mcod",25)="  ;; xtest.    Test rd2zro/ Menu"
^ZWCmcd("dzMenu-Menu","mcod",26)="  ;;   tdz. TAll^dzTest All rd2zro/  tests"
^ZWCmcd("dzMenu-Menu","mcod",27)="; ***"
^ZWCmcd("dzMenu-Q","mcod",11)="Q   Q:$Q """""
^ZWCmcd("dzMenu-Q","mcod",12)="    Q"
^ZWCmcd("dzMenu-dis","mcod",35)=";*"
^ZWCmcd("dzMenu-dis","mcod",36)="dis    Q"
^ZWCmcd("dzMenu-dis","mcod",37)=";*"
^ZWCmcd("dzRD1","mcod",1)="dzRD1  ;CKW/ESC i21aug22 gmsa./ rzro3/ ;20220821-20;Quickie zro construct exercise, PBL,GBL : zro"
^ZWCmcd("dzRD1","mcod",2)=";No dependencies, can't trust $zro yet"
^ZWCmcd("dzRD1","mcod",3)=";  was ^madev, ^dzmadev, ..."
^ZWCmcd("dzRD1","mcod",4)=";"
^ZWCmcd("dzRD1","mcod",5)=";Note rdix is replacement name for rdid (from rdir with op ~i)"
^ZWCmcd("dzRD1","mcod",6)=";"
^ZWCmcd("dzRD1-AR","mcod",42)=";*  "
^ZWCmcd("dzRD1-AR","mcod",43)="AR(RL,RB) S RB=$G(RB)"
^ZWCmcd("dzRD1-AR","mcod",44)="       F li=1:1:$L(RL,"","") S rd=$P(RL,"","",li)  S zro=zro_RB_rd_"" """
^ZWCmcd("dzRD1-AR","mcod",45)="       Q"
^ZWCmcd("dzRD1-Bldzro","mcod",18)=";*  PBL, GBL, MBL  : -> zro"
^ZWCmcd("dzRD1-Bldzro","mcod",19)="Bldzro S zrix=""umad"""
^ZWCmcd("dzRD1-Bldzro","mcod",20)="       S kwsys=""km3a"""
^ZWCmcd("dzRD1-Bldzro","mcod",21)="       S LUser=""kw"""
^ZWCmcd("dzRD1-Bldzro","mcod",22)="       ;"
^ZWCmcd("dzRD1-Bldzro","mcod",23)="       S MIB=$ZTRNLNM(""PWD"")  ; current dir on mumps start"
^ZWCmcd("dzRD1-Bldzro","mcod",24)="       S MXB=$ZTRNLNM(""ydb_dist"")  ; gtmy, symlink to ydb vers"
^ZWCmcd("dzRD1-Bldzro","mcod",25)="       S zroi=$ZTRNLNM(""ydb_routines"")  ; Mrou path list $zro"
^ZWCmcd("dzRD1-Bldzro","mcod",26)="       ;  Don't ref $zro or will get crash if errors, frustrating"
^ZWCmcd("dzRD1-Bldzro","mcod",27)="       S SBi=$ZTRNLNM(""SB"")"
^ZWCmcd("dzRD1-Bldzro","mcod",28)="       S PBi=$ZTRNLNM(""PB"")"
^ZWCmcd("dzRD1-Bldzro","mcod",29)="       S SB=""/home/""_LUser_""/""_kwsys_""/"""
^ZWCmcd("dzRD1-Bldzro","mcod",30)="       S PB=SB_zrix_""/"""
^ZWCmcd("dzRD1-Bldzro","mcod",31)="       ;"
^ZWCmcd("dzRD1-Bldzro","mcod",32)="       S zro=MXB_"" ""  ; source and obj, existing, both in $ydb_dist  itself"
^ZWCmcd("dzRD1-Bldzro","mcod",33)="            ;don't delete *.o and don't compile   -> oi=1,si=1"
^ZWCmcd("dzRD1-Bldzro","mcod",34)="       S zro=zro_"" o( """
^ZWCmcd("dzRD1-Bldzro","mcod",35)="       D AR(PBL)"
^ZWCmcd("dzRD1-Bldzro","mcod",36)="       S zro=zro_"") ou( """
^ZWCmcd("dzRD1-Bldzro","mcod",37)="       D AR(GBL,""../gmsa/"")"
^ZWCmcd("dzRD1-Bldzro","mcod",38)="       D AR(MBL,""../gmma/"")"
^ZWCmcd("dzRD1-Bldzro","mcod",39)="       S zro=zro_"" )""       "
^ZWCmcd("dzRD1-Bldzro","mcod",40)="       ;S zro=zro_"" ""_MXB_""/libyottadb.so ""_MXB_""/libyottadbutil.so""  ; GDE.o is in ydb_dist"
^ZWCmcd("dzRD1-Bldzro","mcod",41)="       Q"
^ZWCmcd("dzRD1-HD","mcod",61)=";* L : BB, Burl    // header util gp line"
^ZWCmcd("dzRD1-HD","mcod",62)="HD    S L1=$E(L,3,9999)"
^ZWCmcd("dzRD1-HD","mcod",63)="      S BB=$P(L1,"" ""),Burl=$P(L1,"" "",2,99)"
^ZWCmcd("dzRD1-HD","mcod",64)="      I $E(Burl,$L(Burl))'=""/"" B:$L(Burl,""/"")'=2  S Burl=Burl_""/"""
^ZWCmcd("dzRD1-HD","mcod",65)="      Q"
^ZWCmcd("dzRD1-HD2","mcod",110)=";*"
^ZWCmcd("dzRD1-HD2","mcod",111)=";* L : BB, Burl    // header util gp line"
^ZWCmcd("dzRD1-HD2","mcod",112)="HD2    S L1=$E(L,3,9999)"
^ZWCmcd("dzRD1-HD2","mcod",113)="      S BB=$P(L1,"" ""),Burl=$P(L1,"" "",2,99)"
^ZWCmcd("dzRD1-HD2","mcod",114)="      I $E(Burl,$L(Burl))'=""/"" B:$L(Burl,""/"")'=2  S Burl=Burl_""/"""
^ZWCmcd("dzRD1-HD2","mcod",115)="      Q"
^ZWCmcd("dzRD1-LN","mcod",66)=";*  L  is ll line for folder rdir"
^ZWCmcd("dzRD1-LN","mcod",67)="LN    S nsp=$L(L,"" ""),rdir=$P(L,"" "",nsp)"
^ZWCmcd("dzRD1-LN","mcod",68)="      I $E(L)'=""d""  D b^dv(""Directory type line"",""L,nsp,rdir"")"
^ZWCmcd("dzRD1-LN","mcod",69)="      I $E(rdir,$L(rdir))'=""/"" D b^dv(""Error rdir"",""rdir,L1,L0,ri"") Q"
^ZWCmcd("dzRD1-LN","mcod",70)="      S nsl=$L(rdir,""/"") "
^ZWCmcd("dzRD1-LN","mcod",71)="         I nsl'=2 D b^dv(""Error rdir "",""rdir,ri,L0,L1,BB,Burl"") Q"
^ZWCmcd("dzRD1-LN","mcod",72)="      D rdix ; rdir : rdix"
^ZWCmcd("dzRD1-LN","mcod",73)="      S RIX(rdix,""rdir"")=rdir"
^ZWCmcd("dzRD1-LN","mcod",74)="      S RIX(rdix,""BB"")=BB"
^ZWCmcd("dzRD1-LN","mcod",75)="      S RIX(rdix,""Burl"")=Burl"
^ZWCmcd("dzRD1-LN","mcod",76)="      D RDmeta"
^ZWCmcd("dzRD1-LN","mcod",77)="      I meta'="""" S RIX(rdix,""meta"")=meta"
^ZWCmcd("dzRD1-LN","mcod",78)="      Q"
^ZWCmcd("dzRD1-LN2","mcod",116)=";*"
^ZWCmcd("dzRD1-LN2","mcod",117)="LN2   S rdgp=$P(L,"" ""),rdgde=$P(L,"" "",2,999),rdL="""""
^ZWCmcd("dzRD1-LN2","mcod",118)="      I rdgde[""{"" S rdL=$P(rdgde,""{"",2),rdL=$P(rdL,""}"")"
^ZWCmcd("dzRD1-LN2","mcod",119)="      S RIG(rdgp,""rdgde"")=rdgde"
^ZWCmcd("dzRD1-LN2","mcod",120)="      I rdL'="""" S RIG(rdgp,""rdL"")=rdL"
^ZWCmcd("dzRD1-LN2","mcod",121)="      Q"
^ZWCmcd("dzRD1-RD1","mcod",46)=";*"
^ZWCmcd("dzRD1-RD1","mcod",47)="RD1   S MIB=$ZTRNLNM(""PWD"")  ; Rel base"
^ZWCmcd("dzRD1-RD1","mcod",48)="      S Fil=""rdir-ll.txt"",B=""/home/kw/km3a/umad/dixd/"""
^ZWCmcd("dzRD1-RD1","mcod",49)="      S devR=B_Fil"
^ZWCmcd("dzRD1-RD1","mcod",50)="      D RDR ; devR : RX(ri)"
^ZWCmcd("dzRD1-RD1","mcod",51)="      S BB=-1,Burl=""?"""
^ZWCmcd("dzRD1-RD1","mcod",52)="      KILL RIX,RDxg"
^ZWCmcd("dzRD1-RD1","mcod",53)="      F ri=1:1:RX S L=$G(RX(ri)) DO  ;"
^ZWCmcd("dzRD1-RD1","mcod",54)="        .I L="""" Q"
^ZWCmcd("dzRD1-RD1","mcod",55)="        .I $E(L)=""#"" Q"
^ZWCmcd("dzRD1-RD1","mcod",56)="        .I $E(L,1,2)=""//"" D HD Q"
^ZWCmcd("dzRD1-RD1","mcod",57)="        .D LN"
^ZWCmcd("dzRD1-RD1","mcod",58)="      CLOSE devR USE $P"
^ZWCmcd("dzRD1-RD1","mcod",59)="      ;"
^ZWCmcd("dzRD1-RD1","mcod",60)="      Q"
^ZWCmcd("dzRD1-RD2","mcod",96)=";*      "
^ZWCmcd("dzRD1-RD2","mcod",97)="RD2   ;"
^ZWCmcd("dzRD1-RD2","mcod",98)="      S MIB=$ZTRNLNM(""PWD"")  ; Rel base"
^ZWCmcd("dzRD1-RD2","mcod",99)="      S Fil=""rdir-gp-gpde.txt"",B=""/home/kw/km3a/umad/dixd/"""
^ZWCmcd("dzRD1-RD2","mcod",100)="      S devR=B_Fil"
^ZWCmcd("dzRD1-RD2","mcod",101)="      D RDR  ; devR : RX(ri)"
^ZWCmcd("dzRD1-RD2","mcod",102)="      KILL RIG"
^ZWCmcd("dzRD1-RD2","mcod",103)="      F ri=1:1:RX S L=$G(RX(ri)) DO  ;"
^ZWCmcd("dzRD1-RD2","mcod",104)="        .I L="""" Q"
^ZWCmcd("dzRD1-RD2","mcod",105)="        .I $E(L)=""#"" Q"
^ZWCmcd("dzRD1-RD2","mcod",106)="        .I $E(L,1,2)=""//"" D HD2 Q"
^ZWCmcd("dzRD1-RD2","mcod",107)="        .D LN2"
^ZWCmcd("dzRD1-RD2","mcod",108)="      CLOSE devR USE $P"
^ZWCmcd("dzRD1-RD2","mcod",109)="      Q"
^ZWCmcd("dzRD1-RDR","mcod",122)=";*  devR : RX(ri)"
^ZWCmcd("dzRD1-RDR","mcod",123)="RDR    ;"
^ZWCmcd("dzRD1-RDR","mcod",124)="       CLOSE devR  ; safety/harmless"
^ZWCmcd("dzRD1-RDR","mcod",125)="       OPEN devR:(readonly)  ; OFR^devIO    ;Error on exception"
^ZWCmcd("dzRD1-RDR","mcod",126)="       USE devR:(rewind)  "
^ZWCmcd("dzRD1-RDR","mcod",127)="      KILL RX S RX=0"
^ZWCmcd("dzRD1-RDR","mcod",128)="      F ri=1:1 USE devR R X Q:X[""***""  USE $P S RX(ri)=X,RX=ri"
^ZWCmcd("dzRD1-RDR","mcod",129)="      Q"
^ZWCmcd("dzRD1-RDmeta","mcod",83)=";* FInd file a-meta-gp-semver.txt"
^ZWCmcd("dzRD1-RDmeta","mcod",84)="RDmeta  ;"
^ZWCmcd("dzRD1-RDmeta","mcod",85)="      S meta="""""
^ZWCmcd("dzRD1-RDmeta","mcod",86)="      S Fil=""a-meta-*"",src=Burl_rdir_""/""_Fil"
^ZWCmcd("dzRD1-RDmeta","mcod",87)="      S mfn=$ZSEARCH(src) "
^ZWCmcd("dzRD1-RDmeta","mcod",88)="      D b^dv(""Log mate "",""mfn,Fil,src,rdix"")"
^ZWCmcd("dzRD1-RDmeta","mcod",89)="        I mfn="""" Q  ;just didnt find a-meta-  file in rdir"
^ZWCmcd("dzRD1-RDmeta","mcod",90)="      S meta=mfn"
^ZWCmcd("dzRD1-RDmeta","mcod",91)="      S mfn=$P(mfn,"".txt"")"
^ZWCmcd("dzRD1-RDmeta","mcod",92)="      I mfn'[""-"" D b^dv(""Err mfn"",""mfn,ri"") Q"
^ZWCmcd("dzRD1-RDmeta","mcod",93)="      S rdgp=$P(mfn,""-"",3),rver=$P(mfn,""-"",4)"
^ZWCmcd("dzRD1-RDmeta","mcod",94)="      I $L(rver,""."")=3,rdgp'="""" S RDxg(rdgp,rver)=rdix"
^ZWCmcd("dzRD1-RDmeta","mcod",95)="      Q"
^ZWCmcd("dzRD1-TSP","mcod",130)=";*  Remove Lead & trailing space       "
^ZWCmcd("dzRD1-TSP","mcod",131)="TSP(X) ;"
^ZWCmcd("dzRD1-TSP","mcod",132)="      Q X"
^ZWCmcd("dzRD1-ZRO1","mcod",11)=";*"
^ZWCmcd("dzRD1-ZRO1","mcod",12)="ZRO1   S PBL=""rcfg,ra1"" "
^ZWCmcd("dzRD1-ZRO1","mcod",13)="       S GBL=""rzro3,rdv2"" "
^ZWCmcd("dzRD1-ZRO1","mcod",14)="       S MBL=""rbrzm1"" "
^ZWCmcd("dzRD1-ZRO1","mcod",15)="       D Bldzro"
^ZWCmcd("dzRD1-ZRO1","mcod",16)="       USE $P W !!,""zro:"",zro,!!!"
^ZWCmcd("dzRD1-ZRO1","mcod",17)="       Q"
^ZWCmcd("dzRD1-rdix","mcod",79)=";*  rdir : rdix      "
^ZWCmcd("dzRD1-rdix","mcod",80)="rdix  S rdix=rdir"
^ZWCmcd("dzRD1-rdix","mcod",81)="      I $D(RIX(rdix)) F i=1:1 S rdix=rdir_""~""_i Q:$D(RIX(rdix))=0  I i=99 BREAK Q"
^ZWCmcd("dzRD1-rdix","mcod",82)="      Q"
^ZWCmcd("dzRD1-top","mcod",7)="top    "
^ZWCmcd("dzRD1-top","mcod",8)="       D RD1  ; RIX(rdix,    RDxg("
^ZWCmcd("dzRD1-top","mcod",9)="       D RD2  ; RIG(rdgp,    RDxg("
^ZWCmcd("dzRD1-top","mcod",10)="       Q"
^ZWCmcd("dzRDMeta","mcod",1)="dzRDMeta ;CKW/ESC i9feb23 rzro3/ ;20230209-99;Read aa-rdirMeta.toi to Rdir(rdir,""rde"")"
^ZWCmcd("dzRDMeta","mcod",2)=";"
^ZWCmcd("dzRDMeta","mcod",3)=";"
^ZWCmcd("dzRDMeta","mcod",4)=";  vs ^ZWD(zrid"
^ZWCmcd("dzRDMeta","mcod",5)=";    ?   ^ZWD(zrid,-1,""rd"",rdir,rdid)  IX-rdir/rdid"
^ZWCmcd("dzRDMeta","mcod",6)=";"
^ZWCmcd("dzRDMeta-Q","mcod",21)=";*"
^ZWCmcd("dzRDMeta-Q","mcod",22)="Q    Q:$Q Q Q:Q="""""
^ZWCmcd("dzRDMeta-Qbug","mcod",23)="Qbug   D qd Q:$Q Q  Q"
^ZWCmcd("dzRDMeta-qd","mcod",24)="qd     D b^dv(""Err ^""_$T(+0),""zrid,Rdir"") Q"
^ZWCmcd("dzRDMeta-qd","mcod",25)=";*"
^ZWCmcd("dzRDMeta-top","mcod",7)="top    NEW Q,RT S Q=""""  "
^ZWCmcd("dzRDMeta-top","mcod",8)="       NEW devr,fil,ri,L,rd,rde,PB,GB"
^ZWCmcd("dzRDMeta-top","mcod",9)="       D IB^dzsr  ;GB, PB/umbr"
^ZWCmcd("dzRDMeta-top","mcod",10)="           ;  /home/kw/km3a/gmsa/rzro3/aa-rdir-meta.toi"
^ZWCmcd("dzRDMeta-top","mcod",11)="       S fil=""aa-rdir-meta.toi"""
^ZWCmcd("dzRDMeta-top","mcod",12)="       S devr=GB_""rzro3/""_fil"
^ZWCmcd("dzRDMeta-top","mcod",13)="       S Q=$$^devRD(devr,,""RT"") I Q'="""" G Qbug"
^ZWCmcd("dzRDMeta-top","mcod",14)="       KILL RDir"
^ZWCmcd("dzRDMeta-top","mcod",15)="       F ri=1:1:RT S L=$G(RT(ri)) I L'="""" DO  ;"
^ZWCmcd("dzRDMeta-top","mcod",16)="         .I L'["":"" Q"
^ZWCmcd("dzRDMeta-top","mcod",17)="         .S rd=$P(L,"":""),rde=$P(L,"":"",2,9)"
^ZWCmcd("dzRDMeta-top","mcod",18)="         .I rd="""" Q"
^ZWCmcd("dzRDMeta-top","mcod",19)="         .S Rdir(rd)=rde"
^ZWCmcd("dzRDMeta-top","mcod",20)="       Goto Q"
^ZWCmcd("dzRZuf","mcod",1)="dzRZuf(zrid,VL);CKW/ESC i30dec22 gmsa./rzro3/ ;20221230-29;Read czro from 0uzro./ dmpjzro"
^ZWCmcd("dzRZuf","mcod",2)="; into ^ZWZ(zrid  selective vn per VL (others unchanged)"
^ZWCmcd("dzRZuf","mcod",3)="; See gmsa./dmdk/ "
^ZWCmcd("dzRZuf","mcod",4)="; Returns  ^ZWZ(zrid,  and zVL list of fields ?  Merged "
^ZWCmcd("dzRZuf-DSP","mcod",54)=";*"
^ZWCmcd("dzRZuf-DSP","mcod",55)="DSP"
^ZWCmcd("dzRZuf-DSP","mcod",56)=""
^ZWCmcd("dzRZuf-OFR","mcod",33)=";*"
^ZWCmcd("dzRZuf-OFR","mcod",34)=";*   * * * * *"
^ZWCmcd("dzRZuf-OFR","mcod",35)=";*  Avoid rdir Dependency on rdevIO/   copy local OFR 30dec22"
^ZWCmcd("dzRZuf-OFR","mcod",36)=";*  OPEN File AND Read if Array given  --- Confusing, Looping ?  $D and Call by Ref"
^ZWCmcd("dzRZuf-OFR","mcod",37)="OFR(devrr,RAo) NEW Q  S Q=""?OFR"" "
^ZWCmcd("dzRZuf-OFR","mcod",38)="       I $G(devrr)="""" S Q=""Bug devrr"" D b^dv(Q,""devrr"") Goto ofrQ"
^ZWCmcd("dzRZuf-OFR","mcod",39)="       CLOSE devrr  ; safety for debugging"
^ZWCmcd("dzRZuf-OFR","mcod",40)="       OPEN devrr:(readonly:exception=""G ofrE1^""_$T(+0))"
^ZWCmcd("dzRZuf-OFR","mcod",41)="       USE devrr:(rewind:exception=""G ofrE2^""_$T(+0))"
^ZWCmcd("dzRZuf-OFR","mcod",42)="       S Q="""""
^ZWCmcd("dzRZuf-ofrE1","mcod",50)=";*        "
^ZWCmcd("dzRZuf-ofrE1","mcod",51)=";*"
^ZWCmcd("dzRZuf-ofrE1","mcod",52)="ofrE1 S Q=""Err Opening file- "" D b^dv(Q,""devrr,exc"") Goto ofrQ"
^ZWCmcd("dzRZuf-ofrE2","mcod",53)="ofrE2 S Q=""Err Reading file- :"" D b^dv(Q,""devrr,ZEOF,ri,X"") Goto ofrQ"
^ZWCmcd("dzRZuf-ofrQ","mcod",43)="ofrQ   I Q="""",$G(RAo)'="""" DO  ;"
^ZWCmcd("dzRZuf-ofrQ","mcod",44)="         .KILL @RAo S @RAo=0"
^ZWCmcd("dzRZuf-ofrQ","mcod",45)="         .F ri=1:1 USE devrr R X S ZEOF=$ZEOF USE $P Q:ZEOF  Q:X=""""  S @RAo@(ri)=X,@RAo=ri"
^ZWCmcd("dzRZuf-ofrQ","mcod",46)="         .;D b^dv(""Log fin ZEOF"",""ZEOF,ri,X"")"
^ZWCmcd("dzRZuf-ofrQ","mcod",47)="       Q:$Q Q   Q "
^ZWCmcd("dzRZuf-ofrQ","mcod",48)=";"
^ZWCmcd("dzRZuf-ofrQ","mcod",49)="       D OFR^devIO  ; non-executable pseudo ref - link copy (avoid dependency)"
^ZWCmcd("dzRZuf-top","mcod",5)=";*  mpj : czro , opt if zrid ^ZWZ(zrid) in this/caller, mbr mGbl g/"
^ZWCmcd("dzRZuf-top","mcod",6)="top   NEW Q S Q="""" I $G(zrid)="""" S Q=""arg zrid"" D bug^dv Q"
^ZWCmcd("dzRZuf-top","mcod",7)="      I $D(^ZWZ(zrid))=0 ;S Q=""^ZWZ(zrid, UNDEF"" D bug^dv Q  ;might be first --"
^ZWCmcd("dzRZuf-top","mcod",8)="      NEW L,vi,vn,val,ri,dh,d12 ; WZ() is not returned, already locals and ^ZWZ"
^ZWCmcd("dzRZuf-top","mcod",9)="      NEW:0 RZ,VNf,VNr"
^ZWCmcd("dzRZuf-top","mcod",10)="      KILL VNf,VNr "
^ZWCmcd("dzRZuf-top","mcod",11)="      S VL=$G(VL)"
^ZWCmcd("dzRZuf-top","mcod",12)="      F vi=1:1:$L(VL,"","") S vn=$P(VL,"","",vi) I vn'="""" DO  ;"
^ZWCmcd("dzRZuf-top","mcod",13)="         .S VNr(vn)=vi ;flag for below"
^ZWCmcd("dzRZuf-top","mcod",14)="         .KILL ^ZWZ(zrid,vn)  ;In case not in devuz, dont leave stray/prior"
^ZWCmcd("dzRZuf-top","mcod",15)="         .S @vn=""""  ;ditto locals, def but null"
^ZWCmcd("dzRZuf-top","mcod",16)="      D III^dzWZuf  ;  zrid : devuz, dh, d12 "
^ZWCmcd("dzRZuf-top","mcod",17)="      S Q=$$OFR(devuz,""RZ"") "
^ZWCmcd("dzRZuf-top","mcod",18)="         I Q'="""" D b^dv(""Err reading czro file"",""czro,zrid,zridA,devuz"") Q"
^ZWCmcd("dzRZuf-top","mcod",19)="      F ri=1:1:RZ S L=$G(RZ(ri)) I L'="""" DO  ;"
^ZWCmcd("dzRZuf-top","mcod",20)="        .I $E(L)=""#"" Q"
^ZWCmcd("dzRZuf-top","mcod",21)="        .I L["" #"" S L=$P(L,"" #"")"
^ZWCmcd("dzRZuf-top","mcod",22)="        .I L["":"" S vn=$P(L,"":""),val=$P(L,"":"",2) I vn'="""" S VNf(vn)=val"
^ZWCmcd("dzRZuf-top","mcod",23)="      ; All vn: returned here in VNf(vn) - not filtered by VL yet"
^ZWCmcd("dzRZuf-top","mcod",24)="      I '$D(VNf) S Q=""No fields returned."""
^ZWCmcd("dzRZuf-top","mcod",25)="      I $D(VNf) DO  ;"
^ZWCmcd("dzRZuf-top","mcod",26)="         .S vn="""""
^ZWCmcd("dzRZuf-top","mcod",27)="         .F  S vn=$O(VNf(vn)) Q:vn=""""  DO  "
^ZWCmcd("dzRZuf-top","mcod",28)="            ..S val=VNf(vn)"
^ZWCmcd("dzRZuf-top","mcod",29)="            ..I $G(VNr(vn)) DO  ;"
^ZWCmcd("dzRZuf-top","mcod",30)="                ...S ^ZWZ(zrid,vn)=val  ; Filtered, local and ^ZWZ(zrid"
^ZWCmcd("dzRZuf-top","mcod",31)="                ...S @vn=val"
^ZWCmcd("dzRZuf-top","mcod",32)="      Q:$Q Q  Q:Q=""""  D b^dv(""Err ^""_$T(+0),""Q,zrid"") Q      "
^ZWCmcd("dzRcfg","mcod",1)="dzRcfg(impj) ;CKW/ESC i10nov22 gmsa/./ rzro3/ ;20221110-79;Read zroCfg File: izro"
^ZWCmcd("dzRcfg","mcod",2)=";"
^ZWCmcd("dzRcfg","mcod",3)=";      : zro2  replacement for $zro izro"
^ZWCmcd("dzRcfg","mcod",4)="       I $G(impj)="""" D bug^dv(""arg impj ~kwmpj"",""impj"")"
^ZWCmcd("dzRcfg","mcod",5)=";"
^ZWCmcd("dzRcfg-DS","mcod",33)=";*  // line  Requires  PB,SB,GB,MB  "
^ZWCmcd("dzRcfg-DS","mcod",34)="DS(X)  ;"
^ZWCmcd("dzRcfg-DS","mcod",35)="       I X[""#"" S C=$P(X,""#"",2,9),X=$P(X,""#"")"
^ZWCmcd("dzRcfg-DS","mcod",36)="       S X=$$DSP($P(X,""//"",2))"
^ZWCmcd("dzRcfg-DS","mcod",37)="       F xi=1:1:$L(X,"" "") DO  ;"
^ZWCmcd("dzRcfg-DS","mcod",38)="         .S XP=$P(X,"" "",xi) "
^ZWCmcd("dzRcfg-DS","mcod",39)="         .U $P W:$X ! W ""Lp:"",xi,"" "",ri,"" -'"",XP,""' "",!,zro2,!         "
^ZWCmcd("dzRcfg-DS","mcod",40)="         .I XP="""" Q"
^ZWCmcd("dzRcfg-DS","mcod",41)="         .I XP=""ou"" S zro2=zro2_"") ""_PB_""ou("" Q"
^ZWCmcd("dzRcfg-DS","mcod",42)="         .I XP[""GB"" S BB=GB Q"
^ZWCmcd("dzRcfg-DS","mcod",43)="         .I XP=""MB"" S BB=MB Q"
^ZWCmcd("dzRcfg-DS","mcod",44)="         .I XP=""PB"" S BB=PB Q"
^ZWCmcd("dzRcfg-DS","mcod",45)="         .I XP[""BB"" B  S BB=$P(XP,""BB:"",2) D b^dv(""Log BB"",""BB,xi,XP,X,ri"") Q"
^ZWCmcd("dzRcfg-DS","mcod",46)="         .D b^dv2(""Err ?XP in // line"",""XP,xi,X,zro2,BB"")"
^ZWCmcd("dzRcfg-DS","mcod",47)="       Q"
^ZWCmcd("dzRcfg-DSP","mcod",96)=";*"
^ZWCmcd("dzRcfg-DSP","mcod",97)=";*  Copy from gmsa/ rd2c/ ^dv2c to avoid dependencies"
^ZWCmcd("dzRcfg-DSP","mcod",98)=";*  Replace all dbl spaces (or more) with single, and remove starting/ending"
^ZWCmcd("dzRcfg-DSP","mcod",99)="DSP(X) NEW i I $G(X)="""" Q X"
^ZWCmcd("dzRcfg-DSP","mcod",100)="    S X=$TR(X,$C(9)_$C(10)_$C(13),""   "")  ;replace tab,lf,cr with space"
^ZWCmcd("dzRcfg-DSP","mcod",101)="    F i=0:1 Q:X'[""  ""  S X=$P(X,""  "")_"" ""_$P(X,""  "",2,9999)"
^ZWCmcd("dzRcfg-DSP","mcod",102)=" Q $$TSP(X)"
^ZWCmcd("dzRcfg-EO","mcod",66)=";*"
^ZWCmcd("dzRcfg-EO","mcod",67)="EO     U $P S Q=""Err Opening dev"" "
^ZWCmcd("dzRcfg-EO","mcod",68)="       W:$X ! W $ZS,!,$ZE,!"
^ZWCmcd("dzRcfg-EO","mcod",69)="       D b^dv(Q,""Q,dev,PB"")"
^ZWCmcd("dzRcfg-EO","mcod",70)="       Q Q"
^ZWCmcd("dzRcfg-EU","mcod",71)="EU     U $P S Q=""Err USEing dev"" D b^dv(Q,""Q,dev,ZEOF,ri,X"")"
^ZWCmcd("dzRcfg-EU","mcod",72)="       Q Q"
^ZWCmcd("dzRcfg-Q","mcod",29)="Q      Q:$Q Q Q:Q=""""  D qz Q"
^ZWCmcd("dzRcfg-Qbug","mcod",30)="Qbug   D qz Q:$Q Q Q"
^ZWCmcd("dzRcfg-RD","mcod",54)=";*"
^ZWCmcd("dzRcfg-RD","mcod",55)="RD(dev)  NEW Q S Q=""""   NEW RON,X"
^ZWCmcd("dzRcfg-RD","mcod",56)="       CLOSE dev ; safety/debug repitition"
^ZWCmcd("dzRcfg-RD","mcod",57)="       OPEN dev:(readonly:exception=""G EO^""_$T(+0))"
^ZWCmcd("dzRcfg-RD","mcod",58)="       USE dev:(rewind:exception=""G EU^""_$T(+0))"
^ZWCmcd("dzRcfg-RD","mcod",59)="       S RON=0,rj=0 F ri=1:1 USE dev R X S Zeof=$ZEOF USE $P Q:Zeof  Q:X[""***""  DO  ;"
^ZWCmcd("dzRcfg-RD","mcod",60)="         .I X[""#"" S X=$P(X,""#"") ;ignore comments"
^ZWCmcd("dzRcfg-RD","mcod",61)="         .I X="""" Q"
^ZWCmcd("dzRcfg-RD","mcod",62)="         .I X[""//"" S RON=1  ;turn on parsing"
^ZWCmcd("dzRcfg-RD","mcod",63)="         .Q:'RON"
^ZWCmcd("dzRcfg-RD","mcod",64)="         .S rj=rj+1,RD(rj)=X,RD=rj"
^ZWCmcd("dzRcfg-RD","mcod",65)="       Q Q"
^ZWCmcd("dzRcfg-TSP","mcod",103)=";*  Remove start and end spaces (only)"
^ZWCmcd("dzRcfg-TSP","mcod",104)="TSP(X) NEW i S X=$TR(X,$C(9)_$C(10)_$C(13),""   "")  ;replace tab,lf,cr with space"
^ZWCmcd("dzRcfg-TSP","mcod",105)=" I $E($G(X))="" "" F i=1:1:$L(X) I $E(X,i)'="" "" S X=$E(X,i,999) Q"
^ZWCmcd("dzRcfg-TSP","mcod",106)=" I $E(X,$L(X))="" "" F i=$L(X):-1:1 I $E(X,i)'="" "" S X=$E(X,1,i) Q"
^ZWCmcd("dzRcfg-TSP","mcod",107)=" I X="" "" S X=""""  ; Funny case all spaces  vs end i=0 second line ?"
^ZWCmcd("dzRcfg-TSP","mcod",108)=" Q X"
^ZWCmcd("dzRcfg-Wzdir","mcod",48)=";*"
^ZWCmcd("dzRcfg-Wzdir","mcod",49)="Wzdir  W !!,""zdir(oi,si)- "",!"
^ZWCmcd("dzRcfg-Wzdir","mcod",50)="       I $D(zdir)=0 W ""zdir() UNDEF."""
^ZWCmcd("dzRcfg-Wzdir","mcod",51)="       E  zwr zdir"
^ZWCmcd("dzRcfg-Wzdir","mcod",52)="       W !"
^ZWCmcd("dzRcfg-Wzdir","mcod",53)="       Q"
^ZWCmcd("dzRcfg-cb","mcod",86)="cb       I CB="""" S CB=""/home/kw/km3a/umad/"" B  ;"
^ZWCmcd("dzRcfg-cb","mcod",87)="         I dist="""" D b^dv2(""Err dist"",""dist,CB"") Q"
^ZWCmcd("dzRcfg-d2","mcod",88)="d2       I $E(CB,$L(CB))'=""/"" S CB=CB_""/"""
^ZWCmcd("dzRcfg-d2","mcod",89)="       S nsl=$L(CB,""/"")"
^ZWCmcd("dzRcfg-d2","mcod",90)="       S SB=$P(CB,""/"",1,nsl-2)"
^ZWCmcd("dzRcfg-d2","mcod",91)="       S kwmpj=$P(CB,""/"",nsl-1)"
^ZWCmcd("dzRcfg-d2","mcod",92)="       S kwsys=$P(CB,""/"",nsl-2)"
^ZWCmcd("dzRcfg-d2","mcod",93)="       S PB=CB"
^ZWCmcd("dzRcfg-d2","mcod",94)="       Q"
^ZWCmcd("dzRcfg-d2","mcod",95)=""
^ZWCmcd("dzRcfg-devIB","mcod",82)=";*"
^ZWCmcd("dzRcfg-devIB","mcod",83)=";*  sub for ^devIB til stabilized"
^ZWCmcd("dzRcfg-devIB","mcod",84)="devIB  S CB=$ZTRNLNM(""PWD"")"
^ZWCmcd("dzRcfg-devIB","mcod",85)="       S dist=$ZTRNLNM(""ydb_dist"")"
^ZWCmcd("dzRcfg-devIBmpj","mcod",73)=";*   :  PB, GB, MB, W2B"
^ZWCmcd("dzRcfg-devIBmpj","mcod",74)="devIBmpj(mpj) S kwmpj=mpj"
^ZWCmcd("dzRcfg-devIBmpj","mcod",75)="       S SB=""/home/kw/km3a/"""
^ZWCmcd("dzRcfg-devIBmpj","mcod",76)="       S PB=SB_kwmpj_""/"""
^ZWCmcd("dzRcfg-devIBmpj","mcod",77)="       S GB=SB_""gmsa/"""
^ZWCmcd("dzRcfg-devIBmpj","mcod",78)="       S MB=SB_""gmma/"""
^ZWCmcd("dzRcfg-devIBmpj","mcod",79)="       S W2B=PB_""ww2x"""
^ZWCmcd("dzRcfg-devIBmpj","mcod",80)="       S dist=$P($zro,""("")"
^ZWCmcd("dzRcfg-devIBmpj","mcod",81)="       Q"
^ZWCmcd("dzRcfg-qz","mcod",31)="qz     D b^dv(""Err ^""_$T(+0),""Q,rdL,BB"")"
^ZWCmcd("dzRcfg-qz","mcod",32)="       Q"
^ZWCmcd("dzRcfg-szro","mcod",25)="szro   ;S Q=$$^dzroz(zro2) I Q'="""" G Q"
^ZWCmcd("dzRcfg-szro","mcod",26)="       ;D Wzdir"
^ZWCmcd("dzRcfg-szro","mcod",27)="       S izro=zro2"
^ZWCmcd("dzRcfg-szro","mcod",28)="       ;S $zro=zro2 leave to caller to set $zro"
^ZWCmcd("dzRcfg-top","mcod",6)="top    NEW:0 BB,PB,SB,GB,MB,W2B,fil,dev,RON,X,Zeof,CB,dist"
^ZWCmcd("dzRcfg-top","mcod",7)="       NEW:0 zro2"
^ZWCmcd("dzRcfg-top","mcod",8)="       D devIBmpj(impj)  ; PB,SB,GB,MB"
^ZWCmcd("dzRcfg-top","mcod",9)="       S fil=""zroCfg.mdk"""
^ZWCmcd("dzRcfg-top","mcod",10)="       S dev=PB_""cfg/""_fil"
^ZWCmcd("dzRcfg-top","mcod",11)="       S Q=$$RD(dev)"
^ZWCmcd("dzRcfg-top","mcod",12)="       S zro2=dist_"" ""_PB_""o("""
^ZWCmcd("dzRcfg-top","mcod",13)="       S BB=PB  ;default before any // lines  "
^ZWCmcd("dzRcfg-top","mcod",14)="       D ^dv(""  * * * Log Rcfg "",""fil,PB,BB,dev,RD"")       "
^ZWCmcd("dzRcfg-top","mcod",15)="       ;"
^ZWCmcd("dzRcfg-top","mcod",16)="       F ri=1:1:RD S X0=RD(ri) DO  ;"
^ZWCmcd("dzRcfg-top","mcod",17)="         .S X=$$DSP(X0)"
^ZWCmcd("dzRcfg-top","mcod",18)="         .I X[""//"" D DS(X) Q  ; Set BB         "
^ZWCmcd("dzRcfg-top","mcod",19)="         .S rdir=$P(X,"" "")"
^ZWCmcd("dzRcfg-top","mcod",20)="         .I rdir="""" Q"
^ZWCmcd("dzRcfg-top","mcod",21)="         .W:$X ! W ""Add "",BB,""  "",rdir,!"
^ZWCmcd("dzRcfg-top","mcod",22)="         .S zro2=zro2_BB_rdir_"" """
^ZWCmcd("dzRcfg-top","mcod",23)="       S zro2=zro2_"") ""_dist_""/libyottadb.so ""_dist_""/libyottadbutil.so"""
^ZWCmcd("dzRcfg-top","mcod",24)="       D ^dv(""Log zro2 done"",""zro2"")"
^ZWCmcd("dzTest","mcod",1)="dzTest   ;CKW/ESC  i27aug19 gmsa/ rd2zro/ ; 20190827-17 ; Test ^dz*  rd2zro"
^ZWCmcd("dzTest","mcod",2)=";    replaces all in rzro/  ^dz* but diff names, Breaking changes to callers"
^ZWCmcd("dzTest","mcod",3)=";    also rdv/  ^dvzl, ^dvstk  now in rd2vl/  with ^dv"
^ZWCmcd("dzTest","mcod",4)=";"
^ZWCmcd("dzTest","mcod",5)=";"
^ZWCmcd("dzTest","mcod",6)=""
^ZWCmcd("dzTest-T","mcod",14)=";*"
^ZWCmcd("dzTest-T","mcod",15)="T(Qt) S Qt=$G(Qt)  NEW Q"
^ZWCmcd("dzTest-T","mcod",16)="      S Q=""TestFail"""
^ZWCmcd("dzTest-T","mcod",17)="      ;S Q="""" ;Test Pass"
^ZWCmcd("dzTest-T","mcod",18)="       I Q'="""" S Qt=Qt+1_Q"
^ZWCmcd("dzTest-T","mcod",19)="      Q Qt"
^ZWCmcd("dzTest-T","mcod",20)="      "
^ZWCmcd("dzTest-TAll","mcod",7)=";*    tdz.  in dzMenu, ^guMenu"
^ZWCmcd("dzTest-TAll","mcod",8)="TAll  NEW Qs,Q S Qs="""""
^ZWCmcd("dzTest-TAll","mcod",9)="      S Q=$$T(Qs)"
^ZWCmcd("dzTest-TAll","mcod",10)="      USE $P W:$X ! W ""Testing ^gu*  gmgu All-  TAll^guTES"""
^ZWCmcd("dzTest-TAll","mcod",11)="      I Q'="""" W ""Failed: "",Q,!"
^ZWCmcd("dzTest-TAll","mcod",12)="      I Q=""""  W ""Passed."",!"
^ZWCmcd("dzTest-TAll","mcod",13)="      Q"
^ZWCmcd("dzVLog","mcod",1)="dzVLog  ;CKW/ESC i1jun22 gmsa/ rzro3/ ;20220601-33;Save mpj vals file"
^ZWCmcd("dzVLog","mcod",2)=";"
^ZWCmcd("dzVLog","mcod",3)=";"
^ZWCmcd("dzVLog","mcod",4)=";"
^ZWCmcd("dzVLog-OFW","mcod",45)=";*  Copy from ^devIO  - prevent dependencies yet"
^ZWCmcd("dzVLog-OFW","mcod",46)=";*  opt 2nd arg Array to write and close"
^ZWCmcd("dzVLog-OFW","mcod",47)="OFW(devww) NEW Q S Q=""?OFW"""
^ZWCmcd("dzVLog-OFW","mcod",48)="       I $G(devww)="""" S Q=""Bug devww "" D b^dv(Q,""devww"") Q Q"
^ZWCmcd("dzVLog-OFW","mcod",49)="       CLOSE devww  ; debug safety"
^ZWCmcd("dzVLog-OFW","mcod",50)="       ; S x=$ZSEARCH(devww) I x'="""" S Q=""File Exists "" D b^dv(Q,""x,devww"")  ; Q Q"
^ZWCmcd("dzVLog-OFW","mcod",51)="       OPEN devww:(newversion:exception=""G ofwE1^""_$T(+0))"
^ZWCmcd("dzVLog-OFW","mcod",52)="       USE devww:(exception=""G ofwE2^""_$T(+0))"
^ZWCmcd("dzVLog-OFW","mcod",53)="       S Q=""""  ; falls thru"
^ZWCmcd("dzVLog-WEV","mcod",40)="WEV(VFL) ;"
^ZWCmcd("dzVLog-WEV","mcod",41)="        F vi=1:1:$L(VFL,"","") S env=$P(VFL,"","",vi),V=$ZTRNLNM(env) DO  ;"
^ZWCmcd("dzVLog-WEV","mcod",42)="          .W:$X !"
^ZWCmcd("dzVLog-WEV","mcod",43)="          .W env,"":"",V,!"
^ZWCmcd("dzVLog-WEV","mcod",44)="        Q"
^ZWCmcd("dzVLog-WLog","mcod",23)=";*"
^ZWCmcd("dzVLog-WLog","mcod",24)="WLog    ;"
^ZWCmcd("dzVLog-WLog","mcod",25)="        S Q=$$OFW(devJlog) I Q'="""" BREAK  BREAK  Q"
^ZWCmcd("dzVLog-WLog","mcod",26)="        USE devJlog"
^ZWCmcd("dzVLog-WLog","mcod",27)="        W ""#!"",!"
^ZWCmcd("dzVLog-WLog","mcod",28)="        W !!!,""#   "",devJlog,!!"
^ZWCmcd("dzVLog-WLog","mcod",29)="        S wjFL=""mpj,LUser,kwsys,zro"" D WVL(wjFL)"
^ZWCmcd("dzVLog-WLog","mcod",30)="        S envVL=""ydb_dist,ydb_routines,ydb_mgbdir,SB,PB,GB,MB""  D WEV(envVL)"
^ZWCmcd("dzVLog-WLog","mcod",31)="        W !"
^ZWCmcd("dzVLog-WLog","mcod",32)="        CLOSE devJlog"
^ZWCmcd("dzVLog-WLog","mcod",33)="        USE $P"
^ZWCmcd("dzVLog-WLog","mcod",34)="        Q"
^ZWCmcd("dzVLog-WVL","mcod",35)=";*"
^ZWCmcd("dzVLog-WVL","mcod",36)="WVL(VFL) ;"
^ZWCmcd("dzVLog-WVL","mcod",37)="        W:$X !"
^ZWCmcd("dzVLog-WVL","mcod",38)="        F vi=1:1:$L(VFL,"","") S vn=$P(VFL,"","",vi) W vn,"":"",@vn,!"
^ZWCmcd("dzVLog-WVL","mcod",39)="        Q"
^ZWCmcd("dzVLog-ofwE1","mcod",56)=";*"
^ZWCmcd("dzVLog-ofwE1","mcod",57)="ofwE1  S Q=""Error Opening file to write- "" D b^dv(Q,""devww,Q"") CLOSE devww"
^ZWCmcd("dzVLog-ofwE1","mcod",58)="       Q Q"
^ZWCmcd("dzVLog-ofwE1","mcod",59)="       "
^ZWCmcd("dzVLog-ofwQ","mcod",54)="ofwQ   ;"
^ZWCmcd("dzVLog-ofwQ","mcod",55)="       Q Q"
^ZWCmcd("dzVLog-top","mcod",5)="top     S zro=$zro"
^ZWCmcd("dzVLog-top","mcod",6)="        D zroxmpj(zro)"
^ZWCmcd("dzVLog-top","mcod",7)="        D WLog"
^ZWCmcd("dzVLog-top","mcod",8)="        Q"
^ZWCmcd("dzVLog-zroxmpj","mcod",9)=";*"
^ZWCmcd("dzVLog-zroxmpj","mcod",10)=";*"
^ZWCmcd("dzVLog-zroxmpj","mcod",11)="zroxmpj(zro)"
^ZWCmcd("dzVLog-zroxmpj","mcod",12)="        S O2=$P(zro,"" "",2)"
^ZWCmcd("dzVLog-zroxmpj","mcod",13)="        S S2=$P(O2,""("")"
^ZWCmcd("dzVLog-zroxmpj","mcod",14)="        I $E(S2)'=""/"" BREAK"
^ZWCmcd("dzVLog-zroxmpj","mcod",15)="        S nsl=$L(S2,""/"")"
^ZWCmcd("dzVLog-zroxmpj","mcod",16)="        S LUser=$P(S2,""/"",3)"
^ZWCmcd("dzVLog-zroxmpj","mcod",17)="        S kwsys=$P(S2,""/"",4)"
^ZWCmcd("dzVLog-zroxmpj","mcod",18)="        S mpj=$P(S2,""/"",5)"
^ZWCmcd("dzVLog-zroxmpj","mcod",19)="        S devJlog=""/home/""_LUser_""/.akw/xmpj/""_mpj_"".txt"""
^ZWCmcd("dzVLog-zroxmpj","mcod",20)="        USE $P W:$X ! W "" mpj:"",mpj,""  -> "",devJlog,!"
^ZWCmcd("dzVLog-zroxmpj","mcod",21)="        ;"
^ZWCmcd("dzVLog-zroxmpj","mcod",22)="        Q"
^ZWCmcd("dzWZuf","mcod",1)="dzWZuf(zrid)  ;CKW/ESC i29dec22 gmsa./ rzro3/ ;20220=1229-41;Write ^ZWZ(zrid to file(zrid)"
^ZWCmcd("dzWZuf","mcod",2)=";   to common file in 0uzro./ dzrid/"
^ZWCmcd("dzWZuf","mcod",3)=";"
^ZWCmcd("dzWZuf","mcod",4)=";  proto: mad umad alias mam, ^madgoMenu  zrid:mad, mpj:umad"
^ZWCmcd("dzWZuf","mcod",5)=";  proto: 1zro devy-fcf3/cfg/ zrid:cf  fcf3  cf cf.sh cfa cfMenu "
^ZWCmcd("dzWZuf","mcod",6)=";       mbr cf. KAcf^mwMa  "
^ZWCmcd("dzWZuf","mcod",7)=";  proto: fin3./ 1zro is devy-  ^fina ^dzWZuf  save for mbr"
^ZWCmcd("dzWZuf","mcod",8)=";"
^ZWCmcd("dzWZuf","mcod",9)=";  zrid Filename key and ^ZWZ(zrid"
^ZWCmcd("dzWZuf","mcod",10)=";  File Format:  #E1 comment,  var:value  "
^ZWCmcd("dzWZuf","mcod",11)=";  var in { zzro,czro,d12/dh, zrid also in filename, mpjDir, mpjAl, mpjRou, kwsys, W2B}"
^ZWCmcd("dzWZuf","mcod",12)=";  key here is zrid (not mpj as with ^dzWzro)"
^ZWCmcd("dzWZuf","mcod",13)=";  zrid:   ^ZWZ  mbr system id"
^ZWCmcd("dzWZuf","mcod",14)=";  d12: d12 timestamp"
^ZWCmcd("dzWZuf","mcod",15)=";  dh:  $H timestamp"
^ZWCmcd("dzWZuf","mcod",16)=";"
^ZWCmcd("dzWZuf-III","mcod",33)=";*  kwmpj, kwsys : devuz, dh"
^ZWCmcd("dzWZuf-III","mcod",34)=";RefBy ^dzRzro also"
^ZWCmcd("dzWZuf-III","mcod",35)=";*  zrid : devuz, d12, dh"
^ZWCmcd("dzWZuf-III","mcod",36)="III    NEW zFil,zFol"
^ZWCmcd("dzWZuf-III","mcod",37)="       S zFil=zrid_""-ZWZzrid.mdk"""
^ZWCmcd("dzWZuf-III","mcod",38)="       S zFol=""0uzro/dzrid/"""
^ZWCmcd("dzWZuf-III","mcod",39)="       S devuz=""/home/kw/km3a/""_zFol_zFil"
^ZWCmcd("dzWZuf-III","mcod",40)="       S dh=$H,d12=$ZD(dh,""YYYYMMDD2460"")"
^ZWCmcd("dzWZuf-III","mcod",41)="       Q"
^ZWCmcd("dzWZuf-OFW","mcod",51)=";*  * * * * *       "
^ZWCmcd("dzWZuf-OFW","mcod",52)=";*  Avoid rdir Dependency on rdevIO/   copy local OFR 30dec22"
^ZWCmcd("dzWZuf-OFW","mcod",53)=";*  opt 2nd arg Array to write and close"
^ZWCmcd("dzWZuf-OFW","mcod",54)="OFW(devww,WER) NEW Q S Q=""?OFW"""
^ZWCmcd("dzWZuf-OFW","mcod",55)="       I $G(devww)="""" S Q=""Bug devww "" D b^dv(Q,""devww"") Q Q"
^ZWCmcd("dzWZuf-OFW","mcod",56)="       CLOSE devww  ; debug safety"
^ZWCmcd("dzWZuf-OFW","mcod",57)="       ; S x=$ZSEARCH(devww) I x'="""" S Q=""File Exists "" D b^dv(Q,""x,devww"")  ; Q Q"
^ZWCmcd("dzWZuf-OFW","mcod",58)="       OPEN devww:(newversion:exception=""G ofwE1^""_$T(+0))"
^ZWCmcd("dzWZuf-OFW","mcod",59)="       USE devww:(exception=""G ofwE2^""_$T(+0))"
^ZWCmcd("dzWZuf-OFW","mcod",60)="       S Q=""""  ; falls thru"
^ZWCmcd("dzWZuf-Q","mcod",27)=";*"
^ZWCmcd("dzWZuf-Q","mcod",28)=";* Shared exit"
^ZWCmcd("dzWZuf-Q","mcod",29)="Q     Q:$Q Q I Q="""" Q"
^ZWCmcd("dzWZuf-Qbug","mcod",30)="Qbug  D qd  Q:$Q Q  Q"
^ZWCmcd("dzWZuf-WVL","mcod",42)=";*  to devuz"
^ZWCmcd("dzWZuf-WVL","mcod",43)="WVL    KILL WZ MERGE WZ=^ZWZ(zrid)"
^ZWCmcd("dzWZuf-WVL","mcod",44)="       S vn=0 F vi=1:1 S vn=$O(WZ(vn)) Q:vn=""""  DO  "
^ZWCmcd("dzWZuf-WVL","mcod",45)="         .S val=$G(WZ(vn))"
^ZWCmcd("dzWZuf-WVL","mcod",46)="         .I val="""" S val=""Null."""
^ZWCmcd("dzWZuf-WVL","mcod",47)="         .W:$X ! W vn,"":"",val,!"
^ZWCmcd("dzWZuf-WVL","mcod",48)="       W:$X ! W ""d12:"",d12,!"
^ZWCmcd("dzWZuf-WVL","mcod",49)="       W !!  ;end with blank lines"
^ZWCmcd("dzWZuf-WVL","mcod",50)="       Q"
^ZWCmcd("dzWZuf-ofwE1","mcod",63)=";*"
^ZWCmcd("dzWZuf-ofwE1","mcod",64)="ofwE1  S Q=""Error Opening file to write- "" D b^dv(Q,""devww,Q"") CLOSE devww"
^ZWCmcd("dzWZuf-ofwE1","mcod",65)="       Q:$Q Q Q"
^ZWCmcd("dzWZuf-ofwQ","mcod",61)="ofwQ   ;I $D(WER)=11 D WWER"
^ZWCmcd("dzWZuf-ofwQ","mcod",62)="       Q:$Q Q Q"
^ZWCmcd("dzWZuf-qd","mcod",31)="qd    D ^dvstk,b^dv(""Err ^""_$T(+0),""Q,zrid,czro,kwsys,kwmpj,mpjDir,mpjAlias"")"
^ZWCmcd("dzWZuf-qd","mcod",32)="      Q"
^ZWCmcd("dzWZuf-top","mcod",17)="top    NEW Q S Q="""" I $G(zrid)="""" S Q=""arg zrid ^""_$T(+0) Goto Qbug"
^ZWCmcd("dzWZuf-top","mcod",18)="       I $D(^ZWZ(zrid))=0 S Q=""Err ZWZ(zrid UNDEF"" G Qbug"
^ZWCmcd("dzWZuf-top","mcod",19)="       NEW zzro,mpjDir,mpjAlias,mpjSRou,kwsys,kwmpj,dh,d12"
^ZWCmcd("dzWZuf-top","mcod",20)="       D III  ;devuz, dh, d12"
^ZWCmcd("dzWZuf-top","mcod",21)="       D OFW(devuz)  ;local copy"
^ZWCmcd("dzWZuf-top","mcod",22)="       USE devuz W ""# "",devuz,""  zrid  $zro log file-"",!"
^ZWCmcd("dzWZuf-top","mcod",23)="       D WVL"
^ZWCmcd("dzWZuf-top","mcod",24)="       CLOSE devuz"
^ZWCmcd("dzWZuf-top","mcod",25)="       ;USE $P W:$X ! W ""Completed "",devuz,!!"
^ZWCmcd("dzWZuf-top","mcod",26)="       Goto Q"
^ZWCmcd("dzXIzro","mcod",1)="dzXIzro ;CKW/ESC i11nov22 gmsa./ rzro3/ ;20221111-03;Find all rdir,in PB,GB,MB index BB"
^ZWCmcd("dzXIzro","mcod",2)=";? not debugged     zl. in madMenu"
^ZWCmcd("dzXIzro","mcod",3)=";"
^ZWCmcd("dzXIzro","mcod",4)=";  ; : RDx(rdir)=BB"
^ZWCmcd("dzXIzro","mcod",5)=";"
^ZWCmcd("dzXIzro-III","mcod",11)=";*"
^ZWCmcd("dzXIzro-III","mcod",12)="III    KILL RDx"
^ZWCmcd("dzXIzro-III","mcod",13)="       D devIB  ; $PWD : SB, PB, GB, MB  local sr !"
^ZWCmcd("dzXIzro-III","mcod",14)="       D XR(PB),XR(GB),XR(MB)"
^ZWCmcd("dzXIzro-III","mcod",15)="       Q"
^ZWCmcd("dzXIzro-XR","mcod",16)=";*  Find rdir in BB"
^ZWCmcd("dzXIzro-XR","mcod",17)="XR(BB)  ;"
^ZWCmcd("dzXIzro-XR","mcod",18)="       S durl=$ZPARSE(BB)"
^ZWCmcd("dzXIzro-XR","mcod",19)="         I durl="""" D b^dv(""Err durl/BB"",""BB"") Q"
^ZWCmcd("dzXIzro-XR","mcod",20)="       S x=$ZSEARCH(""^X"")  ;clear ptr"
^ZWCmcd("dzXIzro-XR","mcod",21)="       S rdsch=BB_""r*/"""
^ZWCmcd("dzXIzro-XR","mcod",22)="       F di=0:1 S durl=$ZSEARCH(rdsch) Q:durl=""""  DO  ;"
^ZWCmcd("dzXIzro-XR","mcod",23)="         .S nsl=$L(durl,""/""),rdir=$P(durl,""/"",nsl)"
^ZWCmcd("dzXIzro-XR","mcod",24)="         .I rdir="""" D b^dv(""Err rdir from durl"",""rdir,durl,BB"") Q"
^ZWCmcd("dzXIzro-XR","mcod",25)="         .S B0=$G(RDx(rdir)) I B0'="""",rdir'=""r"" D b^dv(""rdir dupl in other base?"",""rdir,B0,BB"")"
^ZWCmcd("dzXIzro-XR","mcod",26)="         .S RDx(rdir)=BB  ; last overrides"
^ZWCmcd("dzXIzro-XR","mcod",27)="       Q"
^ZWCmcd("dzXIzro-devIB","mcod",28)=";*   $PWB~PB SB, GB, MB, MBR"
^ZWCmcd("dzXIzro-devIB","mcod",29)="devIB  S PB=$ZTRNLNM(""PWD"")_""/"""
^ZWCmcd("dzXIzro-devIB","mcod",30)="       S SB=$P(PB,""/"",1,4)_""/"""
^ZWCmcd("dzXIzro-devIB","mcod",31)="       S GB=SB_""gmsa/"""
^ZWCmcd("dzXIzro-devIB","mcod",32)="       S MB=SB_""gmma/"""
^ZWCmcd("dzXIzro-devIB","mcod",33)="       S MBR=SB_""umbr/"""
^ZWCmcd("dzXIzro-devIB","mcod",34)="       Q"
^ZWCmcd("dzXIzro-top","mcod",6)="top    NEW x,durl,murl,rdsch,di,nsl,B0,BB  "
^ZWCmcd("dzXIzro-top","mcod",7)="       D III"
^ZWCmcd("dzXIzro-top","mcod",8)="       W !!,""RDx  rdir to *B -"",!"
^ZWCmcd("dzXIzro-top","mcod",9)="       zwr RDx"
^ZWCmcd("dzXIzro-top","mcod",10)="       Q"
^ZWCmcd("dzZlog","mcod",1)="dzZlog(M,VL)  ;CKW/ESC gmma/ rd2zro/   ; 20220509-71 ; Write menu/start Log entry"
^ZWCmcd("dzZlog","mcod",2)=";"
^ZWCmcd("dzZlog","mcod",3)=";"
^ZWCmcd("dzZlog","mcod",4)=";RefBy:  "
^ZWCmcd("dzZlog-WVL","mcod",14)=";*"
^ZWCmcd("dzZlog-WVL","mcod",15)="WVL      USE devZLog W VL,!"
^ZWCmcd("dzZlog-WVL","mcod",16)="         F vi=1:1:$L(VL,"","") S vn=$P(VL,"","",vi) I vn'="""" DO"
^ZWCmcd("dzZlog-WVL","mcod",17)="           .S val=$G(@vn),D=$D(@vn)"
^ZWCmcd("dzZlog-WVL","mcod",18)="           .I D#2=0 S val=""UNDEF."""
^ZWCmcd("dzZlog-WVL","mcod",19)="           .I val="""" S val=""Null."""
^ZWCmcd("dzZlog-WVL","mcod",20)="           .I D>9 S val=val_"" and Array."""
^ZWCmcd("dzZlog-WVL","mcod",21)="           .W ""  "",vn,"": '"",val,""'  "",!"
^ZWCmcd("dzZlog-WVL","mcod",22)="         Q"
^ZWCmcd("dzZlog-menu","mcod",5)="menu     D IB^dzIMG   ; PB, SB, "
^ZWCmcd("dzZlog-menu","mcod",6)="         S devZLog=PB_""/dlog/MenuStart-Log.txt"""
^ZWCmcd("dzZlog-menu","mcod",7)="         S Ln=$ZD($H,""YYYY-MM-DD-24:60  "")_M"
^ZWCmcd("dzZlog-menu","mcod",8)="         OPEN devZLog:(APPEND)  ; puts ptr at end of file"
^ZWCmcd("dzZlog-menu","mcod",9)="         USE devZLog W:$X ! W Ln,!"
^ZWCmcd("dzZlog-menu","mcod",10)="         I $G(VL)'="""" D WVL"
^ZWCmcd("dzZlog-menu","mcod",11)="         CLOSE devZLog"
^ZWCmcd("dzZlog-menu","mcod",12)="         USE $P"
^ZWCmcd("dzZlog-menu","mcod",13)="         Q"
^ZWCmcd("dzZlog-zro","mcod",23)=";*  Log $zro from Starter usually"
^ZWCmcd("dzZlog-zro","mcod",24)="zro(mpj) NEW PB,SB,GB,nsl"
^ZWCmcd("dzZlog-zro","mcod",25)="         I '$D(^ZWmpj) Q"
^ZWCmcd("dzZlog-zro","mcod",26)="         I $T(^devIB)="""" Q"
^ZWCmcd("dzZlog-zro","mcod",27)="         I $G(mpj)="""" DO  ;"
^ZWCmcd("dzZlog-zro","mcod",28)="           .D ^devIB ; :mpj from $zro"
^ZWCmcd("dzZlog-zro","mcod",29)="           .I $G(mpj)="""" S nsl=$L(PB,""/""),mpj=$P(PB,""/"",nsl-2)"
^ZWCmcd("dzZlog-zro","mcod",30)="         I $G(mpj)="""" Q"
^ZWCmcd("dzZlog-zro","mcod",31)="         S ^ZWmpj(mpj,""zro"")=zro"
^ZWCmcd("dzZlog-zro","mcod",32)="         Q"
^ZWCmcd("dzZlog-zro","mcod",33)=";*         "
^ZWCmcd("dzcomp","mcod",1)="dzcomp(zro)  ;CKW/ESC i7sep20 gmsa/ rd2zro/ ; 20200907-80 ; Compile mFil *.m via Lcmd mumps ^mFil"
^ZWCmcd("dzcomp","mcod",2)=";"
^ZWCmcd("dzcomp","mcod",3)=";$$Q  or not   sr zl5  from ^dvzl"
^ZWCmcd("dzcomp-A","mcod",4)="A       D ^dzroz($G(zro))  ; zro : zdir(oi,si)"
^ZWCmcd("dzcomp-A","mcod",5)="        NEW Q"
^ZWCmcd("dzcomp-A","mcod",6)="        S Q=$$zl5  ; zdir :  compile mumps *.m for sdir's"
^ZWCmcd("dzcomp-A","mcod",7)="        Q:$Q Q"
^ZWCmcd("dzcomp-A","mcod",8)="        Q"
^ZWCmcd("dzcomp-zdir","mcod",9)=";*$$Q      alt entry without recalculating zdir from zro"
^ZWCmcd("dzcomp-zdir","mcod",10)="zdir()  NEW Q  S Q="""""
^ZWCmcd("dzcomp-zdir","mcod",11)="        S Q=$$zl5"
^ZWCmcd("dzcomp-zdir","mcod",12)="        Q:$Q Q"
^ZWCmcd("dzcomp-zdir","mcod",13)="        Q"
^ZWCmcd("dzcomp-zdir","mcod",14)=";"
^ZWCmcd("dzcomp-zdir","mcod",15)="; 5th Variant after zrox : zdir(oi,si)=FileRef, odir #"
^ZWCmcd("dzcomp-zl5","mcod",16)="zl5()   ;U $P W !,""Performing zl5 on-  ^"",$T(+0),!"
^ZWCmcd("dzcomp-zl5","mcod",17)="        NEW:1 oi,od,sn,si,Q S Q="""""
^ZWCmcd("dzcomp-zl5","mcod",18)="        F oi=1:1 S od=$D(zdir(oi)) Q:od=0  ; Find last oi, work backwards"
^ZWCmcd("dzcomp-zl5","mcod",19)="        F oi=oi-1:-1:2 S od=$D(zdir(oi)) I od=11  DO  ;"
^ZWCmcd("dzcomp-zl5","mcod",20)="          .S odir=zdir(oi)"
^ZWCmcd("dzcomp-zl5","mcod",21)="          .I odir[""mumps""!(odir[""ydb"") D b^dv(""Err compiling sdir/odir "",""oi,odir,si,sdir"") Q"
^ZWCmcd("dzcomp-zl5","mcod",22)="          .S sn="""" F si=0:1 S sn=$O(zdir(oi,sn),-1) Q:sn=""""  DO  ;"
^ZWCmcd("dzcomp-zl5","mcod",23)="            ..S sdir=zdir(oi,sn)"
^ZWCmcd("dzcomp-zl5","mcod",24)="            ..D zls5(odir,sdir)"
^ZWCmcd("dzcomp-zl5","mcod",25)="        Q:$Q Q"
^ZWCmcd("dzcomp-zl5","mcod",26)="        Q"
^ZWCmcd("dzcomp-zls5","mcod",27)=";*  new variant of zls"
^ZWCmcd("dzcomp-zls5","mcod",28)="zls5(odir,sdir,stem)  I $G(stem)="""" S stem=""*"""
^ZWCmcd("dzcomp-zls5","mcod",29)="        ;D b^dv(""Log sls5^dzcomp"",""sdir,odir"")"
^ZWCmcd("dzcomp-zls5","mcod",30)="        I sdir[""yotta""!(sdir[""ydb"")  D b^dv(""Err trying to compile sdir"",""osi,sdir,oi,odir"") Q  ; not ydb_dist"
^ZWCmcd("dzcomp-zls5","mcod",31)="        S ZC=""cd ""_odir_"";  $ydb_dist/yottadb ""_sdir_""/""_stem_"".m"""
^ZWCmcd("dzcomp-zls5","mcod",32)="        I sdir[""gtm"" DO  Q  ; not gtm or gtmy"
^ZWCmcd("dzcomp-zls5","mcod",33)="           .;D ^dv(""Log skip gtm/gtmy"",""odir,sdir,ZC"")"
^ZWCmcd("dzcomp-zls5","mcod",34)="        I sdir'[""km"" DO  Q"
^ZWCmcd("dzcomp-zls5","mcod",35)="          .D ^dv(""Skip- Expect to compile only km*/ folders"",""sdir,odir,ZC"")           "
^ZWCmcd("dzcomp-zls5","mcod",36)="        W:$X ! W ""ZC:"",ZC,!"
^ZWCmcd("dzcomp-zls5","mcod",37)="        ZSY ZC"
^ZWCmcd("dzcomp-zls5","mcod",38)="          I $ZSY W:$X ! W ""  Empty Folders are ok in $zro"",!"
^ZWCmcd("dzcomp-zls5","mcod",39)="        Q"
^ZWCmcd("dzdelo","mcod",1)="dzdelo(zro)  ;CKW/ESC  i27aug19 gmsa/ rd2zro/ ; 20200907-98 ;Delete *.o FIles from */o/*.o"
^ZWCmcd("dzdelo","mcod",2)="  ;"
^ZWCmcd("dzdelo","mcod",3)=";$$Q  or not   sr zl5  from ^dvzl"
^ZWCmcd("dzdelo-A","mcod",4)="A       I $G(zro)="""" S Q=""Arg ^""_$T(+0) D bug^dv(Q,""Q,zro"") Q"
^ZWCmcd("dzdelo-A","mcod",5)="        D ^dzroz(zro)  ; zro : zdir(oi,si)"
^ZWCmcd("dzdelo-A","mcod",6)="        NEW Q"
^ZWCmcd("dzdelo-A","mcod",7)="        S Q=$$delo5  ; zdir :  compile mumps *.m for sdir's"
^ZWCmcd("dzdelo-A","mcod",8)="        Q:$Q Q"
^ZWCmcd("dzdelo-A","mcod",9)="        Q"
^ZWCmcd("dzdelo-delo5","mcod",18)="delo5()  ;I $G(odir)="""" D b^dv(""No odir"",""odir,oi"") Q"
^ZWCmcd("dzdelo-delo5","mcod",19)="        NEW oi,odir,ZRM,Q S Q="""""
^ZWCmcd("dzdelo-delo5","mcod",20)="        F oi=1:1 Q:$D(zdir(oi))=0  DO  ;"
^ZWCmcd("dzdelo-delo5","mcod",21)="          .S odir=$G(zdir(oi)) I odir="""" Q"
^ZWCmcd("dzdelo-delo5","mcod",22)="          .I $D(zdir(oi))<10  Q  ; No source files"
^ZWCmcd("dzdelo-delo5","mcod",23)="          .I odir[""gtm""  Q  ; Do not delete in /gtm Dir        ;sic  THIN Safety !!"
^ZWCmcd("dzdelo-delo5","mcod",24)="          .I odir[""yottadb""!(odir[""ydb"")  D:oi'=1 b^dv(""Err ydb in odir, not oi=1"",""odir,oi"")  Q  ; ditto ydb_dist"
^ZWCmcd("dzdelo-delo5","mcod",25)="          .I odir[""ou/""  Q  ; Do not delete ou/  $GB utility *.o files"
^ZWCmcd("dzdelo-delo5","mcod",26)="          .I oi=1 DO  Q"
^ZWCmcd("dzdelo-delo5","mcod",27)="              ..D b^dv(""Normally for kw TP7 oi=1 is gtmdist ???"",""oi,odir,zdir"")"
^ZWCmcd("dzdelo-delo5","mcod",28)="          .D dodir"
^ZWCmcd("dzdelo-delo5","mcod",29)=" Q Q"
^ZWCmcd("dzdelo-dodir","mcod",30)=";*    sr  Executes/zsy ZRM to rm odir/ *.o"
^ZWCmcd("dzdelo-dodir","mcod",31)=";   oi, odir, zdir()"
^ZWCmcd("dzdelo-dodir","mcod",32)="dodir     I $D(zdir(oi))<10  Q  ; No source files"
^ZWCmcd("dzdelo-dodir","mcod",33)="          I odir[""gtm""  Q  ; Do not delete in /gtm Dir        ;sic  THIN Safety !!"
^ZWCmcd("dzdelo-dodir","mcod",34)="          I odir[""yotta""!(odir[""ydb"") D b^dv(""Bug trying to del ydb_dist *.o"",""odir"")  Q  ; Do not delete in /yottadbs Dir        ;sic  THIN Safety !!          "
^ZWCmcd("dzdelo-dodir","mcod",35)="          I odir[""/ou/""  Q  ; ou/*.o are retained $GB utility for git"
^ZWCmcd("dzdelo-dodir","mcod",36)="          I oi=1 D b^dv(""Normally for $zro in kw/km5b/<mpj>/ oi=1 is ydb_dist ???"",""oi,odir,zdir"") Q"
^ZWCmcd("dzdelo-dodir","mcod",37)="          S ZRM=""rm -v ""_odir_""/*.o"""
^ZWCmcd("dzdelo-dodir","mcod",38)="          ZSY ZRM"
^ZWCmcd("dzdelo-dodir","mcod",39)="          I $ZSY S zsy=$ZSY D bug^dv(""Error in ZSY  del *.o ?"",""zsy,ZRM,oi,odir,zro,zdir"")"
^ZWCmcd("dzdelo-dodir","mcod",40)="        Q"
^ZWCmcd("dzdelo-zdir","mcod",10)=";*$$Q      alt entry without recalculating zdir from zro"
^ZWCmcd("dzdelo-zdir","mcod",11)="zdir()  NEW Q  S Q="""""
^ZWCmcd("dzdelo-zdir","mcod",12)="        I $D(zdir)'=10 D bug^dv(""Arg array zdir(oi,si)... missing"",""zdir"") Q"
^ZWCmcd("dzdelo-zdir","mcod",13)="        S Q=$$delo5  ; zdir :  compile mumps *.m for sdir's"
^ZWCmcd("dzdelo-zdir","mcod",14)="        Q:$Q Q"
^ZWCmcd("dzdelo-zdir","mcod",15)="        Q        "
^ZWCmcd("dzdelo-zdir","mcod",16)="         ;"
^ZWCmcd("dzdelo-zdir","mcod",17)="         ;  falls into vers for zdir(oi,si)"
^ZWCmcd("dzfl","mcod",1)="dzfl   ;CKW/ESC i25sep20 gmsa/ rd2zro/  ; 20200925-95 ; Quick First lines, ala dzs, dir mode"
^ZWCmcd("dzfl","mcod",2)=";"
^ZWCmcd("dzfl","mcod",3)=";         ****   BREAK   ****  Too Complicated, Too dependent, Bad Idea"
^ZWCmcd("dzfl","mcod",4)=";"
^ZWCmcd("dzfl-A","mcod",5)="A     S zro=$zro"
^ZWCmcd("dzfl-A","mcod",6)="      D ^dzroz(zro)"
^ZWCmcd("dzfl-A","mcod",7)="      KILL rDIR S rDIR=0"
^ZWCmcd("dzfl-A","mcod",8)="      F oi=2:1 Q:$D(zdir(oi))=0  F si=1:1  Q:$D(zdir(oi,si))=0  DO  ;"
^ZWCmcd("dzfl-A","mcod",9)="        .S rDIR=rDIR+1,rDIR(rDIR)=zdir(oi,si)"
^ZWCmcd("dzfl-A","mcod",10)="        .W:$X ! W rDIR,"" "",?5,rDIR(rDIR),!"
^ZWCmcd("dzfl-A","mcod",11)="      R !,""which rdir(s):"",X"
^ZWCmcd("dzfl-A","mcod",12)="        I X=""."" Q"
^ZWCmcd("dzfl-A","mcod",13)="      I X["" "" S X=$TR(X,"" "","","")"
^ZWCmcd("dzfl-A","mcod",14)="      F xi=1:1:$L(X,"","") S xn=$P(X,"","") I xn'="""" D WXn(xn)"
^ZWCmcd("dzfl-A","mcod",15)="      Q"
^ZWCmcd("dzfl-Q","mcod",36)="Q     Q:$Q Q"
^ZWCmcd("dzfl-Q","mcod",37)="      Q"
^ZWCmcd("dzfl-WF1","mcod",48)=";*"
^ZWCmcd("dzfl-WF1","mcod",49)="WF1   ;"
^ZWCmcd("dzfl-WF1","mcod",50)="      USE $P W:$X ! W $G(Fnm),""  "",?15,$G(mFL),!"
^ZWCmcd("dzfl-WF1","mcod",51)="      Q"
^ZWCmcd("dzfl-WF1","mcod",52)=";*"
^ZWCmcd("dzfl-WF1","mcod",53)=""
^ZWCmcd("dzfl-WF1","mcod",54)="      S Fol=$P(url,""/"",n-1)"
^ZWCmcd("dzfl-WF1","mcod",55)=""
^ZWCmcd("dzfl-WF1","mcod",56)="      "
^ZWCmcd("dzfl-WF1","mcod",57)="      "
^ZWCmcd("dzfl-WFL","mcod",21)=";*"
^ZWCmcd("dzfl-WFL","mcod",22)="WFL(durl)  NEW Q S Q="""""
^ZWCmcd("dzfl-WFL","mcod",23)="      I $G(durl)="""" D b^dv(""Bug arg"",""durl"") Q"
^ZWCmcd("dzfl-WFL","mcod",24)="      S n=$L(durl,""/""),ns=$P(durl,""/"",n) I ns="""" S ns=""*.m"""
^ZWCmcd("dzfl-WFL","mcod",25)="      E  S $P(durl,""/"",n)=""""  ; remove any ns to ns"
^ZWCmcd("dzfl-WFL","mcod",26)="      I $E(durl,$L(durl))'=""/"" S durl=durl_""/"" D b^dv(""Add / on durl end"",""durl"")"
^ZWCmcd("dzfl-WFL","mcod",27)="      S olf=$ZSEARCH(durl_""aa-*.olf"")"
^ZWCmcd("dzfl-WFL","mcod",28)="      I olf="""" S olf="""",ns=""*.m"""
^ZWCmcd("dzfl-WFL","mcod",29)="      D ^mbsAF(olf)  ; : qF(sq)  via olf"
^ZWCmcd("dzfl-WFL","mcod",30)="      ;"
^ZWCmcd("dzfl-WFL","mcod",31)="      F sq=1:1:qF S furl=qF(sq) DO"
^ZWCmcd("dzfl-WFL","mcod",32)="        .S Q=$$^devRD(furl,,""RM"") I Q'="""" Goto Q"
^ZWCmcd("dzfl-WFL","mcod",33)="        .S Q=$$durl(furl) ; : "
^ZWCmcd("dzfl-WFL","mcod",34)="        .S L1=RM(1),mFL=$P(L1,"";"",4)"
^ZWCmcd("dzfl-WFL","mcod",35)="        .D WF1"
^ZWCmcd("dzfl-WXn","mcod",16)=";*"
^ZWCmcd("dzfl-WXn","mcod",17)="WXn(xn)  I $G(xn)="""" Q"
^ZWCmcd("dzfl-WXn","mcod",18)="      S r=$G(rDIR(+xn)) I r="""" W "" ? '"",xn,""' "" Q"
^ZWCmcd("dzfl-WXn","mcod",19)="      D WFL(r)"
^ZWCmcd("dzfl-WXn","mcod",20)="      Q"
^ZWCmcd("dzfl-durl","mcod",38)=";*$$Q  : Fil, ns, Fol, mpj, Base"
^ZWCmcd("dzfl-durl","mcod",39)="durl(url) NEW Q,m,n S Q=""""  I $G(url)="""" S Q=""Arg durl^dzfl"" D b^dv(Q,""Q,url"") Q Q"
^ZWCmcd("dzfl-durl","mcod",40)="      S n=$L(url,""/""),ns=$P(url,""/"",n),Fil="""""
^ZWCmcd("dzfl-durl","mcod",41)="      I ns="""" S ns=""*.m"""
^ZWCmcd("dzfl-durl","mcod",42)="      E  I ns'[""*"" S Fil=ns,ns="""""
^ZWCmcd("dzfl-durl","mcod",43)="      S m=$L(Fil,"".""),ext=$P(Fil,""."",m)"
^ZWCmcd("dzfl-durl","mcod",44)="      S Fnm=$P(Fil,""."")  ; first only even if m>2"
^ZWCmcd("dzfl-durl","mcod",45)="      S mpj=$P(url,""/"",n-2)"
^ZWCmcd("dzfl-durl","mcod",46)="      S Base=$P(url,""/"",1,n-2)  ; includes mpj"
^ZWCmcd("dzfl-durl","mcod",47)="      Q Q"
^ZWCmcd("dzroGrid","mcod",1)="dzroGrid ;CKW/ESC i25may22 gmsa/ rd2zro/ ;20220525-42; HGen mpj-zro vs rdir list GridGrid"
^ZWCmcd("dzroGrid","mcod",2)=";"
^ZWCmcd("dzroGrid","mcod",3)="; Urge 25may22 use case ^GP6  vs ^dgmg  rdir/vers confusion"
^ZWCmcd("dzroGrid","mcod",4)=";"
^ZWCmcd("dzroGrid-ct","mcod",45)="ct(v1) D ct^hgh($G(v1)) Q"
^ZWCmcd("dzroGrid-guts","mcod",17)=";*"
^ZWCmcd("dzroGrid-guts","mcod",18)="guts   ;"
^ZWCmcd("dzroGrid-guts","mcod",19)="     D ot(""table"")"
^ZWCmcd("dzroGrid-guts","mcod",20)="     D ot("".rowth"")"
^ZWCmcd("dzroGrid-guts","mcod",21)="     F di=1:1:$L(rdL,"","") S rdir=$P(rdL,"","",di) DO"
^ZWCmcd("dzroGrid-guts","mcod",22)="       .D ot(th),sv(rdir),ct"
^ZWCmcd("dzroGrid-guts","mcod",23)="      D ct("".rowth"")"
^ZWCmcd("dzroGrid-guts","mcod",24)="     ;"
^ZWCmcd("dzroGrid-guts","mcod",25)="     D ot("".rowmpj"")"
^ZWCmcd("dzroGrid-guts","mcod",26)="     F mi=1:1:$L(mpL,"","") S mpj=$P(mpL,"","",mi)  D mpjLine"
^ZWCmcd("dzroGrid-guts","mcod",27)="     D ct("".rowmpj"")"
^ZWCmcd("dzroGrid-guts","mcod",28)="     D ct(""table"")"
^ZWCmcd("dzroGrid-guts","mcod",29)="     Q"
^ZWCmcd("dzroGrid-mpjLine","mcod",30)=";*"
^ZWCmcd("dzroGrid-mpjLine","mcod",31)="mpjLine   ;"
^ZWCmcd("dzroGrid-mpjLine","mcod",32)="     D ot("".mline"")"
^ZWCmcd("dzroGrid-mpjLine","mcod",33)="     D ot("".mlhd""),sv(mpj),ct"
^ZWCmcd("dzroGrid-mpjLine","mcod",34)="     F di=1:1:$L(rdL,"","") S rdir=$P(rdL,"","",di) DO"
^ZWCmcd("dzroGrid-mpjLine","mcod",35)="       .S grpt=$G(^ZWP(mpj,""xrdir"",rdir))"
^ZWCmcd("dzroGrid-mpjLine","mcod",36)="       .I grpt="""" S grpt=""."""
^ZWCmcd("dzroGrid-mpjLine","mcod",37)="       .D ot(""td""),sv(grpt),ct"
^ZWCmcd("dzroGrid-mpjLine","mcod",38)="     D ct("".mline"")"
^ZWCmcd("dzroGrid-mpjLine","mcod",39)="     Q"
^ZWCmcd("dzroGrid-mpjLine","mcod",40)="     "
^ZWCmcd("dzroGrid-mpjLine","mcod",41)="     "
^ZWCmcd("dzroGrid-mpjLine","mcod",42)="     "
^ZWCmcd("dzroGrid-ot","mcod",43)=";*  local aliases ot,ct to ^hgh"
^ZWCmcd("dzroGrid-ot","mcod",44)="ot(v1) D ot^hgh($G(v1)) Q"
^ZWCmcd("dzroGrid-sv","mcod",46)="sv(v1) D sv^hgh($G(v1)) Q"
^ZWCmcd("dzroGrid-sv","mcod",47)=""
^ZWCmcd("dzroGrid-sv","mcod",48)=";*"
^ZWCmcd("dzroGrid-top","mcod",5)="top      ;"
^ZWCmcd("dzroGrid-top","mcod",6)="     D ^devIB  ; PB, MB"
^ZWCmcd("dzroGrid-top","mcod",7)="     S devHGzro=MB_""ww2m/a-zro-rdir-Grid.2.html"""
^ZWCmcd("dzroGrid-top","mcod",8)="     S rdL=""rMGbl3,rd2Mgb,rd2mg,rMgbl,rG"""
^ZWCmcd("dzroGrid-top","mcod",9)="     "
^ZWCmcd("dzroGrid-top","mcod",10)="     D Init^hgh"
^ZWCmcd("dzroGrid-top","mcod",11)="       S TItb=""rdir-Grid"""
^ZWCmcd("dzroGrid-top","mcod",12)="     D HGS^hgh"
^ZWCmcd("dzroGrid-top","mcod",13)="     D guts"
^ZWCmcd("dzroGrid-top","mcod",14)="     D HGE^hgh"
^ZWCmcd("dzroGrid-top","mcod",15)="     D WH^hgh(devHGzro)"
^ZWCmcd("dzroGrid-top","mcod",16)="     Q"
^ZWCmcd("dzroz","mcod",1)="dzroz(zro) ;CKW/ESC i7sep20 km3a/gmsa/ rzro3/ ; 20200907-78 ; zro/$zro parse to zdir(oi,si)"
^ZWCmcd("dzroz","mcod",2)=";"
^ZWCmcd("dzroz","mcod",3)=";            adapted from ^dzZROdir  and in ^dvzl, ^dzzl;   rdv/ rzro/ rd2mrou/ rd2zro/"
^ZWCmcd("dzroz-A","mcod",4)="A      I $G(zro)="""" S zro=$zro D bug^dv(""arg zro def $zro"",""zro"") Q"
^ZWCmcd("dzroz-A","mcod",5)=";$$Q or not"
^ZWCmcd("dzroz-A","mcod",6)="; -- Handle *.so refs, ? contents"
^ZWCmcd("dzroz-A","mcod",7)="; Note odir and sdir here are oi and si elsewhere, where OC here is odir elsewhere"
^ZWCmcd("dzroz-A","mcod",8)=";     Vers 2 of zros sr  zro : PM, zdir(oi,si)        vs odir, sdir"
^ZWCmcd("dzroz-A","mcod",9)=";       zro : zdir()"
^ZWCmcd("dzroz-ETS","mcod",42)="ETS     D Err(""There is a terminal / in element oi:""_oi_"", si:""_si_""  sdir:""_SC)"
^ZWCmcd("dzroz-ETS","mcod",43)="        Q"
^ZWCmcd("dzroz-Err","mcod",44)="Err(M)  NEW D S D=$IO U $G(devlog) W:$X ! W M,!"
^ZWCmcd("dzroz-Err","mcod",45)="        ; S Err(M,...)=M"
^ZWCmcd("dzroz-Err","mcod",46)="        U D"
^ZWCmcd("dzroz-Err","mcod",47)="        Q"
^ZWCmcd("dzroz-Err","mcod",48)=";*"
^ZWCmcd("dzroz-ao","mcod",34)=";*"
^ZWCmcd("dzroz-ao","mcod",35)=";srs  add C, Set zdir(oi) or zdir(oi,si)"
^ZWCmcd("dzroz-ao","mcod",36)="ao      S OC=OC_C Q"
^ZWCmcd("dzroz-as","mcod",37)="as      S SC=SC_C Q"
^ZWCmcd("dzroz-so","mcod",38)="so      Q:OC=""""  S oi=$G(oi)+1,zdir(oi)=OC,OC="""",SC="""",si=0 Q"
^ZWCmcd("dzroz-ss","mcod",39)="ss      Q:SC=""""  I $E(SC,$L(SC))=""/"" D ETS S SC=$E(SC,1,$L(SC)-1)  ; remove terminal /"
^ZWCmcd("dzroz-ss","mcod",40)="        S si=$G(si)+1,zdir(oi,si)=SC,SC="""""
^ZWCmcd("dzroz-ss","mcod",41)="        Q"
^ZWCmcd("dzroz-zrox","mcod",10)="zrox    KILL zdir   NEW ci,C,oi,si,PM,OC,SC,vi,vn,val,Q S Q="""""
^ZWCmcd("dzroz-zrox","mcod",11)="        S PM=1,OC="""",SC="""",oi=0 F ci=1:1:$L(zro) S C=$E(zro,ci) DO  Q:PM>7  ;"
^ZWCmcd("dzroz-zrox","mcod",12)="          .I PM=1 DO  Q  ; obj file"
^ZWCmcd("dzroz-zrox","mcod",13)="            ..I C="" "" D so  Q  ;leave PM=1"
^ZWCmcd("dzroz-zrox","mcod",14)="            ..I C=""("" D so  S PM=2 Q"
^ZWCmcd("dzroz-zrox","mcod",15)="            ..I C?1A  D ao Q"
^ZWCmcd("dzroz-zrox","mcod",16)="            ..I C?1N  I $L(OC) D ao Q"
^ZWCmcd("dzroz-zrox","mcod",17)="            ..D ao Q"
^ZWCmcd("dzroz-zrox","mcod",18)="            ..D Err(""Char ? ""_C) S PM=8"
^ZWCmcd("dzroz-zrox","mcod",19)="          .I PM=2 DO   ;src file"
^ZWCmcd("dzroz-zrox","mcod",20)="            ..I C="" "" D ss Q  ;leave PM=2"
^ZWCmcd("dzroz-zrox","mcod",21)="            ..I C="")"" D ss S PM=1 Q"
^ZWCmcd("dzroz-zrox","mcod",22)="            ..I C?1A D as Q"
^ZWCmcd("dzroz-zrox","mcod",23)="            ..D as Q"
^ZWCmcd("dzroz-zrox","mcod",24)="            ..I C?1N  I $L(SC) D as Q"
^ZWCmcd("dzroz-zrox","mcod",25)="            ..D b^dv(""Format Err src File"",""zro,ci,C,oi,si"") S PM=8"
^ZWCmcd("dzroz-zrox","mcod",26)="        I PM>7 S Q=""Err zrox Parse"" D b^dv(Q,""C,ci,zro,oi,si,PM"")"
^ZWCmcd("dzroz-zrox","mcod",27)="        I PM=2 S Q=""Err Parsing Finished inside paren?"" D b^dv(Q,""Q,zro,PM"")"
^ZWCmcd("dzroz-zrox","mcod",28)="        I $D(zdir(2))'=11 DO  "
^ZWCmcd("dzroz-zrox","mcod",29)="          .S Q=""kw std expects 2nd obj to have sub-src"",PM=11"
^ZWCmcd("dzroz-zrox","mcod",30)="          .W:$X ! W Q,! I $D(zdir) zwr zdir W !"
^ZWCmcd("dzroz-zrox","mcod",31)="          .D b^dv(Q,""zdir(2)"")"
^ZWCmcd("dzroz-zrox","mcod",32)="        Q:$Q Q"
^ZWCmcd("dzroz-zrox","mcod",33)="        Q"
^ZWCmcd("dzs","mcod",1)="dzs(vzro)  ;CKW/ESC i27aug20  gmsa/ rd2zro/ ;20220804-44; Show (write to $P) $zro / zdir DirMode calls"
^ZWCmcd("dzs","mcod",2)=";"
^ZWCmcd("dzs","mcod",3)=";"
^ZWCmcd("dzs","mcod",4)=";"
^ZWCmcd("dzs-A","mcod",5)="A     I $G(vzro)="""" S vzro=$zro ; default vs input"
^ZWCmcd("dzs-A","mcod",6)="      D ^dzMdup(vzro)  ; Writes if Dupl MRou in zro"
^ZWCmcd("dzs-A","mcod",7)="      NEW Q,zro,oi,si,lsi,odir,sdir ; zdir persists now, output"
^ZWCmcd("dzs-A","mcod",8)="      S zro=vzro"
^ZWCmcd("dzs-A","mcod",9)="      NEW n,B,rdir,mpj,SB,GB,PB,WB,Bty,kwsys,kwmpj,mpjDir,LUser   ; for s2, not repeatedly"
^ZWCmcd("dzs-A","mcod",10)="      I $I'=$P USE $P "
^ZWCmcd("dzs-A","mcod",11)="      ; D ^guIMG  ; may not have access in $zro, eg mdk"
^ZWCmcd("dzs-A","mcod",12)="      D IB^dzIMG  ; : SB, GB, PB      "
^ZWCmcd("dzs-A","mcod",13)="      S Q=$$^dzroz(vzro)  ; vzro/$zro : zdir()"
^ZWCmcd("dzs-A","mcod",14)=" I Q'="""" D b^dv(""zro parse Err"",""Q"")"
^ZWCmcd("dzs-A","mcod",15)="      ;"
^ZWCmcd("dzs-A","mcod",16)="      I $T(^dzRDMeta)'="""" D ^dzRDMeta ; Rdir(rdir)=rde"
^ZWCmcd("dzs-A","mcod",17)="      F zoi=1:1 S odir=$G(zdir(zoi)) Q:odir=""""  DO"
^ZWCmcd("dzs-A","mcod",18)="        .W:$X ! W zoi,"" "",odir,!"
^ZWCmcd("dzs-A","mcod",19)="        .F lsi=1:1 S sdir=$G(zdir(zoi,lsi)) Q:sdir=""""  DO"
^ZWCmcd("dzs-A","mcod",20)="           ..D s2"
^ZWCmcd("dzs-A","mcod",21)="           ..W:$X ! W ""  "",lsi,"" "",Bty,"" "",?10,mpj,""/  "",?20,rdir,""/ "",?30"
^ZWCmcd("dzs-A","mcod",22)="           ..W $G(rdNSL),"" "",$G(D2abs),""  """
^ZWCmcd("dzs-A","mcod",23)="           ..W:$X>35 !,?30 W $G(Rdir(sdir))"
^ZWCmcd("dzs-A","mcod",24)="      W !"
^ZWCmcd("dzs-A","mcod",25)=""
^ZWCmcd("dzs-Q","mcod",26)="Q     KILL RXU,Ru,zdir,Rdir     "
^ZWCmcd("dzs-Q","mcod",27)="      Q:$Q Q  Q"
^ZWCmcd("dzs-s2","mcod",28)=";*      "
^ZWCmcd("dzs-s2","mcod",29)=";*  sdir, zoi,lsi : mpj, rdir, Bty, B,   @rdirFL(rdid)"
^ZWCmcd("dzs-s2","mcod",30)="s2    NEW oi,si,id,rdNSL,D2abs "
^ZWCmcd("dzs-s2","mcod",31)="      S n=$L(sdir,""/""),rdir=$P(sdir,""/"",n),mpj=$P(sdir,""/"",n-1)"
^ZWCmcd("dzs-s2","mcod",32)="      S B=$P(sdir,""/"",1,n-2)_""/"",Bty="""""
^ZWCmcd("dzs-s2","mcod",33)="      I B[GB S Bty=""GB"""
^ZWCmcd("dzs-s2","mcod",34)="      I B[PB S Bty=""PB"""
^ZWCmcd("dzs-s2","mcod",35)="      ;D b^dv(""Log Bty"",""B,SB,GB,PB"")"
^ZWCmcd("dzs-s2","mcod",36)="      I rdir'=""""  DO  ; maybe get rdNSL, D2abs"
^ZWCmcd("dzs-s2","mcod",37)="        .S id=$G(^ZRx(""dab"",rdir)),rdNSL="""""
^ZWCmcd("dzs-s2","mcod",38)="        .I id S rdNSL=$G(^ZRD(id,""rdNSL""))   ; may not have access"
^ZWCmcd("dzs-s2","mcod",39)="        .I rdNSL="""" D ^dzFdir(sdir) ; : D2abs"
^ZWCmcd("dzs-s2","mcod",40)="        .S rdid=mpj_""-""_rdir"
^ZWCmcd("dzs-s2","mcod",41)="        .I rdid'="""" S rdide=$G(^ZQrdir(rdid))  "
^ZWCmcd("dzs-s2","mcod",42)=";^ZQ* gde mapped to gmfd common ZQ-ydb-mumps.dat in gmfd/g/"
^ZWCmcd("dzs-s2","mcod",43)="      ;"
^ZWCmcd("dzs-s2","mcod",44)="      Q"
^ZWCmcd("dzs-s2","mcod",45)=";*"
^ZWCmcd("dzsr","mcod",1)="dzsr ;CKW/ESC i9feb23 gmsa./ rzro3/ ;20230210-01;sr for ^DZ*"
^ZWCmcd("dzsr","mcod",2)=";"
^ZWCmcd("dzsr","mcod",3)=";"
^ZWCmcd("dzsr","mcod",4)=";"
^ZWCmcd("dzsr-IB","mcod",7)=";*  ; : SB, PB, GB,    kwsys,kwmpj, mpjDir,LUser"
^ZWCmcd("dzsr-IB","mcod",8)="IB(ampj)  ;"
^ZWCmcd("dzsr-IB","mcod",9)="      S mpjDir=""umbr"" I $G(ampj)'="""" S mpjDir=ampj"
^ZWCmcd("dzsr-IB","mcod",10)="      S kwsys=""km3a"""
^ZWCmcd("dzsr-IB","mcod",11)="      S LUser=""kw"""
^ZWCmcd("dzsr-IB","mcod",12)="      S SB=""/home/""_LUser_""/""_kwsys_""/"""
^ZWCmcd("dzsr-IB","mcod",13)="      S PB=SB_mpjDir_""/"""
^ZWCmcd("dzsr-IB","mcod",14)="      S GB=SB_""/gmsa/"""
^ZWCmcd("dzsr-IB","mcod",15)="      Q"
^ZWCmcd("dzsr-IB","mcod",16)=";*"
^ZWCmcd("dzsr-top","mcod",5)="top   BREAK  BREAK  HALT   ; No top"
^ZWCmcd("dzsr-top","mcod",6)=";"
^ZWCmcd("dzzl","mcod",1)="dzzl(zro)   ;CKW/ESC i7sep20 gmsa/ rzro3/ ; 20200907-80 ; Start sequence zdir, delo, mumps/gtm compile Pause"
^ZWCmcd("dzzl","mcod",2)="; chg order dzMdup 16sep20"
^ZWCmcd("dzzl","mcod",3)=";  RefBy:   ^gma "
^ZWCmcd("dzzl","mcod",4)=";"
^ZWCmcd("dzzl-A","mcod",5)="A     I $G(zro)="""" S zro=$zro D b^dv(""Default $zro vs arg"",""zro"")  "
^ZWCmcd("dzzl-A","mcod",6)="  ;"
^ZWCmcd("dzzl-Qz5","mcod",13)="Qz5   KILL:1 zdir,odir,sdir,zro"
^ZWCmcd("dzzl-Qz5","mcod",14)="      Q"
^ZWCmcd("dzzl-pz","mcod",15)=";*"
^ZWCmcd("dzzl-pz","mcod",16)=";*$$Q  Pauze to see results of compile-"
^ZWCmcd("dzzl-pz","mcod",17)="pz() W:$X ! W ""Finished gtmy compile mumps source to o/*.o  by ^"",$T(+0),!!"
^ZWCmcd("dzzl-pz","mcod",18)="        NEW X"
^ZWCmcd("dzzl-pz","mcod",19)=" W ""Pause to see any syntax errors- "",! R X "
^ZWCmcd("dzzl-pz","mcod",20)=" I X=""."" Q ""."""
^ZWCmcd("dzzl-pz","mcod",21)=" Q """""
^ZWCmcd("dzzl-z5","mcod",7)="z5    NEW sdir,odir,zBase,zsl,zsd,mpr,mpf,zl,zd,di8,ZC,ZRM"
^ZWCmcd("dzzl-z5","mcod",8)="      D ^dzroz(zro) ;  zro : zdir(oi,si)"
^ZWCmcd("dzzl-z5","mcod",9)="      D zdir^dzdelo()  ;  Delete $PB/o/*.o   Not ou  or gtm_dist / gtm"
^ZWCmcd("dzzl-z5","mcod",10)="      D zdir^dzMdup()   ; Ck for duplicate MRou refs (hidden code)      "
^ZWCmcd("dzzl-z5","mcod",11)="      D zdir^dzcomp()  ;  Compile via ZSY mumps LCmd"
^ZWCmcd("dzzl-z5","mcod",12)="      S Q=$$pz  ; Pause"
^ZWCmcd("ep2HGpt","mcod",1)="ep2HGpt ;CKW/ESC i14dec22 umbr./ rmep2/ ;20221214-64;HGen Parse Tree Array"
^ZWCmcd("ep2HGpt","mcod",2)=";"
^ZWCmcd("ep2HGpt","mcod",3)=";"
^ZWCmcd("ep2HGpt","mcod",4)=";  PT(xi,yi)  Table"
^ZWCmcd("ep2HGpt","mcod",5)=";  xi cols  0:1:nIns"
^ZWCmcd("ep2HGpt","mcod",6)=";  yi rows  state table, ?SSg "
^ZWCmcd("ep2HGpt-HG","mcod",51)=";*"
^ZWCmcd("ep2HGpt-HG","mcod",52)="HG    S Fil=""PT.2.html"" D ^devIB ; : PB"
^ZWCmcd("ep2HGpt-HG","mcod",53)="      S devh=PB_""dmep/""_Fil"
^ZWCmcd("ep2HGpt-HG","mcod",54)="      D Init^hgh    S hghEOL=1"
^ZWCmcd("ep2HGpt-HG","mcod",55)="      D Hcss"
^ZWCmcd("ep2HGpt-HG","mcod",56)="      ;"
^ZWCmcd("ep2HGpt-HG","mcod",57)="      D HGS^hgh"
^ZWCmcd("ep2HGpt-HG","mcod",58)="      D guts"
^ZWCmcd("ep2HGpt-HG","mcod",59)="      D HGE^hgh"
^ZWCmcd("ep2HGpt-HG","mcod",60)="      ;"
^ZWCmcd("ep2HGpt-HG","mcod",61)="      D WH^hgh(devh)"
^ZWCmcd("ep2HGpt-HG","mcod",62)="      Q"
^ZWCmcd("ep2HGpt-Hcss","mcod",80)=";*"
^ZWCmcd("ep2HGpt-Hcss","mcod",81)="Hcss  ;D flexrow^hgh("".row"","".tcell"")"
^ZWCmcd("ep2HGpt-Hcss","mcod",82)="      D css^hgh("".row"",""background: lightgray;"")"
^ZWCmcd("ep2HGpt-Hcss","mcod",83)="      D css^hgh(""table"",""border: 1px solid black;border-collapse: collapse;"")"
^ZWCmcd("ep2HGpt-Hcss","mcod",84)="      D css^hgh(""th"",""border: 1px solid black;border-collapse: collapse;"")"
^ZWCmcd("ep2HGpt-Hcss","mcod",85)="      D css^hgh(""td"",""border: 1px solid black;border-collapse: collapse;"")"
^ZWCmcd("ep2HGpt-Hcss","mcod",86)="      D css^hgh(""td"",""width:10em"")"
^ZWCmcd("ep2HGpt-Hcss","mcod",87)="      D css^hgh("".tcell"",""border: 1px solid black;"")"
^ZWCmcd("ep2HGpt-Hcss","mcod",88)="      D css^hgh("".tcellsp"",""border: 1px solid yellow;background:lightblue;"")"
^ZWCmcd("ep2HGpt-Hcss","mcod",89)="      Q"
^ZWCmcd("ep2HGpt-Hcss","mcod",90)=";*"
^ZWCmcd("ep2HGpt-I0","mcod",10)=";*"
^ZWCmcd("ep2HGpt-I0","mcod",11)="I0    S Ins=""1+(2*3+4)"""
^ZWCmcd("ep2HGpt-I0","mcod",12)="      KILL INc F i=1:1:$L(Ins) S C=$E(Ins,i),INc(i)=C"
^ZWCmcd("ep2HGpt-I0","mcod",13)="      KILL Ttok S V=""Cdig:0123456789,Cop:(,Ccp:),Psum:+-,Pfac:*/"""
^ZWCmcd("ep2HGpt-I0","mcod",14)="      F vi=1:1:$L(V,"","") S P=$P(V,"","",vi),runa=$P(P,"":""),CL=$P(P,"":"",2) DO  ;"
^ZWCmcd("ep2HGpt-I0","mcod",15)="        .F ci=1:1:$L(CL) S c=$E(CL,ci),Tokx(c)=runa"
^ZWCmcd("ep2HGpt-I0","mcod",16)="      Q"
^ZWCmcd("ep2HGpt-IHT","mcod",17)=";*"
^ZWCmcd("ep2HGpt-IHT","mcod",18)="IHT   KILL PT,Pcs S eol=$C(13)"
^ZWCmcd("ep2HGpt-IHT","mcod",19)="      S nIns=$L(Ins)"
^ZWCmcd("ep2HGpt-IHT","mcod",20)="      F xi=1:1:nIns S PT(.1,xi)=xi,PT(.2,xi)=$E(Ins,xi)"
^ZWCmcd("ep2HGpt-IHT","mcod",21)="      S yi=1,nPTy=20"
^ZWCmcd("ep2HGpt-IHT","mcod",22)="      F xi=1:1:nIns S C=INc(xi) DO  ;"
^ZWCmcd("ep2HGpt-IHT","mcod",23)="        .I C?1N DO  ;"
^ZWCmcd("ep2HGpt-IHT","mcod",24)="           ..I xi=1 D tokL(""Cdig,num,fac,prod,sum"",1)"
^ZWCmcd("ep2HGpt-IHT","mcod",25)="           ..I xi=4 D tokL(""Cdig,num,fac,prod"",1)"
^ZWCmcd("ep2HGpt-IHT","mcod",26)="           ..I xi=6 D tokL(""Cdig,num,fac"",1)"
^ZWCmcd("ep2HGpt-IHT","mcod",27)="           ..I xi=8 D tokL(""Cdig,num,fac,prod"",1)"
^ZWCmcd("ep2HGpt-IHT","mcod",28)="        .I C?1P S tok=$G(Tokx(C)) S T=tok_eol_""{""_C_""}"",PT(yi,xi)=T"
^ZWCmcd("ep2HGpt-IHT","mcod",29)="      S yi=5,xi=4,C=""2*3"" D tokL(""prod.1:3"",yi)"
^ZWCmcd("ep2HGpt-IHT","mcod",30)="      ;S yi=6,xi=4,C=""2*3"" D tokL(""sum.2"",yi)"
^ZWCmcd("ep2HGpt-IHT","mcod",31)="      S yi=7,xi=4,C=""2*3+4"" D tokL(""sum.1:5"",yi)"
^ZWCmcd("ep2HGpt-IHT","mcod",32)="      S yi=8,xi=3,C=""(2*3+4)"" D tokL(""fac.1:7"",yi)"
^ZWCmcd("ep2HGpt-IHT","mcod",33)="      S yi=8.1,xi=3,C=""(2*3+4)"" D tokL(""prod.2:7"",yi)"
^ZWCmcd("ep2HGpt-IHT","mcod",34)="      S yi=9,xi=1,C=""1+(2*3+4)"" D tokL(""sum.1:9"",yi)"
^ZWCmcd("ep2HGpt-IHT","mcod",35)="      S yi=0 F qi=0:1 S y0=yi,yi=$O(PT(yi)) Q:yi="""""
^ZWCmcd("ep2HGpt-IHT","mcod",36)="      D blank(y0+1,10)"
^ZWCmcd("ep2HGpt-IHT","mcod",37)="      Q"
^ZWCmcd("ep2HGpt-blank","mcod",47)=";*"
^ZWCmcd("ep2HGpt-blank","mcod",48)="blank(y0,N)"
^ZWCmcd("ep2HGpt-blank","mcod",49)="      F yi=y0:1:y0+N S PT(yi,0)=yi"
^ZWCmcd("ep2HGpt-blank","mcod",50)="      Q"
^ZWCmcd("ep2HGpt-guts","mcod",63)=";*  PT"
^ZWCmcd("ep2HGpt-guts","mcod",64)="guts  ;"
^ZWCmcd("ep2HGpt-guts","mcod",65)="      D ot^hgh(""table"")"
^ZWCmcd("ep2HGpt-guts","mcod",66)="      S yi=0 F yn=0:1  S yi=$O(PT(yi)) Q:yi=""""  DO  "
^ZWCmcd("ep2HGpt-guts","mcod",67)="        .D ot^hgh(""tr"")   "
^ZWCmcd("ep2HGpt-guts","mcod",68)="        .F xi=0:1:nIns DO  ;"
^ZWCmcd("ep2HGpt-guts","mcod",69)="           ..S T=$G(PT(yi,xi)) S:T="""" T="" """
^ZWCmcd("ep2HGpt-guts","mcod",70)="           ..S cs=$G(Pcs(yi,xi)) S:cs="""" cs=1"
^ZWCmcd("ep2HGpt-guts","mcod",71)="           ..DO  ;"
^ZWCmcd("ep2HGpt-guts","mcod",72)="             ...I cs>1 D ^dv(""Log colspan"",""cs,scs,yi,xi"")  DO  Q  ;"
^ZWCmcd("ep2HGpt-guts","mcod",73)="                ....D ota^hgh(""td"","".tcell"",""colspan=""_cs) S xi=xi+cs-1 Q"
^ZWCmcd("ep2HGpt-guts","mcod",74)="                ...D ota^hgh(""td"","".tcell"")   ; cs=1        "
^ZWCmcd("ep2HGpt-guts","mcod",75)="           ..D sv^hgh(T)"
^ZWCmcd("ep2HGpt-guts","mcod",76)="           ..D ct^hgh  ;td .tcell ?atpar"
^ZWCmcd("ep2HGpt-guts","mcod",77)="        .D ct^hgh(""tr"") "
^ZWCmcd("ep2HGpt-guts","mcod",78)="      D ct^hgh(""table"")"
^ZWCmcd("ep2HGpt-guts","mcod",79)="      Q"
^ZWCmcd("ep2HGpt-tokL","mcod",38)=";*   yi,xi, C, tokL : PT(yi,xi), Pcs(yi,xi)   "
^ZWCmcd("ep2HGpt-tokL","mcod",39)="tokL(tokL,y0)   NEW ti,tok,yti"
^ZWCmcd("ep2HGpt-tokL","mcod",40)="      F ti=1:1:$L(tokL,"","") DO  ;"
^ZWCmcd("ep2HGpt-tokL","mcod",41)="        .S tok=$P(tokL,"","",ti)"
^ZWCmcd("ep2HGpt-tokL","mcod",42)="        .S yti=y0+ti-1"
^ZWCmcd("ep2HGpt-tokL","mcod",43)="        .  I tok["":"" S cs=$P(tok,"":"",2),Pcs(yti,xi)=cs  ;  ,tok=$P(tok,"":"")"
^ZWCmcd("ep2HGpt-tokL","mcod",44)="        .S T=tok_eol_""{""_C_""}"""
^ZWCmcd("ep2HGpt-tokL","mcod",45)="        .S PT(yti,xi)=T"
^ZWCmcd("ep2HGpt-tokL","mcod",46)="      Q"
^ZWCmcd("ep2HGpt-top","mcod",7)="top   D I0,IHT  ;create table of data"
^ZWCmcd("ep2HGpt-top","mcod",8)="      D HG"
^ZWCmcd("ep2HGpt-top","mcod",9)="      Q"
^ZWCmcd("ep2HGrp","mcod",1)="ep2HGrp ;CKW/ESC i14dec22 umbr./ rmep2/ ;20221214-64;HGen Reverse Parse Tree Array"
^ZWCmcd("ep2HGrp","mcod",2)=";"
^ZWCmcd("ep2HGrp","mcod",3)=";"
^ZWCmcd("ep2HGrp","mcod",4)=";  PT(xi,yi)  Table"
^ZWCmcd("ep2HGrp","mcod",5)=";  xi cols  0:1:nIns"
^ZWCmcd("ep2HGrp","mcod",6)=";  yi rows  state table, ?SSg "
^ZWCmcd("ep2HGrp-FLg1","mcod",52)="FLg1  ;;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep2HGrp-FLi1","mcod",53)="FLi1  ;;itemFL:runa,ruab,ruid,ikey,svSSq,IPs,IPe,dot,ruLst,tokR1,tokTy,ruby,frm_SCF(Si,Sj)"
^ZWCmcd("ep2HGrp-HG","mcod",77)=";*"
^ZWCmcd("ep2HGrp-HG","mcod",78)="HG    S Fil=""RPT.2.html"" D ^devIB ; : PB"
^ZWCmcd("ep2HGrp-HG","mcod",79)="      S devh=PB_""dmep/""_Fil"
^ZWCmcd("ep2HGrp-HG","mcod",80)="      D Init^hgh    S hghEOL=1"
^ZWCmcd("ep2HGrp-HG","mcod",81)="      D Hcss"
^ZWCmcd("ep2HGrp-HG","mcod",82)="      ;"
^ZWCmcd("ep2HGrp-HG","mcod",83)="      D HGS^hgh"
^ZWCmcd("ep2HGrp-HG","mcod",84)="      D guts"
^ZWCmcd("ep2HGrp-HG","mcod",85)="      D HGE^hgh"
^ZWCmcd("ep2HGrp-HG","mcod",86)="      ;"
^ZWCmcd("ep2HGrp-HG","mcod",87)="      D WH^hgh(devh)"
^ZWCmcd("ep2HGrp-HG","mcod",88)="      Q"
^ZWCmcd("ep2HGrp-Hcss","mcod",106)=";*"
^ZWCmcd("ep2HGrp-Hcss","mcod",107)="Hcss  ;D flexrow^hgh("".row"","".tcell"")"
^ZWCmcd("ep2HGrp-Hcss","mcod",108)="      D css^hgh("".row"",""background: lightgray;"")"
^ZWCmcd("ep2HGrp-Hcss","mcod",109)="      D css^hgh(""table"",""border: 1px solid black;border-collapse: collapse;"")"
^ZWCmcd("ep2HGrp-Hcss","mcod",110)="      D css^hgh(""th"",""border: 1px solid black;border-collapse: collapse;"")"
^ZWCmcd("ep2HGrp-Hcss","mcod",111)="      D css^hgh(""td"",""border: 1px solid black;border-collapse: collapse;"")"
^ZWCmcd("ep2HGrp-Hcss","mcod",112)="      D css^hgh(""td"",""width:10em"")"
^ZWCmcd("ep2HGrp-Hcss","mcod",113)="      D css^hgh("".tcell"",""border: 1px solid black;"")"
^ZWCmcd("ep2HGrp-Hcss","mcod",114)="      D css^hgh("".tcellsp"",""border: 1px solid yellow;background:lightblue;"")"
^ZWCmcd("ep2HGrp-Hcss","mcod",115)="      Q"
^ZWCmcd("ep2HGrp-Hcss","mcod",116)=";*"
^ZWCmcd("ep2HGrp-I0","mcod",12)=";*"
^ZWCmcd("ep2HGrp-I0","mcod",13)="I0    D ^ep2IMG  ;"
^ZWCmcd("ep2HGrp-I0","mcod",14)="      I $G(Ins)="""" D IIn"
^ZWCmcd("ep2HGrp-I0","mcod",15)="      S yi=1"
^ZWCmcd("ep2HGrp-I0","mcod",16)="      Q"
^ZWCmcd("ep2HGrp-IHT","mcod",26)=";*"
^ZWCmcd("ep2HGrp-IHT","mcod",27)="IHT   KILL PT,Pcs S eol=$C(13)"
^ZWCmcd("ep2HGrp-IHT","mcod",28)="      S nIns=$L(Ins)"
^ZWCmcd("ep2HGrp-IHT","mcod",29)="      F xi=1:1:nIns S PT(.1,xi)=xi,PT(999,xi)=$E(Ins,xi)"
^ZWCmcd("ep2HGrp-IHT","mcod",30)="      ;"
^ZWCmcd("ep2HGrp-IHT","mcod",31)="      S yi=1,xi=1 D getI(78),SPT(yi,xi)"
^ZWCmcd("ep2HGrp-IHT","mcod",32)="      "
^ZWCmcd("ep2HGrp-IHT","mcod",33)="      S yi=2,xi=1    D getI(1),SPT(yi,xi) D b^dv(""Log PT"",""yi,xi,P,PT"")"
^ZWCmcd("ep2HGrp-IHT","mcod",34)="      S xi=2         D getI(15),SPT(yi,xi) D b^dv(""Log PT"",""yi,xi,P,PT"")     "
^ZWCmcd("ep2HGrp-IHT","mcod",35)="      S xi=3         D getI(77),SPT(yi,xi) D b^dv(""Log PT"",""yi,xi,P,PT"")"
^ZWCmcd("ep2HGrp-IHT","mcod",36)=""
^ZWCmcd("ep2HGrp-IHT","mcod",37)="      S yi=3,xi=1 D getI(78),SPT(yi,xi)"
^ZWCmcd("ep2HGrp-IHT","mcod",38)="      S xi=2 D getI(78),SPT(yi,xi)"
^ZWCmcd("ep2HGrp-IHT","mcod",39)="      S xi=3 D getI(78),SPT(yi,xi)"
^ZWCmcd("ep2HGrp-IHT","mcod",40)="      "
^ZWCmcd("ep2HGrp-IHT","mcod",41)="      D getI(78),SPT(4,1)"
^ZWCmcd("ep2HGrp-IHT","mcod",42)="      D getI(78),SPT(4,1)"
^ZWCmcd("ep2HGrp-IHT","mcod",43)="      D getI(78),SPT(4,1)"
^ZWCmcd("ep2HGrp-IHT","mcod",44)="      Q"
^ZWCmcd("ep2HGrp-IHT","mcod",45)=";*      "
^ZWCmcd("ep2HGrp-IHT","mcod",46)=";* ? expand ruLst      "
^ZWCmcd("ep2HGrp-IHT","mcod",47)="      S IP=IPs F rj=1:1:$L(ruLst,"","") DO  ;"
^ZWCmcd("ep2HGrp-IHT","mcod",48)="        .S tok=$P(ruLst,"","",rj)"
^ZWCmcd("ep2HGrp-IHT","mcod",49)="        .S SSq=$G(XR(IP,tok))"
^ZWCmcd("ep2HGrp-IHT","mcod",50)="        .S QY(yi+1,SSq)=IP"
^ZWCmcd("ep2HGrp-IHT","mcod",51)="      Q"
^ZWCmcd("ep2HGrp-IIn","mcod",17)=";*  : Ins, INc(IPc)=C"
^ZWCmcd("ep2HGrp-IIn","mcod",18)="IIn   S Ins=""1+(2*3+4)"""
^ZWCmcd("ep2HGrp-IIn","mcod",19)="      KILL INc F i=1:1:$L(Ins) S C=$E(Ins,i),INc(i)=C"
^ZWCmcd("ep2HGrp-IIn","mcod",20)="      Q"
^ZWCmcd("ep2HGrp-IT","mcod",21)=";* Pseudo Grk part 2, Terminals, ?OBS vs GRk      "
^ZWCmcd("ep2HGrp-IT","mcod",22)="IT    KILL Ttok S V=""Cdig:0123456789,Cop:(,Ccp:),Psum:+-,Pfac:*/"""
^ZWCmcd("ep2HGrp-IT","mcod",23)="      F vi=1:1:$L(V,"","") S P=$P(V,"","",vi),runa=$P(P,"":""),CL=$P(P,"":"",2) DO  ;"
^ZWCmcd("ep2HGrp-IT","mcod",24)="        .F ci=1:1:$L(CL) S c=$E(CL,ci),Tokx(c)=runa"
^ZWCmcd("ep2HGrp-IT","mcod",25)="      Q"
^ZWCmcd("ep2HGrp-SPT","mcod",67)=";*  @itemGL : PT(yi,xi), Pcs(yi,xi)"
^ZWCmcd("ep2HGrp-SPT","mcod",68)="SPT(yi,xi)"
^ZWCmcd("ep2HGrp-SPT","mcod",69)="      S xi=IPs,colspan=IPe-IPs"
^ZWCmcd("ep2HGrp-SPT","mcod",70)="      S P=SSq_"") ""_ruab_"" ""_IC_""    ""_$G(ruLst) I colspan>1 S Pcs(yi,xi)=colspan"
^ZWCmcd("ep2HGrp-SPT","mcod",71)="      S PT(yi,xi)=P"
^ZWCmcd("ep2HGrp-SPT","mcod",72)="      Q"
^ZWCmcd("ep2HGrp-blank","mcod",73)=";*"
^ZWCmcd("ep2HGrp-blank","mcod",74)="blank(y0,N)"
^ZWCmcd("ep2HGrp-blank","mcod",75)="      F yi=y0:1:y0+N S PT(yi,0)=yi"
^ZWCmcd("ep2HGrp-blank","mcod",76)="      Q"
^ZWCmcd("ep2HGrp-getI","mcod",54)=";* SSq, Ins, SCF(), itemFL  :  Item locals"
^ZWCmcd("ep2HGrp-getI","mcod",55)="getI(itm)  DO  ;"
^ZWCmcd("ep2HGrp-getI","mcod",56)="        .I itm[""."" S Si=$P(itm,"".""),Sj=$P(itm,""."",2),SS=Si_"".""_Sj,SSq=$G(XSQ(SS)) Q"
^ZWCmcd("ep2HGrp-getI","mcod",57)="        .I itm S SSq=itm DO  Q"
^ZWCmcd("ep2HGrp-getI","mcod",58)="           ..S SS=$G(XSS(SSq))"
^ZWCmcd("ep2HGrp-getI","mcod",59)="           ..S Si=$P(SS,"".""),Sj=$P(SS,""."",2)           "
^ZWCmcd("ep2HGrp-getI","mcod",60)="           ..I SS'[""."" D b^dv(""Err itm SSq"",""itm,SSq,SS"")  ;Set Si,Sj anyway"
^ZWCmcd("ep2HGrp-getI","mcod",61)="        .D b^dv(""Err itm syntax"",""itm"")"
^ZWCmcd("ep2HGrp-getI","mcod",62)="      ;"
^ZWCmcd("ep2HGrp-getI","mcod",63)="      I 'Si!'Sj D bug^dv Q"
^ZWCmcd("ep2HGrp-getI","mcod",64)="      D GFL^jfm(itemFL) ; Si,Sj, SCF(..."
^ZWCmcd("ep2HGrp-getI","mcod",65)="      S IC=$E(Ins,IPs,IPe) I IC'="""" S IC="" {""_IC_""}"""
^ZWCmcd("ep2HGrp-getI","mcod",66)="      Q"
^ZWCmcd("ep2HGrp-guts","mcod",89)=";*  PT"
^ZWCmcd("ep2HGrp-guts","mcod",90)="guts  ;"
^ZWCmcd("ep2HGrp-guts","mcod",91)="      D ot^hgh(""pre""),ot^hgh(""table"")"
^ZWCmcd("ep2HGrp-guts","mcod",92)="      S yi=0 F yn=0:1  S yi=$O(PT(yi)) Q:yi=""""  DO  "
^ZWCmcd("ep2HGrp-guts","mcod",93)="        .D ot^hgh(""tr"")   "
^ZWCmcd("ep2HGrp-guts","mcod",94)="        .F xi=0:1:nIns DO  ;"
^ZWCmcd("ep2HGrp-guts","mcod",95)="           ..S T=$G(PT(yi,xi)) S:T="""" T="" """
^ZWCmcd("ep2HGrp-guts","mcod",96)="           ..S cs=$G(Pcs(yi,xi)) S:cs="""" cs=1"
^ZWCmcd("ep2HGrp-guts","mcod",97)="           ..DO  ;"
^ZWCmcd("ep2HGrp-guts","mcod",98)="             ...I cs>1 D ^dv(""Log colspan"",""cs,scs,yi,xi"")  DO  Q  ;"
^ZWCmcd("ep2HGrp-guts","mcod",99)="                ....D ota^hgh(""td"","".tcell"",""colspan=""_cs) S xi=xi+cs-1 Q"
^ZWCmcd("ep2HGrp-guts","mcod",100)="                ...D ota^hgh(""td"","".tcell"")   ; cs=1        "
^ZWCmcd("ep2HGrp-guts","mcod",101)="           ..D sv^hgh(T)"
^ZWCmcd("ep2HGrp-guts","mcod",102)="           ..D ct^hgh  ;td .tcell ?atpar"
^ZWCmcd("ep2HGrp-guts","mcod",103)="        .D ct^hgh(""tr"") "
^ZWCmcd("ep2HGrp-guts","mcod",104)="      D ct^hgh(""table""),ct^hgh(""pre"")"
^ZWCmcd("ep2HGrp-guts","mcod",105)="      Q"
^ZWCmcd("ep2HGrp-top","mcod",7)="top   D I0  ; Init, ?Ins if not def"
^ZWCmcd("ep2HGrp-top","mcod",8)="      D IHT  ;create table of data, PT(), Pcs() aux colspan"
^ZWCmcd("ep2HGrp-top","mcod",9)="      ;D IT ; : Ttok ? not necessary ?"
^ZWCmcd("ep2HGrp-top","mcod",10)="      D HG"
^ZWCmcd("ep2HGrp-top","mcod",11)="      Q"
^ZWCmcd("ep2IMG","mcod",1)="ep2IMG ;CKW/ESC i5dec22 umbr./ rMP1/ ;20221205-52; grFL, itemFL"
^ZWCmcd("ep2IMG","mcod",2)=";"
^ZWCmcd("ep2IMG","mcod",3)=";"
^ZWCmcd("ep2IMG-FLg1","mcod",12)="FLg1   ;;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep2IMG-FLg1","mcod",13)="       Q"
^ZWCmcd("ep2IMG-FLi1","mcod",10)=";*       "
^ZWCmcd("ep2IMG-FLi1","mcod",11)="FLi1   ;;itemFL:runa,ruab,ruid,ikey,svSSq,IPs,IPe,dot,ruLst,tokR1,tokTy,ruby,frm_SCF(Si,Sj)"
^ZWCmcd("ep2IMG-IKILL","mcod",14)=";*"
^ZWCmcd("ep2IMG-IKILL","mcod",15)="IKILL  KILL SCF,GRk,GRx"
^ZWCmcd("ep2IMG-IKILL","mcod",16)="       KILL MEP,MExk"
^ZWCmcd("ep2IMG-IKILL","mcod",17)="       S GRk=0"
^ZWCmcd("ep2IMG-IKILL","mcod",18)="       Q"
^ZWCmcd("ep2IMG-grFL","mcod",6)="grFL   S grFL=""runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"""
^ZWCmcd("ep2IMG-grFL","mcod",7)="       ;"
^ZWCmcd("ep2IMG-grFL","mcod",8)="       D ^kfmUafl(""umep"")  ;Audit *FL comments"
^ZWCmcd("ep2IMG-grFL","mcod",9)="       Q"
^ZWCmcd("ep2IMG-itemFL","mcod",5)="itemFL S itemFL=""runa,ruab,ruid,ikey,svSSq,IPs,IPe,dot,ruLst,tokR1,tokTy,ruby,frm_SCF(Si,Sj)"""
^ZWCmcd("ep2IMG-top","mcod",4)="top    ;"
^ZWCmcd("ep2IMG-xTT","mcod",19)=";*"
^ZWCmcd("ep2IMG-xTT","mcod",20)="xTT   ; See ^kfmUafl(""umep"")  - uses *FL loc vars and mpjD to find mrou to scan for ;; FL: lines"
^ZWCmcd("ep2IMG-xTT","mcod",21)=";*"
^ZWCmcd("ep2IMG-xTT","mcod",22)=""
^ZWCmcd("ep4IN","mcod",1)="ep4IN(Ins) ;CKW/ESC i14feb23 rmep4/ ;20230214-89; Expand input to "
^ZWCmcd("ep4IN","mcod",2)=";  from Inpre^ep*G0"
^ZWCmcd("ep4IN","mcod",3)=";"
^ZWCmcd("ep4IN-InPre","mcod",4)=";*  Ip : INc(Ip), INty(Ip),  Itb(i)"
^ZWCmcd("ep4IN-InPre","mcod",5)="InPre NEW Q S Q=""""  "
^ZWCmcd("ep4IN-InPre","mcod",6)="      KILL INc,INty,Itb "
^ZWCmcd("ep4IN-InPre","mcod",7)="      NEW w,ci,C,Ip,ty"
^ZWCmcd("ep4IN-InPre","mcod",8)="      S Itb=3,Ip=0"
^ZWCmcd("ep4IN-InPre","mcod",9)="      F ci=1:1:$L(Ins) DO  ; Chars, special case here for demo"
^ZWCmcd("ep4IN-InPre","mcod",10)="        .S C=$E(Ins,ci)"
^ZWCmcd("ep4IN-InPre","mcod",11)="        .I C="" "" Q"
^ZWCmcd("ep4IN-InPre","mcod",12)="        .;  ci and Ip almost identical, but for spaces/wsp not used, ..."
^ZWCmcd("ep4IN-InPre","mcod",13)="        .S Ip=Ip+1"
^ZWCmcd("ep4IN-InPre","mcod",14)="        .S w=5 I w<5 S w=5"
^ZWCmcd("ep4IN-InPre","mcod",15)="        . S Itb(Ip)=Itb,Itb=Itb+w"
^ZWCmcd("ep4IN-InPre","mcod",16)="        .S INc(Ip)=C"
^ZWCmcd("ep4IN-InPre","mcod",17)="        .S INc=Ip"
^ZWCmcd("ep4IN-InPre","mcod",18)="      Q"
^ZWCmcd("ep4IN-InPre","mcod",19)=";*      "
^ZWCmcd("ep4PAR","mcod",1)="ep4PAR  ;CKW/ESC i31oct22 ;20230111-45;Parse Trial IX exploration"
^ZWCmcd("ep4PAR","mcod",2)=";"
^ZWCmcd("ep4PAR","mcod",3)=";  Iabe(ruab,IPe,SSq)=ikey"
^ZWCmcd("ep4PAR","mcod",4)=";  ISi(IPe,runa)=ikey"
^ZWCmcd("ep4PAR","mcod",5)=";"
^ZWCmcd("ep4PAR","mcod",6)=";  GRi(ruid)"
^ZWCmcd("ep4PAR","mcod",7)=";  Gxi(<rule-name>,gi)=isq  ;  ~ left-hand-side name index, mult rules, gi"
^ZWCmcd("ep4PAR","mcod",8)=";"
^ZWCmcd("ep4PAR","mcod",9)=";  INc(Ip)=literal input chars, from Ins, a string of chars"
^ZWCmcd("ep4PAR","mcod",10)=";"
^ZWCmcd("ep4PAR","mcod",11)=";  SCF items or rules (aka dotted-rule, item, )"
^ZWCmcd("ep4PAR","mcod",12)=";   ruLst:   _5 is ruLst a comma list of tokens- rule-names or terminal-set-names)"
^ZWCmcd("ep4PAR","mcod",13)=";   dot:  a ptr into the current ruLst comma pieces"
^ZWCmcd("ep4PAR","mcod",14)=";   Ips   is the input start pointer, Ips, into Ins (~input)"
^ZWCmcd("ep4PAR","mcod",15)=";   IPe   is the end-ptr into Ins, implicitly==Si in Lua"
^ZWCmcd("ep4PAR","mcod",16)=";   ruby"
^ZWCmcd("ep4PAR","mcod",17)=";   frm  What function created  {PRED, SCAN, COMP, Init }"
^ZWCmcd("ep4PAR","mcod",18)=";   ruC   Input chars consumed between IPs & IPe"
^ZWCmcd("ep4PAR","mcod",19)=";    "
^ZWCmcd("ep4PAR-BI1","mcod",41)=";* Si,Sj"
^ZWCmcd("ep4PAR-BI1","mcod",42)="BI1    S Si=Sbi,Sj=Sbj"
^ZWCmcd("ep4PAR-BI1","mcod",43)="       D GFL^kfm(itemFL) ; Si,Sj : ru*..."
^ZWCmcd("ep4PAR-BI1","mcod",44)="       S SSb=svSSq"
^ZWCmcd("ep4PAR-BI1","mcod",45)="         I Wmo[""I1"" D Witem^ep4W(""BI1"")"
^ZWCmcd("ep4PAR-BI1","mcod",46)="       ;D getR1^ep4W ; dot, ruLst : tokR1, tokTy"
^ZWCmcd("ep4PAR-BI1","mcod",47)="        ; rule loop, item-loop, "
^ZWCmcd("ep4PAR-BI1","mcod",48)="        ;"
^ZWCmcd("ep4PAR-BI1","mcod",49)="       D ^dv(""Log BI1+8 P-S-C choice"",""Sbi,Sbj,tokR1,tokTy,ruLst,dot,ruab,IPs,IPe"")"
^ZWCmcd("ep4PAR-BI1","mcod",50)="       I Sbi=Sei,Sbj=Sej DO  ;"
^ZWCmcd("ep4PAR-BI1","mcod",51)="         .W !!,""Bloop2:  SeiSej-"",! "
^ZWCmcd("ep4PAR-BI1","mcod",52)="         .D PZE(""Sei/Sej BLoop"",""Sei,Sej,tokTy,tokR1,dot,ruLst"")"
^ZWCmcd("ep4PAR-BI1","mcod",53)="       I tokR1=""""!(tokTy=""C"") S trc=""C:"" D COMPLETE(Sbi,Sbj,IPs,runa)  Q  ; "
^ZWCmcd("ep4PAR-BI1","mcod",54)="       I tokTy=""T"" S trc=""S:"" D SCAN(Sbi,Sbj,tokR1)  Q  ; token with + is terminal"
^ZWCmcd("ep4PAR-BI1","mcod",55)="       ; tokTy=""R"""
^ZWCmcd("ep4PAR-BI1","mcod",56)="       I tokTy'=""R"" D b^dv(""Err tokTy"",""tokTy,tokR1,ruab,dot,ruLst"")"
^ZWCmcd("ep4PAR-BI1","mcod",57)="       S trc=""P:"" D PRED(Sbi,Sbj,tokR1) Q ;inside loop chart items/rules2.9"
^ZWCmcd("ep4PAR-BI1","mcod",58)="       D b^dv(""Err illegal rule.?"",""tokR1,Sbi,Sbj"")"
^ZWCmcd("ep4PAR-BI1","mcod",59)="       Q"
^ZWCmcd("ep4PAR-COMPLETE","mcod",136)=";*"
^ZWCmcd("ep4PAR-COMPLETE","mcod",137)="COMPLETE(Sci,Scj,FIPs,Fna)  ;  S2i Fna~Found runa, FIPs~FOund IPs-> where to search"
^ZWCmcd("ep4PAR-COMPLETE","mcod",138)="       ;item  finished, item Sbi~Sci . Sbj~Scj  "
^ZWCmcd("ep4PAR-COMPLETE","mcod",139)="       I $G(Fna)="""" D b^dv(""Err Found runa/Fna null"",""Fna,runa,Sci,Scj"")"
^ZWCmcd("ep4PAR-COMPLETE","mcod",140)="       ;I Sci'=S2i D b^dv("" +++ COMP? Gotcha Sci'=S2i/(FIPs+1) "",""Sci,S2i,IPs,Fna"")"
^ZWCmcd("ep4PAR-COMPLETE","mcod",141)="       I (Sci_Scj)=(Sei_Sej) DO  ;"
^ZWCmcd("ep4PAR-COMPLETE","mcod",142)="         .W !!,""COMP SeiSej-"",! "
^ZWCmcd("ep4PAR-COMPLETE","mcod",143)="         .D PZE(""Sei/Sej COMP"",""Sei,Sej,FIPs,Fna"")"
^ZWCmcd("ep4PAR-COMPLETE","mcod",144)="       W:$X ! W ""COMP pre process ""_Sbi,""."",Sbj,""  "",Fna,"" ["",IPs,""-"",IPe,""] -> "",ruLst,""  "",!"
^ZWCmcd("ep4PAR-COMPLETE","mcod",145)="       S Sc2i=FIPs  ;1.6 init, =1 (Sci-1, "
^ZWCmcd("ep4PAR-COMPLETE","mcod",146)="       W:$X ! W ""C Srch IPs set"",Sc2i,"" for Fna in tokR1-""       "
^ZWCmcd("ep4PAR-COMPLETE","mcod",147)="       I Wmo[""COM"" D b^dv(""Log COMP to ck all of Sc2i for runa~Fna in tokR1"",""Sc2i,FIPs,Fna,trc"")"
^ZWCmcd("ep4PAR-COMPLETE","mcod",148)="       F Sc2j=1:1 Q:$D(SCF(Sc2i,Sc2j))=0  DO  ;  vs While, SCF(Sc2i) chgs?"
^ZWCmcd("ep4PAR-COMPLETE","mcod",149)="         .S Si=Sc2i,Sj=Sc2j"
^ZWCmcd("ep4PAR-COMPLETE","mcod",150)="         .S SSp=Sc2i_"".""_Sc2j"
^ZWCmcd("ep4PAR-COMPLETE","mcod",151)="         .D GFL^kfm(""tokR1,tokTy"",itemFL) ; Si,Sj : @itemFL"
^ZWCmcd("ep4PAR-COMPLETE","mcod",152)="         .I Fna'=tokR1 DO  Q  "
^ZWCmcd("ep4PAR-COMPLETE","mcod",153)="            ..W:$X ! W ""COMP sch Rej Fna=tokR1 ""_Sc2i_"".""_Sc2j_""  tokR1:""_tokR1,!"
^ZWCmcd("ep4PAR-COMPLETE","mcod",154)="         .;  Found C mch"
^ZWCmcd("ep4PAR-COMPLETE","mcod",155)="         .D GFL^kfm(""ruid,ruab,runa,ruLst,dot,IPs,IPe"",itemFL) ; Si,Sj : @itemFL   / old_item    IPs from item     "
^ZWCmcd("ep4PAR-COMPLETE","mcod",156)="         .I Wmo[""COM"" W:$X ! W "" * + Comp st "",Sc2i,""."",Sc2j,"" ."",dot,""  "",?40,ruLst,!    "
^ZWCmcd("ep4PAR-COMPLETE","mcod",157)="         .S dot=dot+1"
^ZWCmcd("ep4PAR-COMPLETE","mcod",158)="         .;D getR1^ep4W ; dot, ruLst : tokR1,tokTy"
^ZWCmcd("ep4PAR-COMPLETE","mcod",159)="         .S ruby=""COMP""      "
^ZWCmcd("ep4PAR-COMPLETE","mcod",160)="         .S Sc3i=Sci,IPe=Sc3i         "
^ZWCmcd("ep4PAR-COMPLETE","mcod",161)="         .S frm=""Cmplt fr:""_Sci_"".""_Scj_""(C) sub ""_tokR1_"" into ""_Sc2i_"".""_Sc2j_"",  new:""_Sc3i_"".*"""
^ZWCmcd("ep4PAR-COMPLETE","mcod",162)="         .D SSC(Sc3i,frm)  S Sc3j=Svj  ; where new stored"
^ZWCmcd("ep4PAR-COMPLETE","mcod",163)="         .I EQ D b^dv(""COMP rej Dupl "",""EQ,log,ruid,dot,IPs,Svj"")"
^ZWCmcd("ep4PAR-COMPLETE","mcod",164)="         .I 'EQ DO  ;"
^ZWCmcd("ep4PAR-COMPLETE","mcod",165)="           ..S log=""COMP done: fr Sb C: ""_Sci_"".""_Scj_"" bump ""_Sc2i_"".""_Sc2j_"" into- """
^ZWCmcd("ep4PAR-COMPLETE","mcod",166)="           ..S Citem=""  ""_Sc3i_"".""_Sc3j_"" #""_SSq_""  ""_ruab_""/""_ruid_"" -> .""_dot_"" [""_IPs_""-""_IPe_""] """
^ZWCmcd("ep4PAR-COMPLETE","mcod",167)="           ..I Sbi=Sei,Sbj=Sej W:$X ! W log,!,Citem,!"
^ZWCmcd("ep4PAR-COMPLETE","mcod",168)="           ..;D ^dv(""Log one new C item "",""Sci,Scj,Sc2i,Sc2j,Sc3i,Sc3j,dot,ruLst"")"
^ZWCmcd("ep4PAR-COMPLETE","mcod",169)="         .W:$X ! W "" * + COMP end-new "",Sci,""/"",Scj,"" ."",dot,""  "",?40,ruLst,!"
^ZWCmcd("ep4PAR-COMPLETE","mcod",170)="       Q"
^ZWCmcd("ep4PAR-EL2","mcod",60)=";*   end each inside loop"
^ZWCmcd("ep4PAR-EL2","mcod",61)="EL2    W:$X ! W ""End inner Bloop "",Sbi,"","",Sbj,""   trace:"",$G(trc),""  """
^ZWCmcd("ep4PAR-EL2","mcod",62)="       ;I $G(SCF(Sbi+1))="""" S SCF(Sbi+1)=0 ; just do $D test now, do not store count"
^ZWCmcd("ep4PAR-EL2","mcod",63)="       I Sbi=Sei,Sbj=Sej DO  ;"
^ZWCmcd("ep4PAR-EL2","mcod",64)="         .S M=""Log Bloop2 End Sel:Sei/j ""_Sbi_"".""_Sbj_""  """
^ZWCmcd("ep4PAR-EL2","mcod",65)="         .D PZE(M,""tokTy,tokR1,ruLst,tokCL,IPs,IPe,dot"")"
^ZWCmcd("ep4PAR-EL2","mcod",66)="       Q"
^ZWCmcd("ep4PAR-FLg1","mcod",240)=";*"
^ZWCmcd("ep4PAR-FLg1","mcod",241)="FLg1  ;;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep4PAR-FLg2","mcod",171)=";*"
^ZWCmcd("ep4PAR-FLg2","mcod",172)=";*  Save in SCF"
^ZWCmcd("ep4PAR-FLg2","mcod",173)=";Analog of Append and Unsafe-Append (sic,sic) functions"
^ZWCmcd("ep4PAR-FLg2","mcod",174)=";  Dont duplicate, loop til empty, punt if dupl"
^ZWCmcd("ep4PAR-FLg2","mcod",175)=";* @itemFL modified : SCF(Svi,Svj),  Svj, 'EQ => new at Svj/ EQ rej dupl"
^ZWCmcd("ep4PAR-FLg2","mcod",176)="FLg2  ;;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep4PAR-FLg3","mcod",133)=";*"
^ZWCmcd("ep4PAR-FLg3","mcod",134)="FLg3  ;;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep4PAR-FLg4","mcod",92)=";*"
^ZWCmcd("ep4PAR-FLg4","mcod",93)="FLg4  ;;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep4PAR-FLg5","mcod",38)=";*"
^ZWCmcd("ep4PAR-FLg5","mcod",39)="FLg5  ;;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep4PAR-FLi1","mcod",242)="FLi1  ;;itemFL:runa,ruab,ruid,ikey,SSq,IPs,IPe,dot,ruLst,tokR1,tokTy,ruby,frm_SCF(Si,Sj)"
^ZWCmcd("ep4PAR-FLi2","mcod",177)="FLi2  ;;itemFL:runa,ruab,ruid,ikey,SSq,IPs,IPe,dot,ruLst,tokR1,tokTy,ruby,frm_SCF(Si,Sj)"
^ZWCmcd("ep4PAR-FLi3","mcod",135)="FLi3  ;;itemFL:runa,ruab,ruid,ikey,SSq,IPs,IPe,dot,ruLst,tokR1,tokTy,ruby,frm_SCF(Si,Sj)"
^ZWCmcd("ep4PAR-FLi4","mcod",94)="FLi4  ;;itemFL:runa,ruab,ruid,ikey,SSq,IPs,IPe,dot,ruLst,tokR1,tokTy,ruby,frm_SCF(Si,Sj)"
^ZWCmcd("ep4PAR-FLi4","mcod",95)=""
^ZWCmcd("ep4PAR-FLi5","mcod",40)="FLi5  ;;itemFL:runa,ruab,ruid,ikey,SSq,IPs,IPe,dot,ruLst,tokR1,tokTy,ruby,frm_SCF(Si,Sj)"
^ZWCmcd("ep4PAR-MEX","mcod",208)=";*  ruid,IPs,IPe,dot -> ikey"
^ZWCmcd("ep4PAR-MEX","mcod",209)=";*  ikey MEP(SSq)=ikey, MExk(ikey)=SSq   ruid,IPs,dot : ikey"
^ZWCmcd("ep4PAR-MEX","mcod",210)="MEX    S ikey=ruid_""-""_dot_""-""_IPs_""-""_IPe"
^ZWCmcd("ep4PAR-MEX","mcod",211)="       S Iabe(ruab,IPe,SSq)=ikey"
^ZWCmcd("ep4PAR-MEX","mcod",212)="       S ISe(IPe,runa,SSq)=ikey"
^ZWCmcd("ep4PAR-MEX","mcod",213)="       S SS=Si_"".""_Sj"
^ZWCmcd("ep4PAR-MEX","mcod",214)="       S IR(SS)=$G(SSp)"
^ZWCmcd("ep4PAR-MEX","mcod",215)="       ;"
^ZWCmcd("ep4PAR-MEX","mcod",216)="       S x=$G(MEP(SSq)) I x'="""" D b^dv(""Err Repeat SSq?"",""SSq,ikey"")"
^ZWCmcd("ep4PAR-MEX","mcod",217)="       S MEP(SSq)=ikey"
^ZWCmcd("ep4PAR-MEX","mcod",218)="       S x=$G(MExk(ikey)) I x'="""" D b^dv(""Err Dupl ikey"",""ikey,SSq,IPe"")"
^ZWCmcd("ep4PAR-MEX","mcod",219)="       S MExk(ikey,SSq)=IPe"
^ZWCmcd("ep4PAR-MEX","mcod",220)="       Q"
^ZWCmcd("ep4PAR-NwP","mcod",79)=";*  try new dot,IPs,ruid from"
^ZWCmcd("ep4PAR-NwP","mcod",80)="NwP    ; tokP, gi > ruid /GR record"
^ZWCmcd("ep4PAR-NwP","mcod",81)="       S ruid=$G(Gxi(tokP,gi))"
^ZWCmcd("ep4PAR-NwP","mcod",82)="         I ruid="""" D b^dv(""Err ruid from Gxi(tokR1)"",""ruid,tokR1,gi"") Q"
^ZWCmcd("ep4PAR-NwP","mcod",83)="       D GFL^kfm(""ruab,runa,ruLst,IPs"",grFL)  ; ruid : ruLst, ruab  ? IPs"
^ZWCmcd("ep4PAR-NwP","mcod",84)="       S dot=1"
^ZWCmcd("ep4PAR-NwP","mcod",85)="       S ruby=""PRED""         "
^ZWCmcd("ep4PAR-NwP","mcod",86)="       S frm=""Pred fr:""_Spi_"".""_Spj"
^ZWCmcd("ep4PAR-NwP","mcod",87)="       S IPs=Sbi  ; IPs item.start"
^ZWCmcd("ep4PAR-NwP","mcod",88)="       I IPe'=Spi-1 D ^dv(""Err Inconsistenct IPe,Spi"",""IPe,Sci,Si,Sj"")"
^ZWCmcd("ep4PAR-NwP","mcod",89)="       ;S IPe=Spi-1  ; IPe is implicit always == Si-1?"
^ZWCmcd("ep4PAR-NwP","mcod",90)="       D SSC(Spi,frm) ; save in this Sbi~Spi State (same), if not dupl, Sbi at end"
^ZWCmcd("ep4PAR-NwP","mcod",91)="       Q"
^ZWCmcd("ep4PAR-PRED","mcod",67)=";*         "
^ZWCmcd("ep4PAR-PRED","mcod",68)=";*  Sbi, Sbj        "
^ZWCmcd("ep4PAR-PRED","mcod",69)="PRED(Spi,Spj,tokP)  ;NEW Spj"
^ZWCmcd("ep4PAR-PRED","mcod",70)="       W:$X ! W ""#"",SSq,"" PRED find '"",$G(tokP),""' in Gxi-> gi -> ruid"",!"
^ZWCmcd("ep4PAR-PRED","mcod",71)="       I $G(tokP)="""" D b^dv(""Err tokR1 should not be null here"",""tokP,tokR1,Sbi,Sbj,Spi"") Q"
^ZWCmcd("ep4PAR-PRED","mcod",72)="       I Spi'=Sbi D b^dv(""Maybe Err ?"",""Sbi,Spi,Spj"")"
^ZWCmcd("ep4PAR-PRED","mcod",73)="       I $D(Gxi(tokP))=0 D bug^dv(""Err tokR1 not in Gxi(tokR1/P"",""tokP"") Q"
^ZWCmcd("ep4PAR-PRED","mcod",74)="       S SSp=Spi_"".""_Spj  ;same each in gi loop"
^ZWCmcd("ep4PAR-PRED","mcod",75)="       ;For every grammar rule with name=tokP- runa,gi -> ruid"
^ZWCmcd("ep4PAR-PRED","mcod",76)="       F gi=1:1 Q:$D(Gxi(tokP,gi))=0   D NwP"
^ZWCmcd("ep4PAR-PRED","mcod",77)="       ;D PZE"
^ZWCmcd("ep4PAR-PRED","mcod",78)="       Q"
^ZWCmcd("ep4PAR-PZE","mcod",232)=";*"
^ZWCmcd("ep4PAR-PZE","mcod",233)="PZE(M,VL) USE $P W !!,"" *****  """
^ZWCmcd("ep4PAR-PZE","mcod",234)="      S VL=$G(VL) I VL="""" S VL=""mrid"""
^ZWCmcd("ep4PAR-PZE","mcod",235)="      I $G(M)'="""" D ^dv(M,VL)"
^ZWCmcd("ep4PAR-PZE","mcod",236)="      R !,""Pause (ret) . for Dir Mode"",!,"":"",X"
^ZWCmcd("ep4PAR-PZE","mcod",237)="      I $G(VL)="""" S VL=""Sbi,Sbj,ruid,ruab,tokR1,tokTy"""
^ZWCmcd("ep4PAR-PZE","mcod",238)="      I X[""."" D b^dv(""Pause "",VL)"
^ZWCmcd("ep4PAR-PZE","mcod",239)="      Q"
^ZWCmcd("ep4PAR-REX","mcod",205)=";*  Index back to sources - no refs yet"
^ZWCmcd("ep4PAR-REX","mcod",206)="REX    S Rex(SSq,dot,SSb)=LST"
^ZWCmcd("ep4PAR-REX","mcod",207)="       Q"
^ZWCmcd("ep4PAR-SCAN","mcod",96)=";*"
^ZWCmcd("ep4PAR-SCAN","mcod",97)=";* Sbi,Sbj  @itemGL  : mod SSC"
^ZWCmcd("ep4PAR-SCAN","mcod",98)="SCAN(Ssi,Ssj,tokR1) ;I Ssi=1 D ^dv(""No Input Si=1"",""Ssi,Ssj,tokR1"") Q"
^ZWCmcd("ep4PAR-SCAN","mcod",99)="       S IPc=Ssi"
^ZWCmcd("ep4PAR-SCAN","mcod",100)="       S mch=$$TMch(tokR1,IPc)"
^ZWCmcd("ep4PAR-SCAN","mcod",101)="       I 'mch Q  ;No match or past end, no mch"
^ZWCmcd("ep4PAR-SCAN","mcod",102)="       ;Here matched terminal, C in tokCL, ITcl(tokR1)"
^ZWCmcd("ep4PAR-SCAN","mcod",103)="       S dot=dot+1"
^ZWCmcd("ep4PAR-SCAN","mcod",104)="       S SSp=Ssi_"".""_Ssj"
^ZWCmcd("ep4PAR-SCAN","mcod",105)="       S frm=""SCAN term char '""_C_""'  fr:""_SSp"
^ZWCmcd("ep4PAR-SCAN","mcod",106)="       S Ssi2=Ssi+1"
^ZWCmcd("ep4PAR-SCAN","mcod",107)="       S IPe=Ssi ; ?"
^ZWCmcd("ep4PAR-SCAN","mcod",108)="       I Wmo[""SCs"" DO  ;"
^ZWCmcd("ep4PAR-SCAN","mcod",109)="         .S log=""SCAN mch ""_Sbi_"".""_Sbj_"" -> ""_Ssi2_"".*"""
^ZWCmcd("ep4PAR-SCAN","mcod",110)="         .D ^dv(log,""IPc,C,tokCL,IPs,IPe,dot"")"
^ZWCmcd("ep4PAR-SCAN","mcod",111)="       D SSC(Ssi2,frm)  ; Svj"
^ZWCmcd("ep4PAR-SCAN","mcod",112)="         I EQ D ^dv(""SSC Rej Dupl Scan Mch"",""EQ,mch,Ssi2,Svj"")"
^ZWCmcd("ep4PAR-SCAN","mcod",113)="       I Sbi=Sei,Sbj=Sej DO  ;"
^ZWCmcd("ep4PAR-SCAN","mcod",114)="         .W:$X ! W "" * end scan "",Ssi,""."",Ssj,"" -- "",Ssi2,""."",Svj,"" ?EQ~RejDup "",EQ,!"
^ZWCmcd("ep4PAR-SCAN","mcod",115)="         .D PZE(""End Scan Sei/Sej"",""EQ,Ssi2,Svj"")"
^ZWCmcd("ep4PAR-SCAN","mcod",116)="       Q"
^ZWCmcd("ep4PAR-SSC","mcod",178)="SSC(Svi,frm)  ;no NEW Svj- returned for debugging"
^ZWCmcd("ep4PAR-SSC","mcod",179)="       ;Find end AND ck for dupl to Punt on EQ~dupl"
^ZWCmcd("ep4PAR-SSC","mcod",180)="       S EQ=0 F Svj=1:1 Q:$D(SCF(Svi,Svj))=0   DO  Q:EQ  "
^ZWCmcd("ep4PAR-SSC","mcod",181)="         .S EQ=1 F vn=""ruid"",""dot"",""IPs"","""" Q:vn=""""  I @vn'=$G(SCF(Svi,Svj,vn)) S EQ=0 Q"
^ZWCmcd("ep4PAR-SSC","mcod",182)="         .;D ^dv(""Log EQ"",""EQ,vn,Svi,Svj,ruid,dot,IPs,frm,trc,ruby"")"
^ZWCmcd("ep4PAR-SSC","mcod",183)="       ;Punt if duplicate found:"
^ZWCmcd("ep4PAR-SSC","mcod",184)="       I EQ  DO  Q  ; punt when dupl exists already"
^ZWCmcd("ep4PAR-SSC","mcod",185)="          .S log=""X X X Rej Dupl ""_Svi_"".""_Svj_""  #""_ruid_"", .""_dot_"" s:""_IPs_""  frm:""_frm"
^ZWCmcd("ep4PAR-SSC","mcod",186)="          .I Wmo[""RejDup"" D ^dv(log,""Sbi,Sbj"")"
^ZWCmcd("ep4PAR-SSC","mcod",187)="          .W:$X ! W log,!"
^ZWCmcd("ep4PAR-SSC","mcod",188)="       ; Non-duplicate, save-"
^ZWCmcd("ep4PAR-SSC","mcod",189)="       S SSq=SSq+1,svSSq=SSq ;Serial items       "
^ZWCmcd("ep4PAR-SSC","mcod",190)="       S Si=Svi,Sj=Svj"
^ZWCmcd("ep4PAR-SSC","mcod",191)="       D getR1^ep4W ; dot, rulst : tokR1, tokTy"
^ZWCmcd("ep4PAR-SSC","mcod",192)="       D MEX ; ruid,IPs,dot,IPe : ikey"
^ZWCmcd("ep4PAR-SSC","mcod",193)="       ; Svj is new empty node, ie SCF(Svi,Svj    "
^ZWCmcd("ep4PAR-SSC","mcod",194)="       D SFL^kfm(""ruid,ikey,dot,IPs,IPe,runa,ruab,ruLst,frm,tokR1,tokTy,svSSq"",itemFL) ; Si=Svi, Sj=Svj new at end"
^ZWCmcd("ep4PAR-SSC","mcod",195)="       D TEX"
^ZWCmcd("ep4PAR-SSC","mcod",196)="       ;D REX  ;"
^ZWCmcd("ep4PAR-SSC","mcod",197)="       S log="" + + SSC: q""_SSq_""  ""_Si_"".""_Sj_""[""_IPs_""-""_IPe_""]  .""_dot_"" #""_ruid_"" ""_frm"
^ZWCmcd("ep4PAR-SSC","mcod",198)="       W:$X ! W log,!"
^ZWCmcd("ep4PAR-SSC","mcod",199)="       ;audit-"
^ZWCmcd("ep4PAR-SSC","mcod",200)="         ;I IPe'=(Svi-1) D b^dv(""Err explicit IPe vs Svi-1"",""tIPe,Svi,Svj"")"
^ZWCmcd("ep4PAR-SSC","mcod",201)="       I Wmo[""SSC"" DO  ;"
^ZWCmcd("ep4PAR-SSC","mcod",202)="         .W:$X ! W ""SSC New/nonDup SCF("",Svi,""."",Svj,"") = """
^ZWCmcd("ep4PAR-SSC","mcod",203)="         .W ?40,ruab,""  '"",ruLst,""' "",!"
^ZWCmcd("ep4PAR-SSC","mcod",204)="       Q:$Q ""New:""_Svi_"".""_Svj_""  ""_ruab Q"
^ZWCmcd("ep4PAR-TEX","mcod",221)=";*"
^ZWCmcd("ep4PAR-TEX","mcod",222)=";*  SS, wIC"
^ZWCmcd("ep4PAR-TEX","mcod",223)="TEX    NEW vi,vn,XL"
^ZWCmcd("ep4PAR-TEX","mcod",224)="       S X="""",XL=""ruid,dot,IPs,IPe"" F vi=1:1:$L(XL,"","") S vn=$P(XL,"","",vi) S $P(X,""_"",vi)=@vn"
^ZWCmcd("ep4PAR-TEX","mcod",225)="       S SS=Si_"".""_Sj"
^ZWCmcd("ep4PAR-TEX","mcod",226)="       S XSS(SSq)=SS"
^ZWCmcd("ep4PAR-TEX","mcod",227)="       S XSQ(SS)=SSq"
^ZWCmcd("ep4PAR-TEX","mcod",228)="       ; part two"
^ZWCmcd("ep4PAR-TEX","mcod",229)="       S wIC=""{""_$E(Ins,IPs,IPe)_""}"""
^ZWCmcd("ep4PAR-TEX","mcod",230)="       S DSQ(SSq)=Svi_"".""_Svj_""  ""_$G(wIC)  ;actual sequence"
^ZWCmcd("ep4PAR-TEX","mcod",231)="       Q"
^ZWCmcd("ep4PAR-TMch","mcod",117)=";* Terminal Match"
^ZWCmcd("ep4PAR-TMch","mcod",118)="TMch(tok,IPc)  NEW ruid,ruab,tokCL"
^ZWCmcd("ep4PAR-TMch","mcod",119)="       I IPc>$L(Ins) Q 0  ; No mch, past end"
^ZWCmcd("ep4PAR-TMch","mcod",120)="       S C=INc(IPc) I C="""" D b^dv(""Err C "",""C,IPc,Ssi,Ssj"") Q"
^ZWCmcd("ep4PAR-TMch","mcod",121)="       ;"
^ZWCmcd("ep4PAR-TMch","mcod",122)="       S ruid=$G(Gxi(tok,1))  ;only one gi for terminal tokens"
^ZWCmcd("ep4PAR-TMch","mcod",123)="         I ruid="""" D b^dv(""Err Scan finding ruid from tokR1"",""tokRa,tokTy,ruid"") Q 0"
^ZWCmcd("ep4PAR-TMch","mcod",124)="       S ruab=$G(GRk(ruid,""ruab""))"
^ZWCmcd("ep4PAR-TMch","mcod",125)="       S tokCL=$G(GRk(ruid,""tokCL""))"
^ZWCmcd("ep4PAR-TMch","mcod",126)="         I tokCL="""" D b^dv(""Err Char tokCL"",""tokCL,tokR1,tok,C"") Q 0"
^ZWCmcd("ep4PAR-TMch","mcod",127)="       ;"
^ZWCmcd("ep4PAR-TMch","mcod",128)="       D ^dv(""Log test Scan Mch "",""C,Ssi,tokR1"")"
^ZWCmcd("ep4PAR-TMch","mcod",129)="       S mch=tokCL[C"
^ZWCmcd("ep4PAR-TMch","mcod",130)="       I 'mch D ^dv(""Log non-match ""_C_""' not in ""_tokR1,""C,CL,tokR1,Ssi,Ssj"")"
^ZWCmcd("ep4PAR-TMch","mcod",131)="       I mch D ^dv(""Scan Matches "",""tok,C,tokCL,ruid"")"
^ZWCmcd("ep4PAR-TMch","mcod",132)="       Q mch"
^ZWCmcd("ep4PAR-initSC","mcod",243)=";*"
^ZWCmcd("ep4PAR-initSC","mcod",244)="initSC KILL SCF,MEP,MExk"
^ZWCmcd("ep4PAR-initSC","mcod",245)="       S SSq=0"
^ZWCmcd("ep4PAR-initSC","mcod",246)="       D ^ep2IMG  ; grFL, itemFL"
^ZWCmcd("ep4PAR-initSC","mcod",247)="       ;D ^kfmUafl(""umep"") ; already in ^ep2IMG  "
^ZWCmcd("ep4PAR-initSC","mcod",248)="       D NFL^kfm(itemFL)"
^ZWCmcd("ep4PAR-initSC","mcod",249)="       S ruid=1 D GFL^kfm(grFL) ; ruid, Sum.1, ruLst"
^ZWCmcd("ep4PAR-initSC","mcod",250)="       S frm=""Init""  ; Initial conditions"
^ZWCmcd("ep4PAR-initSC","mcod",251)="       S dot=1,IPs=1,IPe=0"
^ZWCmcd("ep4PAR-initSC","mcod",252)="       D getR1^ep4W ; dot, ruLst : tokTy, tokR1,tokCL"
^ZWCmcd("ep4PAR-initSC","mcod",253)="       S Si=1,Sj=1"
^ZWCmcd("ep4PAR-initSC","mcod",254)="       ;D SFL^kfm(itemFL)  ; Si,Sj   Alt to SSC, no need to ck dupl"
^ZWCmcd("ep4PAR-initSC","mcod",255)="       D SSC(Si,""Init ""_ruab)"
^ZWCmcd("ep4PAR-initSC","mcod",256)="       ;D ^dv(""Log Init 1.1"",""ruLst"")"
^ZWCmcd("ep4PAR-initSC","mcod",257)="       S ruid=2 D GFL^kfm(grFL)"
^ZWCmcd("ep4PAR-initSC","mcod",258)="       S dot=1,IPs=1,IPe=0"
^ZWCmcd("ep4PAR-initSC","mcod",259)="       D getR1^ep4W ; dot, ruLst : tokTy, tokR1,tokCL       "
^ZWCmcd("ep4PAR-initSC","mcod",260)="       ;S Sj=2 D SFL^kfm(itemFL)"
^ZWCmcd("ep4PAR-initSC","mcod",261)="       D SSC(Si,""Init ""_ruab)"
^ZWCmcd("ep4PAR-initSC","mcod",262)="       ;D ^dv(""Log Init 1.2"",""ruLst"")       "
^ZWCmcd("ep4PAR-initSC","mcod",263)="       Q"
^ZWCmcd("ep4PAR-initSC","mcod",264)=";*       "
^ZWCmcd("ep4PAR-initSC","mcod",265)="; GWUSCO"
^ZWCmcd("ep4PAR-initSC","mcod",266)=";i, Si, Sbi, Spi, Sci, Ssi, Swi,   Pass as args, dont bleed up"
^ZWCmcd("ep4PAR-initSC","mcod",267)=";j, Sj, Sbj, Spj, Scj, Ssk, Swj    Some NOT arg, just reuse, eg SSC  Svi,Svj"
^ZWCmcd("ep4PAR-initSC","mcod",268)="; i,Si~Ip ~IPc  pointer to INc()  inPointer "
^ZWCmcd("ep4PAR-initSC","mcod",269)=";"
^ZWCmcd("ep4PAR-initSC","mcod",270)="; SC State Chart  sic "
^ZWCmcd("ep4PAR-initSC","mcod",271)="; SCF(Si,Sj)  @itemFL "
^ZWCmcd("ep4PAR-initSC","mcod",272)=";"
^ZWCmcd("ep4PAR-main","mcod",30)="main   ; loop thru INputs, Ip BUILD analog"
^ZWCmcd("ep4PAR-main","mcod",31)="       D initSC ; KILL Arrays, SSq=0, First two items into SCF"
^ZWCmcd("ep4PAR-main","mcod",32)="        ;"
^ZWCmcd("ep4PAR-main","mcod",33)="       F Sbi=1:1 Q:$D(SCF(Sbi))=0  DO  ;"
^ZWCmcd("ep4PAR-main","mcod",34)="         .I Wmo[""BLp1"" W !!,""BUILD Outer Loop1 ["",Sbi,""] "",!"
^ZWCmcd("ep4PAR-main","mcod",35)="         .F Sbj=1:1 Q:$D(SCF(Sbi,Sbj))=0   D BI1  D EL2 ;"
^ZWCmcd("ep4PAR-main","mcod",36)="       I Wmo[""BLp1"" W:$X ! W ""End BUILD Outer Loop1 ["",Sbi,""] "",!"
^ZWCmcd("ep4PAR-main","mcod",37)="       Q"
^ZWCmcd("ep4PAR-top","mcod",20)="top    W !!,""Magic:  Parsing !"""
^ZWCmcd("ep4PAR-top","mcod",21)="       ;; {I1,BLp1,BLp2,COM,tokR1,SSC,RejDup,SCs,SCse}"
^ZWCmcd("ep4PAR-top","mcod",22)="       S Wmo=""SSC,RejDup,SCs,SCse""  ;"
^ZWCmcd("ep4PAR-top","mcod",23)="         S Sei=2,Sej=2 ; Bloop pre/post Break/Stop  - debug"
^ZWCmcd("ep4PAR-top","mcod",24)="       ;     "
^ZWCmcd("ep4PAR-top","mcod",25)="       D main"
^ZWCmcd("ep4PAR-top","mcod",26)="       D Wmdk^ep4W  ; Full Table HGen to mep-...mdk in dmep/"
^ZWCmcd("ep4PAR-top","mcod",27)="       I $G(devlog)'="""" USE $P D WSC^ep4W  ; also to $P"
^ZWCmcd("ep4PAR-top","mcod",28)="       Q"
^ZWCmcd("ep4PAR-top","mcod",29)="       ;"
^ZWCmcd("ep4RGA","mcod",1)="ep4RGA ;CKW/ESC i14feb23 umep./ rmep1/ ;20230214-66;Compile Grammar RG() : "
^ZWCmcd("ep4RGA","mcod",2)=";  From RGA^ep3/2G0  sr  after $T -> RG()  In:RG()  : GRk(ruid), "
^ZWCmcd("ep4RGA","mcod",3)=";"
^ZWCmcd("ep4RGA-GRR","mcod",35)=";* Gram Rule type"
^ZWCmcd("ep4RGA-GRR","mcod",36)="GRR   S ruLst=Lst"
^ZWCmcd("ep4RGA-GRR","mcod",37)="      S nLst=$L(ruLst,"","")"
^ZWCmcd("ep4RGA-GRR","mcod",38)="      D SFL^kfm(""ruLst"",grFL)  ; ruid, GRk(ruid)"
^ZWCmcd("ep4RGA-GRR","mcod",39)="      Q"
^ZWCmcd("ep4RGA-GRT","mcod",40)=";*  Terminal tok type"
^ZWCmcd("ep4RGA-GRT","mcod",41)="GRT   S tokCL=Lst"
^ZWCmcd("ep4RGA-GRT","mcod",42)="      S nLCL=$L(tokCL) "
^ZWCmcd("ep4RGA-GRT","mcod",43)="      I tokCL="""" D b^dv(""Err ty-T tokCL null"",""tokCL,nLCL,Lst"")"
^ZWCmcd("ep4RGA-GRT","mcod",44)="      I 'nLCL D b^dv(""Err ty-T tokCL"",""tokCL,nLCL,Lst"")"
^ZWCmcd("ep4RGA-GRT","mcod",45)="      D SFL^kfm(""tokCL"",grFL)  ; ruid, GRk(ruid)"
^ZWCmcd("ep4RGA-GRT","mcod",46)="      ;S TYx(runa)=ty ;repeats gi but same...  tok is runa only"
^ZWCmcd("ep4RGA-GRT","mcod",47)="      Q"
^ZWCmcd("ep4RGA-GRT","mcod",48)=";*"
^ZWCmcd("ep4RGA-RGA","mcod",4)=";*"
^ZWCmcd("ep4RGA-RGA","mcod",5)=";;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep4RGA-RGA","mcod",6)=";     RG() : GRk(ruid), ? Gxi"
^ZWCmcd("ep4RGA-RGA","mcod",7)="RGA      KILL GRk,Gxi ; not GRr,Gxq, no longer GRi"
^ZWCmcd("ep4RGA-RGA","mcod",8)="      D ^ep2IMG  ; grFL"
^ZWCmcd("ep4RGA-RGA","mcod",9)="      NEW ri,L,P1,Lst,ty"
^ZWCmcd("ep4RGA-RGA","mcod",10)="      NEW ruid,T,L,na,gi,ina,ruLst,ruab,rde,dot,IPs,IPe,naLua,tokCL"
^ZWCmcd("ep4RGA-RGA","mcod",11)="       S ruid=0,GRk=0,ty=""R"""
^ZWCmcd("ep4RGA-RGA","mcod",12)="       S gi=-99,ina=""??""  ; vs UNDEF if in/ina not found in 1st GR table entry..."
^ZWCmcd("ep4RGA-RGA","mcod",13)="      F ri=1:1:RG S L=$G(RG(ri)) DO  ;"
^ZWCmcd("ep4RGA-RGA","mcod",14)="         .; ina is rule/token name or left hand side, not repeated in my $T table"
^ZWCmcd("ep4RGA-RGA","mcod",15)="         .I $E(L)=""#"" Q         "
^ZWCmcd("ep4RGA-RGA","mcod",16)="         .I L[""++.."" S ty=""T"" Q ; fence to change ty to Terminals for rest"
^ZWCmcd("ep4RGA-RGA","mcod",17)="         .I $$DSP^dvc(L)="""" Q"
^ZWCmcd("ep4RGA-RGA","mcod",18)="         .S ruid=ruid+1"
^ZWCmcd("ep4RGA-RGA","mcod",19)="         .S P1=$P(L,"";""),Lna=$P(L,"";"",2),rde=$P(L,"";"",3)"
^ZWCmcd("ep4RGA-RGA","mcod",20)="         .S na=$P(P1,"" "") DO  "
^ZWCmcd("ep4RGA-RGA","mcod",21)="            ..I na'="""" S ina=na,gi=1  ;else leave ina"
^ZWCmcd("ep4RGA-RGA","mcod",22)="            ..E  S gi=gi+1"
^ZWCmcd("ep4RGA-RGA","mcod",23)="            ..S runa=ina"
^ZWCmcd("ep4RGA-RGA","mcod",24)="            ..S ruab=runa_"".""_gi"
^ZWCmcd("ep4RGA-RGA","mcod",25)="         .S Lst=$$DSP^dvc($P(P1,"" "",2,99)) ; after na, ruLst or tokCL No spaces vs $C(20)"
^ZWCmcd("ep4RGA-RGA","mcod",26)="         .S ruty=ty"
^ZWCmcd("ep4RGA-RGA","mcod",27)="         .D SFL^kfm(""runa,ruab,Lna,rde,ruty"",grFL) ; : GRk(ruid,"
^ZWCmcd("ep4RGA-RGA","mcod",28)="         .  S GRk=ruid ; Count"
^ZWCmcd("ep4RGA-RGA","mcod",29)="         .S Gxi(runa,gi)=ruid       "
^ZWCmcd("ep4RGA-RGA","mcod",30)="         .I ty=""R"" D GRR Q"
^ZWCmcd("ep4RGA-RGA","mcod",31)="         .I ty=""T"" D GRT Q"
^ZWCmcd("ep4RGA-RGA","mcod",32)="         .D b^dv(""Err grammar ^""_$T(+0),""ruid,runa,ruab,ty,Lst,ruLst"")"
^ZWCmcd("ep4RGA-RGA","mcod",33)="       KILL RG  ;Cleanup"
^ZWCmcd("ep4RGA-RGA","mcod",34)="       Q"
^ZWCmcd("ep4W","mcod",1)="ep4W  ;CKW/ESC i31oct22 umbr./ rmep2/ ;20221031-60;Write sr for parser data structures"
^ZWCmcd("ep4W","mcod",2)=";"
^ZWCmcd("ep4W","mcod",3)=";"
^ZWCmcd("ep4W","mcod",4)=";"
^ZWCmcd("ep4W-DSP","mcod",187)=";* Copy from ^dvs  same as ^dvc"
^ZWCmcd("ep4W-DSP","mcod",188)=" ;Replace all dbl spaces (or more) with single, and remove starting/ending"
^ZWCmcd("ep4W-DSP","mcod",189)="DSP(X) NEW i F i=0:1 Q:X'[""  ""  S X=$P(X,""  "")_"" ""_$P(X,""  "",2,9999)"
^ZWCmcd("ep4W-DSP","mcod",190)=" Q $$TSP(X)"
^ZWCmcd("ep4W-DSP","mcod",191)=" ; Remove start and end spaces (only)"
^ZWCmcd("ep4W-FLg0","mcod",69)=";*  GRk(ruid)=@grFL,   Gxi(runa,gi)=ruid ?"
^ZWCmcd("ep4W-FLg0","mcod",70)="FLg0   ;;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep4W-FLg0","mcod",71)=";"
^ZWCmcd("ep4W-FLg0","mcod",72)="; This is all static after init setup by IG"
^ZWCmcd("ep4W-FLg1","mcod",94)=";*"
^ZWCmcd("ep4W-FLg1","mcod",95)="FLg1   ;;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep4W-FLi1","mcod",96)="FLi1   ;;itemFL:runa,ruab,ruid,ikey,svSSq,IPs,IPe,dot,ruLst,tokR1,tokTy,ruby,frm_SCF(Si,Sj)"
^ZWCmcd("ep4W-FO","mcod",34)=";*  : LST  "
^ZWCmcd("ep4W-FO","mcod",35)="FO(dot,ruLst) ;D bug^dv Q"
^ZWCmcd("ep4W-FO","mcod",36)="       S LST="""" F ti=1:1:$L(ruLst,"","") DO  ;"
^ZWCmcd("ep4W-FO","mcod",37)="         .I ti<0 S LST=LST_""      "" Q"
^ZWCmcd("ep4W-FO","mcod",38)="         .I ti=dot S LST=LST_""  *   ""  ;continue"
^ZWCmcd("ep4W-FO","mcod",39)="         .S tok=$P(ruLst,"","",ti) "
^ZWCmcd("ep4W-FO","mcod",40)="         .I tok="""" S tok=""      """
^ZWCmcd("ep4W-FO","mcod",41)="         .S tok=tok_$E(""       "",$L(tok),6) I $L(tok)'=7 D b^dv(""Err pad"",""tok,dot,ri"")"
^ZWCmcd("ep4W-FO","mcod",42)="         .S LST=LST_tok"
^ZWCmcd("ep4W-FO","mcod",43)="       Q"
^ZWCmcd("ep4W-Itab","mcod",138)=";*"
^ZWCmcd("ep4W-Itab","mcod",139)="Itab(WL)   KILL tb S tb=7  NEW w,i"
^ZWCmcd("ep4W-Itab","mcod",140)="       I $G(WL)="""" S WL=""3,3,10,15,15,15,15,20"" ; ? something"
^ZWCmcd("ep4W-Itab","mcod",141)="       F i=1:1:$L(WL,"","") S w=$P(WL,"","",i),tb(i)=tb,tb=tb+w"
^ZWCmcd("ep4W-Itab","mcod",142)="       Q"
^ZWCmcd("ep4W-Q","mcod",59)=";* Common Exit"
^ZWCmcd("ep4W-Q","mcod",60)="Q      Q:$Q Q D:Q'="""" qd Q"
^ZWCmcd("ep4W-Qb","mcod",61)="Qb     D qd Q:$Q Q Q"
^ZWCmcd("ep4W-SVpg","mcod",64)=";*"
^ZWCmcd("ep4W-SVpg","mcod",65)="SVpg(id,txt,url)"
^ZWCmcd("ep4W-SVpg","mcod",66)="       NEW Q S Q="""" ;I $$arg^?(""id,txt,url"") Goto Qb"
^ZWCmcd("ep4W-SVpg","mcod",67)="       D SFL^kfm(""txt,url"",""_^MEg(id)"")  ; no *FL"
^ZWCmcd("ep4W-SVpg","mcod",68)="       Goto Q"
^ZWCmcd("ep4W-TSP","mcod",192)="TSP(X) NEW i S X=$TR(X,$C(9)_$C(10)_$C(13),""   "")  ;replace tab,lf,cr with space"
^ZWCmcd("ep4W-TSP","mcod",193)=" I $E($G(X))="" "" F i=1:1:$L(X) I $E(X,i)'="" "" S X=$E(X,i,999) Q"
^ZWCmcd("ep4W-TSP","mcod",194)=" I $E(X,$L(X))="" "" F i=$L(X):-1:1 I $E(X,i)'="" "" S X=$E(X,1,i) Q"
^ZWCmcd("ep4W-TSP","mcod",195)=" I X="" "" S X=""""  ; Funny case all spaces  vs end i=0 second line ?"
^ZWCmcd("ep4W-TSP","mcod",196)=" Q X"
^ZWCmcd("ep4W-TSP","mcod",197)=";* "
^ZWCmcd("ep4W-TSQ","mcod",7)=";*"
^ZWCmcd("ep4W-TSQ","mcod",8)=";"
^ZWCmcd("ep4W-TSQ","mcod",9)=";   tsq.  ^epqMenu"
^ZWCmcd("ep4W-TSQ","mcod",10)=";*  Trace IR(SSp)=prior SSp=Si.Sj"
^ZWCmcd("ep4W-TSQ","mcod",11)="TSQ(SS)  ;I '$G(SS) D bug^dv Q"
^ZWCmcd("ep4W-TSQ","mcod",12)="       I $D(SCF)=0 D bug^dv(""NO SCF()"",""SCF"") Q"
^ZWCmcd("ep4W-TSQ","mcod",13)="       S SS=10.3  ;complete parse"
^ZWCmcd("ep4W-TSQ","mcod",14)="       USE $P W:$X ! W ""Trace SSp- "",SS"
^ZWCmcd("ep4W-TSQ","mcod",15)="       F qi=1:1  Q:'SS  S Si=$P(SS,"".""),Sj=$P(SS,""."",2) D W1Sij S SS=$G(IR(SS)) Q:'SS"
^ZWCmcd("ep4W-TSQ","mcod",16)="       W !"
^ZWCmcd("ep4W-TSQ","mcod",17)="       Q"
^ZWCmcd("ep4W-W1Sij","mcod",115)="W1Sij   D GFL^jfm(""svSSq,ruid,ruab,ruLst,dot,IPs,IPe,tokR1,tokTy,frm"",itemFL) ;"
^ZWCmcd("ep4W-W1Sij","mcod",116)="       D Witem"
^ZWCmcd("ep4W-W1Sij","mcod",117)="       Q"
^ZWCmcd("ep4W-W1Sq","mcod",111)=";*           "
^ZWCmcd("ep4W-W1Sq","mcod",112)="W1Sq(SSq)  ;"
^ZWCmcd("ep4W-W1Sq","mcod",113)="       S SS=DSQ(SSq),Si=$P(SS,"".""),Sj=$P(SS,""."",2)"
^ZWCmcd("ep4W-W1Sq","mcod",114)="         ;falls thru  alt entry/SSq vs Si,Sj input"
^ZWCmcd("ep4W-WG1","mcod",86)=";*  ruid, @grFL "
^ZWCmcd("ep4W-WG1","mcod",87)="WG1    W:$X ! W "" "",ruid,"" ""   NEW x"
^ZWCmcd("ep4W-WG1","mcod",88)="       W ?4,ruab,"" """
^ZWCmcd("ep4W-WG1","mcod",89)="       W ?14,"" -> "",ruty,""  "",xLst,""  """
^ZWCmcd("ep4W-WG1","mcod",90)="       I Lna'="""" W ?40,Lna,""  """
^ZWCmcd("ep4W-WG1","mcod",91)="       I rde'="""" S x=40 S:$X>40 x=55 W ?x,rde,"" """
^ZWCmcd("ep4W-WG1","mcod",92)="       W !"
^ZWCmcd("ep4W-WG1","mcod",93)="       Q"
^ZWCmcd("ep4W-WG2","mcod",83)=";*  Derive alt fields : rugi"
^ZWCmcd("ep4W-WG2","mcod",84)="WG2    S rugi=$P(ruab,""."",2)"
^ZWCmcd("ep4W-WG2","mcod",85)="       Q"
^ZWCmcd("ep4W-WGR","mcod",73)="WGR    I $D(GRk)=0 D bug^dv(""Array GRk UNDEF."",""GRk,Gxi"") Q"
^ZWCmcd("ep4W-WGR","mcod",74)="       I $D(Gxi)=0 D bug^dv(""Array Gxi UNDEF."",""GRk,Gxi"") Q"
^ZWCmcd("ep4W-WGR","mcod",75)="       W !!,"" Grammar GRk() rules-"""
^ZWCmcd("ep4W-WGR","mcod",76)="       D ^ep2IMG ; : grFL"
^ZWCmcd("ep4W-WGR","mcod",77)="       NEW ruid,ruab,ina,rugi,ruab,ti,rde,runa,ruLst,tok"
^ZWCmcd("ep4W-WGR","mcod",78)="       F ruid=1:1  Q:$D(GRk(ruid))=0    DO  ;"
^ZWCmcd("ep4W-WGR","mcod",79)="         .D GFL^kfm(grFL)"
^ZWCmcd("ep4W-WGR","mcod",80)="         .S xLst=ruLst_tokCL ; either or"
^ZWCmcd("ep4W-WGR","mcod",81)="         .D WG2,WG1"
^ZWCmcd("ep4W-WGR","mcod",82)="       Q"
^ZWCmcd("ep4W-WIN","mcod",179)=";*"
^ZWCmcd("ep4W-WIN","mcod",180)=";*   INc()   Itb()"
^ZWCmcd("ep4W-WIN","mcod",181)="WIN   W:$X ! W !,""Inputs-""   NEW wi"
^ZWCmcd("ep4W-WIN","mcod",182)="      I $G(Ins) W !,""In str '"",Ins,""'  """
^ZWCmcd("ep4W-WIN","mcod",183)="      W !,""Ip: "" F wi=1:1:INc W ?Itb(wi),wi,"" """
^ZWCmcd("ep4W-WIN","mcod",184)="      W !,""lit "" F wi=1:1:INc W ?Itb(wi),INc(wi),"" """
^ZWCmcd("ep4W-WIN","mcod",185)="      W !"
^ZWCmcd("ep4W-WIN","mcod",186)="      Q"
^ZWCmcd("ep4W-WLLua","mcod",160)=";*  Write one item ala Lua Loup format for comparison"
^ZWCmcd("ep4W-WLLua","mcod",161)="; WNa substitutes full Lua name"
^ZWCmcd("ep4W-WLLua","mcod",162)="; @itemFL, Si,Sj,  runa, ruLst, dot, IPs"
^ZWCmcd("ep4W-WLLua","mcod",163)="WLLua()  ;"
^ZWCmcd("ep4W-WLLua","mcod",164)="       NEW ti,tok"
^ZWCmcd("ep4W-WLLua","mcod",165)="       W Lna,"" "",?8,"" -> """
^ZWCmcd("ep4W-WLLua","mcod",166)="       F ti=1:1:$L(ruLst,"","")+1 S tok=$P(ruLst,"","",ti) DO"
^ZWCmcd("ep4W-WLLua","mcod",167)="         .I (dot)=ti W "" *     """
^ZWCmcd("ep4W-WLLua","mcod",168)="         .I tok="""" Q  ; no more tok, extra to do dot at end"
^ZWCmcd("ep4W-WLLua","mcod",169)="         .S ruid=$G(Gxi(tok,1)) I 'ruid S Q=""Missing Lna of ""_tok Q"
^ZWCmcd("ep4W-WLLua","mcod",170)="         .S tokLna=$G(GRk(ruid,""Lna""))"
^ZWCmcd("ep4W-WLLua","mcod",171)="         .I tokLna="""" DO  ;"
^ZWCmcd("ep4W-WLLua","mcod",172)="            ..D b^dv(""Err Missing Lna of tok"",""tokLna,tok,WNa,ti,rulst"")"
^ZWCmcd("ep4W-WLLua","mcod",173)="            ..S tokLna="" ??? """
^ZWCmcd("ep4W-WLLua","mcod",174)="         .W tokLna,$J("""",10-$L(tokLna))  ;pad to fixed width"
^ZWCmcd("ep4W-WLLua","mcod",175)="       S LuaIPs=IPs-1"
^ZWCmcd("ep4W-WLLua","mcod",176)="       I IPs="""" S LuaIPs=""?"""
^ZWCmcd("ep4W-WLLua","mcod",177)="       W ?50,""("",LuaIPs,"")"",!"
^ZWCmcd("ep4W-WLLua","mcod",178)="       Q"
^ZWCmcd("ep4W-WS","mcod",104)=";*  SCF(Si)"
^ZWCmcd("ep4W-WS","mcod",105)="WS(Si,M)  W:$X ! W !,""  SEarly:"",Si-1,""   ====++Si "",Si,"" ++====  """
^ZWCmcd("ep4W-WS","mcod",106)="       S C=$E(Ins,Si) I C'="""" W "" In:'"",C,""'"",!"
^ZWCmcd("ep4W-WS","mcod",107)="       NEW runa,ruab,IPs,IPe,IC,dot,ruLst,nLst,tokR1,ruDone,ruby,rufrm"
^ZWCmcd("ep4W-WS","mcod",108)="       F Sj=1:1 Q:$D(SCF(Si,Sj))=0   D W1Sij  ;"
^ZWCmcd("ep4W-WS","mcod",109)="       W !"
^ZWCmcd("ep4W-WS","mcod",110)="       Q"
^ZWCmcd("ep4W-WSC","mcod",97)=";*  SCF()  Write all, Lua Loup Compatible output lines"
^ZWCmcd("ep4W-WSC","mcod",98)=";* Called by Wmdk to save as file"
^ZWCmcd("ep4W-WSC","mcod",99)="WSC(M) W !!,"" Complete Table-"",!!"
^ZWCmcd("ep4W-WSC","mcod",100)="       NEW Si,Sj    "
^ZWCmcd("ep4W-WSC","mcod",101)="       F Si=1:1 Q:$D(SCF(Si))=0  D WS(Si)"
^ZWCmcd("ep4W-WSC","mcod",102)="       USE $P W !!"
^ZWCmcd("ep4W-WSC","mcod",103)="       Q"
^ZWCmcd("ep4W-WSCLua","mcod",143)=";*     * * * *"
^ZWCmcd("ep4W-WSCLua","mcod",144)=";*  SCF()  Write all, Lua Loup Compatible output lines"
^ZWCmcd("ep4W-WSCLua","mcod",145)=";* Called by Wmdk to save as file"
^ZWCmcd("ep4W-WSCLua","mcod",146)="WSCLua W !!,"" Complete Lua Table-"",!!"
^ZWCmcd("ep4W-WSCLua","mcod",147)="       NEW Si,Sj    "
^ZWCmcd("ep4W-WSCLua","mcod",148)="       F Si=1:1 Q:$D(SCF(Si))=0  D WSL(Si)"
^ZWCmcd("ep4W-WSCLua","mcod",149)="       USE $P W !!"
^ZWCmcd("ep4W-WSCLua","mcod",150)="       Q"
^ZWCmcd("ep4W-WSL","mcod",151)=";*  SCF(Si)"
^ZWCmcd("ep4W-WSL","mcod",152)="WSL(Si)  W:$X ! W !,""     ====== "",Si-1,"" ======"",!"
^ZWCmcd("ep4W-WSL","mcod",153)="       NEW runa,ruab,IPs,IPe,IC,dot,ruLst,nLst,tokR1,ruDone,ruby,rufrm"
^ZWCmcd("ep4W-WSL","mcod",154)="       F Sj=1:1 Q:$D(SCF(Si,Sj))=0   DO  ;"
^ZWCmcd("ep4W-WSL","mcod",155)="         .D GFL^jfm(""svSSq,ruid,ruab,runa,ruLst,dot,IPs,IPe,tokR1,tokTy,frm"",itemFL) ;"
^ZWCmcd("ep4W-WSL","mcod",156)="         .S Lna=$G(GRk(ruid,""Lna""))"
^ZWCmcd("ep4W-WSL","mcod",157)="         .D WLLua"
^ZWCmcd("ep4W-WSL","mcod",158)="       W !"
^ZWCmcd("ep4W-WSL","mcod",159)="       Q"
^ZWCmcd("ep4W-Witem","mcod",118)=";*  Write One item  Maximize Utility mep  vs WS ala Earley/LoupLua"
^ZWCmcd("ep4W-Witem","mcod",119)=";*  Si,Sj, @itemFL  ruid,ruab,ruLst,dot,IPs,   IPe,tokR1,tokTy"
^ZWCmcd("ep4W-Witem","mcod",120)="Witem(M)  NEW i,tok"
^ZWCmcd("ep4W-Witem","mcod",121)="       D Itab(""10,10,5,8,8,8,12,10,10"") ; : tb(i) from width list"
^ZWCmcd("ep4W-Witem","mcod",122)="       S M=$G(M) I M'="""" S M=M_"": "" "
^ZWCmcd("ep4W-Witem","mcod",123)="       S IC=$E(Ins,IPs,IPe)"
^ZWCmcd("ep4W-Witem","mcod",124)="       W:$X ! W !"
^ZWCmcd("ep4W-Witem","mcod",125)="       I $G(frm)'="""" W ?5,frm,! ;D b^dv(""Log frm"",""frm"")"
^ZWCmcd("ep4W-Witem","mcod",126)="       W M,svSSq,"" "",?3,Si,""."",Sj,"" "",ruab,""/"",ruid,""  "" "
^ZWCmcd("ep4W-Witem","mcod",127)="       D FO(dot,ruLst) ; : LST"
^ZWCmcd("ep4W-Witem","mcod",128)="       ;S FL=""runa,IPs,IPe,dot,LST,..."
^ZWCmcd("ep4W-Witem","mcod",129)="       W ?tb(2),"" -> """
^ZWCmcd("ep4W-Witem","mcod",130)="       W ""{"",$G(IC),""}  ."",dot,"" """
^ZWCmcd("ep4W-Witem","mcod",131)="       S tb=2 F i=1:1:$L(ruLst,"","")+1 S tok=$P(ruLst,"","",i) DO  "
^ZWCmcd("ep4W-Witem","mcod",132)="         .S tb=tb+1 I dot=i W ?tb(tb),""  *  "" S tb=tb+1"
^ZWCmcd("ep4W-Witem","mcod",133)="         .I tok'="""" W ?tb(tb),tok,"" """
^ZWCmcd("ep4W-Witem","mcod",134)="       W ?tb(7),$G(tokTy),"" "",$G(tokR1),"" """
^ZWCmcd("ep4W-Witem","mcod",135)="       W ?tb(8),"" {"",IPs,""-"",$G(IPe),""} """
^ZWCmcd("ep4W-Witem","mcod",136)="       W:$X !"
^ZWCmcd("ep4W-Witem","mcod",137)="       Q"
^ZWCmcd("ep4W-Wmdk","mcod",44)=";*  Dump GRk and SCF  to mep-SCF.mdk  in dmep  admep to compile"
^ZWCmcd("ep4W-Wmdk","mcod",45)="Wmdk   NEW Q S Q=""""  D ^devIB  ; : PB"
^ZWCmcd("ep4W-Wmdk","mcod",46)="       S Fil=""mep-v4-SCF.mdk"""
^ZWCmcd("ep4W-Wmdk","mcod",47)="       S devm=PB_""dmep/""_Fil"
^ZWCmcd("ep4W-Wmdk","mcod",48)="       S Q=$$OFW^devIO(devm) I Q'="""" Goto Q"
^ZWCmcd("ep4W-Wmdk","mcod",49)="       USE devm"
^ZWCmcd("ep4W-Wmdk","mcod",50)="       W:$X ! W ""== mep Tables  ^ep4*  rmep4/  "",!"
^ZWCmcd("ep4W-Wmdk","mcod",51)="       W !!,""--"",!,"" Grammar then SCF State Tables Dump"",!!"
^ZWCmcd("ep4W-Wmdk","mcod",52)="       D WSC"
^ZWCmcd("ep4W-Wmdk","mcod",53)="       D WSCLua"
^ZWCmcd("ep4W-Wmdk","mcod",54)="       ;D WGR       "
^ZWCmcd("ep4W-Wmdk","mcod",55)="       W !!,""--"",!"
^ZWCmcd("ep4W-Wmdk","mcod",56)="       D CFM^devIO(devm)"
^ZWCmcd("ep4W-Wmdk","mcod",57)="       D SVpg(""SCF"",""SCF and Grammar mdk"",devm)"
^ZWCmcd("ep4W-Wmdk","mcod",58)="       Goto Q"
^ZWCmcd("ep4W-getR1","mcod",18)=";*"
^ZWCmcd("ep4W-getR1","mcod",19)=";*  dot, ruLst : nLst, tokR1, tokTy {R,T, C}"
^ZWCmcd("ep4W-getR1","mcod",20)="getR1  I $G(dot)="""" D bug^dv Q"
^ZWCmcd("ep4W-getR1","mcod",21)="       I 'dot D b^dv(""dot NOT zero"",""dot,ruid,ruab"") Q"
^ZWCmcd("ep4W-getR1","mcod",22)="       ; dot=1 init, dot points to first in ruLst"
^ZWCmcd("ep4W-getR1","mcod",23)="       I $G(ruLst)="""" S Q=""Err no ruLst arg getR1^""_$T(+0) D b^dv(Q,""Q,ruLst,ruid,dot"") Q"
^ZWCmcd("ep4W-getR1","mcod",24)="       S nLst=$L(ruLst,"","")"
^ZWCmcd("ep4W-getR1","mcod",25)="       S tokR1=$P(ruLst,"","",dot)"
^ZWCmcd("ep4W-getR1","mcod",26)="       I tokR1="""" DO  ;"
^ZWCmcd("ep4W-getR1","mcod",27)="         .S tokTy=""C"""
^ZWCmcd("ep4W-getR1","mcod",28)="         .I dot'=(nLst+1) D b^dv(""C dot ?"",""dot,nLst,ruLst,tokR1,tokTy"")"
^ZWCmcd("ep4W-getR1","mcod",29)="       I tokR1'="""" S tokTy=""R"" I $E(tokR1)?1U S tokTy=""T"""
^ZWCmcd("ep4W-getR1","mcod",30)="        I $G(Wmo)[""tokR1"" DO  ;"
^ZWCmcd("ep4W-getR1","mcod",31)="           .W:$X ! W ""sr tokR1 "",Si,""."",Sj,"" ."",dot,"" in "",ruLst,""' """
^ZWCmcd("ep4W-getR1","mcod",32)="           .W ""  ->"",tokR1,"" ty:"",tokTy,!"
^ZWCmcd("ep4W-getR1","mcod",33)="       Q"
^ZWCmcd("ep4W-qd","mcod",62)="qd     D b^dv(""Err ^""_$T(+0),""ruid,ruab,ruLst"")"
^ZWCmcd("ep4W-qd","mcod",63)="       Q"
^ZWCmcd("ep4W-top","mcod",5)=";*"
^ZWCmcd("ep4W-top","mcod",6)="top    D b^dv(""No top entry -^""_$T(+0),""ruid"")"
^ZWCmcd("ep4go","mcod",1)="ep4G0  ;CKW/ESC i31oct22  km3a/ umbr./ rmw1/ ;20230111-50;Start mep mumps earley Parser, Compile Grammar"
^ZWCmcd("ep4go","mcod",2)=";  Compile Grammar, Read toi, Compile -> GRk(ruid)=RPgr, Gxi("
^ZWCmcd("ep4go","mcod",3)=";"
^ZWCmcd("ep4go","mcod",4)=";"
^ZWCmcd("ep4go-FLg1","mcod",24)=";*"
^ZWCmcd("ep4go-FLg1","mcod",25)=";*"
^ZWCmcd("ep4go-FLg1","mcod",26)="FLg1  ;;grFL:runa,ruab,ruty,ruLst,nLst,tokCL,nLCL,Lna,rde_GRk(ruid)"
^ZWCmcd("ep4go-FLg1","mcod",27)=";"
^ZWCmcd("ep4go-FLg1","mcod",28)=";*  * * *"
^ZWCmcd("ep4go-FLg1","mcod",29)=""
^ZWCmcd("ep4go-FLg1","mcod",30)=";*"
^ZWCmcd("ep4go-FLg1","mcod",31)="      "
^ZWCmcd("ep4go-FLg1","mcod",32)=""
^ZWCmcd("ep4go-Q","mcod",18)=";*      "
^ZWCmcd("ep4go-Q","mcod",19)=";* Common Exit"
^ZWCmcd("ep4go-Q","mcod",20)="Q      Q:$Q Q D:Q'="""" qd Q"
^ZWCmcd("ep4go-Qb","mcod",21)="Qb     D qd Q:$Q Q Q"
^ZWCmcd("ep4go-qd","mcod",22)="qd     D b^dv(""Err ^""_$T(+0),""ruid,ruab,ruLst"")"
^ZWCmcd("ep4go-qd","mcod",23)="       Q"
^ZWCmcd("ep4go-top","mcod",5)="top   D ^ep2IMG  ; grGL, itemFL"
^ZWCmcd("ep4go-top","mcod",6)="      S Q=$$devlog^devIO(""MEP-log.html"",""ww2mbr/"") I Q'="""" D bug^dv Q"
^ZWCmcd("ep4go-top","mcod",7)="      USE devlog"
^ZWCmcd("ep4go-top","mcod",8)="      D ^epGRdemo  ; Read Init Demo Grammar from file rmep4/aDemo-Grammar.toi"
^ZWCmcd("ep4go-top","mcod",9)="        D WGR^ep4W  ;Display Grammar GRk(ruid)"
^ZWCmcd("ep4go-top","mcod",10)="      ; S Ins=""1+(2*3-4)"""
^ZWCmcd("ep4go-top","mcod",11)="      ; D ^ep4IN(Ins)  ; : INc(Ip),INty(Ip)"
^ZWCmcd("ep4go-top","mcod",12)="       D WIN^ep4W  ; Display Ins, INc(), INty()"
^ZWCmcd("ep4go-top","mcod",13)="      ;"
^ZWCmcd("ep4go-top","mcod",14)="      D ^ep4PAR  ;vers 4"
^ZWCmcd("ep4go-top","mcod",15)="      ;D PT^ep4W   ; Dis parse tree"
^ZWCmcd("ep4go-top","mcod",16)="      D clog^devlog"
^ZWCmcd("ep4go-top","mcod",17)="      Q"
^ZWCmcd("epGRdemo","mcod",1)="epGRdemo ;CKW/ESC i14feb23"
^ZWCmcd("epGRdemo","mcod",2)=";  : RG() of Demo Grammar"
^ZWCmcd("epGRdemo","mcod",3)=";"
^ZWCmcd("epGRdemo-GR00","mcod",4)=";*  : RG()  aDemo-Grammar.toi"
^ZWCmcd("epGRdemo-GR00","mcod",5)="GR00  S devRG=""/home/kw/km3a/umep/rmep4/aDemo-Grammar.toi"""
^ZWCmcd("epGRdemo-GR00","mcod",6)="      S Q=$$^devRD(devRG,,""RG"") I Q'="""" Goto Qb"
^ZWCmcd("epGRdemo-GR00","mcod",7)="      Goto Q"
^ZWCmcd("epGRdemo-Q","mcod",8)=";*"
^ZWCmcd("epGRdemo-Q","mcod",9)=";* Common Exit"
^ZWCmcd("epGRdemo-Q","mcod",10)="Q      Q:$Q Q D:Q'="""" qd Q"
^ZWCmcd("epGRdemo-Qb","mcod",11)="Qb     D qd Q:$Q Q Q"
^ZWCmcd("epGRdemo-qd","mcod",12)="qd     D b^dv(""Err ^""_$T(+0),""ruid,ruab,ruLst"")"
^ZWCmcd("epGRdemo-qd","mcod",13)="       Q"
^ZWCmcd("epGRdemo-qd","mcod",14)=";*"
^ZWCmcd("epGRdemo-qd","mcod",15)=""
^ZWCmcd("epGRdemo-qd","mcod",16)=""
^ZWCmcd("epGRmumps","mcod",1)="epGRdemo ;CKW/ESC i14feb23 umep./ rmep4/ ;20230408-52;Read Grammar File, MUMPS to RG()"
^ZWCmcd("epGRmumps","mcod",2)=";  : RG() of MUMPS Grammar"
^ZWCmcd("epGRmumps","mcod",3)=";"
^ZWCmcd("epGRmumps-GR00","mcod",4)=";*  : RG()  aDemo-Grammar.toi"
^ZWCmcd("epGRmumps-GR00","mcod",5)="GR00  S devRG=""/home/kw/km3a/umep/rmep4/aM1-Grammar.toi""  ;MUMPS Elemental"
^ZWCmcd("epGRmumps-GR00","mcod",6)="      S Q=$$^devRD(devRG,,""RG"") I Q'="""" Goto Qb"
^ZWCmcd("epGRmumps-GR00","mcod",7)="      Goto Q"
^ZWCmcd("epGRmumps-Q","mcod",8)=";*"
^ZWCmcd("epGRmumps-Q","mcod",9)=";* Common Exit"
^ZWCmcd("epGRmumps-Q","mcod",10)="Q      Q:$Q Q D:Q'="""" qd Q"
^ZWCmcd("epGRmumps-Qb","mcod",11)="Qb     D qd Q:$Q Q Q"
^ZWCmcd("epGRmumps-qd","mcod",12)="qd     D b^dv(""Err ^""_$T(+0),""ruid,ruab,ruLst"")"
^ZWCmcd("epGRmumps-qd","mcod",13)="       Q"
^ZWCmcd("epGRmumps-qd","mcod",14)=";*"
^ZWCmcd("epGRmumps-qd","mcod",15)=""
^ZWCmcd("epGRmumps-qd","mcod",16)=""
^ZWCmcd("epMa","mcod",1)="epMa  ;CKW/ESC i14feb23 umep./ rcfg/ ;20230214-91; Profiles"
^ZWCmcd("epMa","mcod",2)=";"
^ZWCmcd("epMa","mcod",3)=";"
^ZWCmcd("epMa","mcod",4)=";"
^ZWCmcd("epMa-p01","mcod",6)=";*"
^ZWCmcd("epMa-p01","mcod",7)="p01   S pxid=1"
^ZWCmcd("epMa-p01","mcod",8)="      S Ins=""1+(2*3-4)""    D ^ep4IN(Ins)"
^ZWCmcd("epMa-p01","mcod",9)="      D ^epGRdemo  ; Demo Grammar"
^ZWCmcd("epMa-p01","mcod",10)="        D ^ep4RGA  ;  RS() : GRk(),     Compile Grammar"
^ZWCmcd("epMa-p01","mcod",11)="      D ^ep4go"
^ZWCmcd("epMa-p01","mcod",12)="      Q"
^ZWCmcd("epMa-p01","mcod",13)=";*"
^ZWCmcd("epMa-top","mcod",5)="top     BREAK  HALT  ;No top entry"
^ZWCmcd("epPAR","mcod",1)="epPAR  ;CKW/ESC i31oct22 ;20221202-46;Parse INc(),INty  into Gr Grammar..."
^ZWCmcd("epPAR","mcod",2)=";"
^ZWCmcd("epPAR","mcod",3)=";  GRi(gsq)=RP  _5 part readable extras  See EXRP^epW  to expand"
^ZWCmcd("epPAR","mcod",4)=";  Gxi(<rule-name>,gi)=isq  ;  ~ left-hand-side name index, mult rules, gi"
^ZWCmcd("epPAR","mcod",5)=";"
^ZWCmcd("epPAR","mcod",6)=";  INc(Ip)=literal input chars, from Ins, a string of chars"
^ZWCmcd("epPAR","mcod",7)=";  INty(Ip)= type  {"
^ZWCmcd("epPAR","mcod",8)=";"
^ZWCmcd("epPAR","mcod",9)=";  SC items or rules have 8 _ pieces (aka dotted-rule, item, "
^ZWCmcd("epPAR","mcod",10)=";   ruLst:   _5 is ruLst a comma list of tokens- rule-names or terminal-set-names)"
^ZWCmcd("epPAR","mcod",11)=";   Pdot:  _4 is dot, a ptr into the current ruLst comma pieces"
^ZWCmcd("epPAR","mcod",12)=";   Ips    _3 is the input start pointer, Ips"
^ZWCmcd("epPAR","mcod",13)=";   IPe   _2  is the end-ptr into Ins, implicitly==Si in Lua"
^ZWCmcd("epPAR","mcod",14)=";   debug who did this item, {scan, }"
^ZWCmcd("epPAR","mcod",15)=";    "
^ZWCmcd("epPAR-COMPLETE","mcod",84)=";*"
^ZWCmcd("epPAR-COMPLETE","mcod",85)="COMPLETE(Sci,Scj,RPic,FIPs,Fna)  ;  S2i Fna~Found runa, FIPs~FOund IPs-> where to search"
^ZWCmcd("epPAR-COMPLETE","mcod",86)="       ;RPic finished"
^ZWCmcd("epPAR-COMPLETE","mcod",87)="       S S2i=FIPs I $G(Fna)="""" D b^dv(""Err Found runa null"",""Fna,runa,Sci,Scj,RPic"")"
^ZWCmcd("epPAR-COMPLETE","mcod",88)="       I Sci'=S2i D ^dv("" +++ C Gotcha "",""Sci,S2i,RPic,IPs,Fna"")"
^ZWCmcd("epPAR-COMPLETE","mcod",89)="       S Sc2i=S2i"
^ZWCmcd("epPAR-COMPLETE","mcod",90)="       F Sc2j=1:1:SC(Sc2i)  S RPc2=SC(Sc2i,Sc2j) DO  ;  vs While, SC(Sc2i) chgs?"
^ZWCmcd("epPAR-COMPLETE","mcod",91)="         .D EXRP^epW(RPc2)"
^ZWCmcd("epPAR-COMPLETE","mcod",92)="         .W:$X ! W "" * + Comp st "",S2i,""."",Sc2j,"" dot="",dot,""  "",?40,RPc2,!         "
^ZWCmcd("epPAR-COMPLETE","mcod",93)="         .I TokR1'=Fna Q"
^ZWCmcd("epPAR-COMPLETE","mcod",94)="         .S RPc3=RPc2"
^ZWCmcd("epPAR-COMPLETE","mcod",95)="         .S dot=dot+1"
^ZWCmcd("epPAR-COMPLETE","mcod",96)="         .S $P(RPc3,""_"",4)=dot"
^ZWCmcd("epPAR-COMPLETE","mcod",97)="         .S frm=""Cmplt fr:""_Sci_"".""_Scj"
^ZWCmcd("epPAR-COMPLETE","mcod",98)="         .S $P(RPc3,""_"",6)=""COMP""  ; frm  ; ""complete""  ; vs frm trc         "
^ZWCmcd("epPAR-COMPLETE","mcod",99)="         .S Sc3i=S2i+1,IPe=Sc3i,$P(RPc3,""_"",3)=IPe"
^ZWCmcd("epPAR-COMPLETE","mcod",100)="         .D SSC(Sc3i,RPc3,frm)  S Sc3j=Svj  ; where new stored"
^ZWCmcd("epPAR-COMPLETE","mcod",101)="         .D ^dv(""Log one new C item "",""Sci,Scj,Sc2i,Sc2j,Sc3i,Sc3j,RPic,RPc2,RPc3,dot,ruLst"")"
^ZWCmcd("epPAR-COMPLETE","mcod",102)="         .;W:$X ! W "" * + Comp end-new "",Sci,""/"",Scj,"" dot="",dot,""  "",?40,RPc3,!"
^ZWCmcd("epPAR-COMPLETE","mcod",103)="       I Sc2j'=SC(Sc2i) D b^dv(""num in SC(Sc2i) bumped in loop ?"",""Sc2j,SC(Sc2i)"")"
^ZWCmcd("epPAR-COMPLETE","mcod",104)="       Q"
^ZWCmcd("epPAR-EL2","mcod",38)=";*   end each double loop"
^ZWCmcd("epPAR-EL2","mcod",39)="EL2    W:$X ! W ""End inner "",Sbi,"","",Sbj,""   trace:"",$G(trc),""  """
^ZWCmcd("epPAR-EL2","mcod",40)="       ;I $G(SC(Sbi+1))="""" S SC(Sbi+1)=0"
^ZWCmcd("epPAR-EL2","mcod",41)="       I Sbi=2,Sbj=9 D b^dv(""Log post 2.9 "",""TokR1,dot,ruLst,IPs,IPe,RPitem"")"
^ZWCmcd("epPAR-EL2","mcod",42)="       Q"
^ZWCmcd("epPAR-PRED","mcod",43)=";*         "
^ZWCmcd("epPAR-PRED","mcod",44)=";*  Sbi, Sbj        "
^ZWCmcd("epPAR-PRED","mcod",45)="PRED(Spi,Spj,TokR1)  ;NEW Spj"
^ZWCmcd("epPAR-PRED","mcod",46)="       I $G(TokR1)="""" D b^dv(""Err TokR1 should not be null here"",""TokR1,Sbi,Sbj,Spi"") Q"
^ZWCmcd("epPAR-PRED","mcod",47)="       I Spi'=Sbi D b^dv(""Maybe Err ?"",""Sbi,Spi,Spj"")"
^ZWCmcd("epPAR-PRED","mcod",48)="       ;I $D(Gxi(TokR1))=0 D bug^dv"
^ZWCmcd("epPAR-PRED","mcod",49)="       ;For every grammar rule with name=TokR1-"
^ZWCmcd("epPAR-PRED","mcod",50)="       F gi=1:1 Q:$D(Gxi(TokR1,gi))=0  S rusq=$G(Gxi(TokR1,gi)) DO"
^ZWCmcd("epPAR-PRED","mcod",51)="         .I rusq="""" D b^dv(""Err rusq from Gxi(TokR1)"",""rusq,TokR1,gi"") Q"
^ZWCmcd("epPAR-PRED","mcod",52)="         .S RPgr=GRi(rusq)  ;"
^ZWCmcd("epPAR-PRED","mcod",53)="         .S frm=""Pred fr:""_Spi_"".""_Spj"
^ZWCmcd("epPAR-PRED","mcod",54)="         .S $P(RPgr,""_"",2)=Spi  ; IPs item.start"
^ZWCmcd("epPAR-PRED","mcod",55)="         .S $P(RPgr,""_"",3)=Spi  ; IPe is implicit always == Si"
^ZWCmcd("epPAR-PRED","mcod",56)="         .S $P(RPgr,""_"",6)=""PRED"""
^ZWCmcd("epPAR-PRED","mcod",57)="         .;D ^dv(""Log pred Add Item rule: "",""TokR1,gi,rusq,RPgr"")"
^ZWCmcd("epPAR-PRED","mcod",58)="         .;W:$X ! W ""Pred add "",RPgr,!         "
^ZWCmcd("epPAR-PRED","mcod",59)="         .D SSC(Spi,RPgr,frm) ; save in this State Sbi at end"
^ZWCmcd("epPAR-PRED","mcod",60)="       ;D PZE"
^ZWCmcd("epPAR-PRED","mcod",61)="       Q"
^ZWCmcd("epPAR-PZE","mcod",129)=";*"
^ZWCmcd("epPAR-PZE","mcod",130)=";*"
^ZWCmcd("epPAR-PZE","mcod",131)="PZE(M,VL) USE $P W !!,"" *****  """
^ZWCmcd("epPAR-PZE","mcod",132)="      S VL=$G(VL) I VL="""" S VL=""mrid"""
^ZWCmcd("epPAR-PZE","mcod",133)="      I $G(M)'="""" D ^dv(M,VL)"
^ZWCmcd("epPAR-PZE","mcod",134)="      R !,""Pause (ret) . for Dir Mode"",!,"":"",X"
^ZWCmcd("epPAR-PZE","mcod",135)="      I $G(VL)="""" S VL=""zrid,rdid,mrid,mwCMO"""
^ZWCmcd("epPAR-PZE","mcod",136)="      I X[""."" D b^dv(""Pause "",VL)"
^ZWCmcd("epPAR-PZE","mcod",137)="      Q"
^ZWCmcd("epPAR-RPlodash","mcod",62)=";*"
^ZWCmcd("epPAR-RPlodash","mcod",63)="RPlodash ; _1 runa.gi / rusq, _2 IPs, _3 Ipe~Si, _4 dot, _5 ruLst, _6 frm, _7 Sk, _8 IPs-IPe/chars"
^ZWCmcd("epPAR-SCAN","mcod",64)=";* Sbi,Sbj"
^ZWCmcd("epPAR-SCAN","mcod",65)="SCAN(Ssi,Ssj) ;I Ssi=1 D ^dv(""No Input Si=1"",""Ssi,Ssj,TokR1,RPitem"") Q"
^ZWCmcd("epPAR-SCAN","mcod",66)="       S IPc=Ssi"
^ZWCmcd("epPAR-SCAN","mcod",67)="       S C=INc(IPc) I C="""" D b^dv(""Err C "",""C,IPc,Ssi,Ssj"") Q"
^ZWCmcd("epPAR-SCAN","mcod",68)="       S CL=$G(ITcl(TokR1)) "
^ZWCmcd("epPAR-SCAN","mcod",69)="         I CL="""" D b^dv(""Err Char list ITcl(TokR1)"",""CL,TokR1,C"")"
^ZWCmcd("epPAR-SCAN","mcod",70)="       ;I TokR1'=ty Q"
^ZWCmcd("epPAR-SCAN","mcod",71)="       D b^dv(""Log test sc "",""C,Ssi,Ssj,RPitem,TokR1"")"
^ZWCmcd("epPAR-SCAN","mcod",72)="       I CL'[C  D ^dv(""Log '""_C_""' not in ""_TokR1,""C,CL,TokR1,Ssi,Ssj"") Q  ;Punt, non-match"
^ZWCmcd("epPAR-SCAN","mcod",73)="       ;Here matched terminal, C in CL, ITcl(TokR1)"
^ZWCmcd("epPAR-SCAN","mcod",74)="       S RPdi=SC(Ssi,Ssj) D EXRP^epW(RPdi)        "
^ZWCmcd("epPAR-SCAN","mcod",75)="         I dot'=$P(RPdi,""_"",4) D b^dv(""Err dot"",""dot,RPdi"")"
^ZWCmcd("epPAR-SCAN","mcod",76)="       S $P(RPdi,""_"",4)=dot+1"
^ZWCmcd("epPAR-SCAN","mcod",77)="       S $P(RPdi,""_"",6)=""SCAN"""
^ZWCmcd("epPAR-SCAN","mcod",78)="       S frm=""scan fr:""_Ssi_"".""_Ssj"
^ZWCmcd("epPAR-SCAN","mcod",79)="       S Ssi2=Ssi+1,IPe=Ssi2-1,$P(RPdi,""_"",3)=IPe"
^ZWCmcd("epPAR-SCAN","mcod",80)="       D SSC(Ssi2,RPdi,frm)"
^ZWCmcd("epPAR-SCAN","mcod",81)="       ;D ^dv(""Log scan MCH Ssi2 dot+1"",""RPdi,Ssi,Ssj,Ssi2,gti"")"
^ZWCmcd("epPAR-SCAN","mcod",82)="       W:$X ! W "" * end scan "",Ssi,""."",Ssj,""  "",?40,RPdi,!"
^ZWCmcd("epPAR-SCAN","mcod",83)="       Q"
^ZWCmcd("epPAR-SSC","mcod",105)=";*"
^ZWCmcd("epPAR-SSC","mcod",106)=";*  Save in SC"
^ZWCmcd("epPAR-SSC","mcod",107)=";Analog of Append and Unsafe-Append (sic,sic) functions"
^ZWCmcd("epPAR-SSC","mcod",108)=";  Dont duplicate, loop til empty, punt if dupl"
^ZWCmcd("epPAR-SSC","mcod",109)=";*  : SC(Svi,Svj),  Svj"
^ZWCmcd("epPAR-SSC","mcod",110)="SSC(Svi,RPit,frm)  ;no NEW Svj- returned for debugging"
^ZWCmcd("epPAR-SSC","mcod",111)="       I SC<Svi S SC=Svi ;D b^dv(""Log New Svi "",""Svi,SC,RPit"")"
^ZWCmcd("epPAR-SSC","mcod",112)="       ;Find end AND ck for dupl to Punt"
^ZWCmcd("epPAR-SSC","mcod",113)="       F Svj=1:1 S RPg=$G(SC(Svi,Svj)) Q:RPg=""""   DO  Q:Q  "
^ZWCmcd("epPAR-SSC","mcod",114)="         .S Q=$P(RPg,""_"",1,5)=$P(RPit,""_"",1,5)"
^ZWCmcd("epPAR-SSC","mcod",115)="       ;Punt if duplicate found:"
^ZWCmcd("epPAR-SSC","mcod",116)="       I Q W:$X ! W ""SSC rej Dupl at Svi="",Svi,""."",Svj,""  "",?40,RPit  Q"
^ZWCmcd("epPAR-SSC","mcod",117)="       ; Non-duplicate, save-"
^ZWCmcd("epPAR-SSC","mcod",118)="       ; Svj is new empty node, ie SC(Svi,Svj    "
^ZWCmcd("epPAR-SSC","mcod",119)="       S $P(RPit,""_"",7)=Svi_"".""_Svj  ; me or parent ? two _slots"
^ZWCmcd("epPAR-SSC","mcod",120)="       S $P(RPit,""_"",8)=$E(Ins,IPs,IPe)  ; ?Misplaced here"
^ZWCmcd("epPAR-SSC","mcod",121)="       S SC(Svi,Svj)=RPit,SC(Svi)=Svj"
^ZWCmcd("epPAR-SSC","mcod",122)="       ;audit-"
^ZWCmcd("epPAR-SSC","mcod",123)="       S tIPe=$P(RPit,""_"",3) "
^ZWCmcd("epPAR-SSC","mcod",124)="         ;I tIPe'=(Svi-1) D b^dv(""Err explicit IPe vs Svi-1"",""tIPe,Svi,RPit"")"
^ZWCmcd("epPAR-SSC","mcod",125)="       S Sfrm(Svi,Svj)=frm  ; ? Separate vs inside RP*"
^ZWCmcd("epPAR-SSC","mcod",126)="       W:$X ! W ""SSC New/nonDup SC("",Svi,"","",Svj,"") = '"",?40,RPit,""' """
^ZWCmcd("epPAR-SSC","mcod",127)="       Q"
^ZWCmcd("epPAR-SSC","mcod",128)="       ;"
^ZWCmcd("epPAR-WRP","mcod",145)=";*"
^ZWCmcd("epPAR-WRP","mcod",146)=";*  RuLst vs ruL ?"
^ZWCmcd("epPAR-WRP","mcod",147)="WRP(RP,Swi,Swj) NEW ruL,dot"
^ZWCmcd("epPAR-WRP","mcod",148)="       W:$X ! W $G(Swi,""S*i?""),"","",$G(Swj,""S*j?""),""  """
^ZWCmcd("epPAR-WRP","mcod",149)="       S ruL=$P(RP,""_"",4) W RP,""  """
^ZWCmcd("epPAR-WRP","mcod",150)="       S dot=$P(RP,""_"",3),$P(ruL,"","",dot+1)="" * ,""_$P(ruL,"","",dot+1)"
^ZWCmcd("epPAR-WRP","mcod",151)="       W ruL"
^ZWCmcd("epPAR-WRP","mcod",152)="       Q"
^ZWCmcd("epPAR-WRP","mcod",153)=";*       "
^ZWCmcd("epPAR-WRP","mcod",154)="; GWUSCO"
^ZWCmcd("epPAR-WRP","mcod",155)=";i, Si, Sbi, Spi, Sci, Ssi, Swi,   Pass as args, dont bleed up"
^ZWCmcd("epPAR-WRP","mcod",156)=";j, Sj, Sbj, Spj, Scj, Ssk, Swj    Some NOT arg, just reuse, eg SSC"
^ZWCmcd("epPAR-WRP","mcod",157)="; i,Si~Ip ~IPc  pointer to INc()  inPointer "
^ZWCmcd("epPAR-WRP","mcod",158)=";"
^ZWCmcd("epPAR-WRP","mcod",159)="; SC State Chart  sic "
^ZWCmcd("epPAR-WRP","mcod",160)="; RP*  Rule object, RPgr rule from grammar Place holder dot, IPs, IPc"
^ZWCmcd("epPAR-WRP","mcod",161)="; RPi  Rule as item, dot-item, match in progress"
^ZWCmcd("epPAR-WRP","mcod",162)=";"
^ZWCmcd("epPAR-initSC","mcod",138)=" ;*"
^ZWCmcd("epPAR-initSC","mcod",139)="initSC KILL SC,Sfrm"
^ZWCmcd("epPAR-initSC","mcod",140)="       S RP=$G(GRi(1))"
^ZWCmcd("epPAR-initSC","mcod",141)="       S SC(1,1)=RP,Sfrm(1,1)=""init"" ; Initial conditions"
^ZWCmcd("epPAR-initSC","mcod",142)="       S SC=1,SC(1)=1"
^ZWCmcd("epPAR-initSC","mcod",143)="       Q"
^ZWCmcd("epPAR-initSC","mcod",144)=""
^ZWCmcd("epPAR-main","mcod",22)="main   ; loop thru INputs, Ip BUILD analog"
^ZWCmcd("epPAR-main","mcod",23)="       F Sbi=1:1 Q:Sbi>SC   W !!,""Build Loop1 "",Sbi,! DO  ;"
^ZWCmcd("epPAR-main","mcod",24)="         .F Sbj=1:1 Q:Sbj>$G(SC(Sbi))  DO  D EL2 ;"
^ZWCmcd("epPAR-main","mcod",25)="           ..S RPitem=$G(SC(Sbi,Sbj))  ; "
^ZWCmcd("epPAR-main","mcod",26)="           ..   I RPitem="""" D bug^dv(""Err no RPitem"",""RPitem,Sbi,Sbj"") Q"
^ZWCmcd("epPAR-main","mcod",27)="           ..S trc=""?"""
^ZWCmcd("epPAR-main","mcod",28)="           ..D EXRP^epW(RPitem)  ; Sbi,Sbj expand item TokR1,dot,ruLst"
^ZWCmcd("epPAR-main","mcod",29)="           ..W !,""Build inner loop2 "",Sbi,""."",Sbj,""  "",RPitem,!"
^ZWCmcd("epPAR-main","mcod",30)="           ..; rule loop, item-loop, within one SCi"
^ZWCmcd("epPAR-main","mcod",31)="           .. I Sbi=2,Sbj=9 D b^dv(""Log pre 2.9 "",""TokR1,dot,ruLst,IPs,IPe,RPitem"")"
^ZWCmcd("epPAR-main","mcod",32)="           ..I TokR1=""""  D COMPLETE(Sbi,Sbj,RPitem,IPs,runa)  Q  ; "
^ZWCmcd("epPAR-main","mcod",33)="           ..I TokR1[""+"" D SCAN(Sbi,Sbj)  Q  ; token with + is terminal"
^ZWCmcd("epPAR-main","mcod",34)="           ..D PRED(Sbi,Sbj,TokR1) Q ;inside loop chart items/rules"
^ZWCmcd("epPAR-main","mcod",35)="           ..D b^dv(""Err illegal rule.?"",""TokR1,RPi,Sbi,Sbj"")"
^ZWCmcd("epPAR-main","mcod",36)="       D b^dv(""Log End BUILD  "",""Sbi,SC,Sbj"")"
^ZWCmcd("epPAR-main","mcod",37)="       Q"
^ZWCmcd("epPAR-top","mcod",16)="top    W !!,""Magic  Parsing !"""
^ZWCmcd("epPAR-top","mcod",17)="       D initSC"
^ZWCmcd("epPAR-top","mcod",18)="       D main"
^ZWCmcd("epPAR-top","mcod",19)="       D WSC^epW  ; Full Table"
^ZWCmcd("epPAR-top","mcod",20)="       Q"
^ZWCmcd("epPAR-top","mcod",21)="       ;"
^ZWCmcd("epW","mcod",1)="epW  ;CKW/ESC i31oct22 rMP1/ ;20221031-60;Write sr for parser data structures"
^ZWCmcd("epW","mcod",2)=";"
^ZWCmcd("epW","mcod",3)=";"
^ZWCmcd("epW","mcod",4)=";"
^ZWCmcd("epW-DSP","mcod",102)=";* Copy from ^dvs  same as ^dvc"
^ZWCmcd("epW-DSP","mcod",103)=" ;Replace all dbl spaces (or more) with single, and remove starting/ending"
^ZWCmcd("epW-DSP","mcod",104)="DSP(X) NEW i F i=0:1 Q:X'[""  ""  S X=$P(X,""  "")_"" ""_$P(X,""  "",2,9999)"
^ZWCmcd("epW-DSP","mcod",105)=" Q $$TSP(X)"
^ZWCmcd("epW-DSP","mcod",106)=" ; Remove start and end spaces (only)"
^ZWCmcd("epW-EXRP","mcod",23)=";*  Expand RP to locals"
^ZWCmcd("epW-EXRP","mcod",24)="EXRP(RP,Swi,Swj)  I $G(RP)="""" D bug^dv(""Arg RP "",""RP"") Q"
^ZWCmcd("epW-EXRP","mcod",25)="       S nRP=$L(RP,""_"") I nRP'>4 D b^dv(""Err _len RP 5 or 6"",""RP"") Q"
^ZWCmcd("epW-EXRP","mcod",26)="       S Swi=$G(Swi),Swj=$G(Swj)"
^ZWCmcd("epW-EXRP","mcod",27)="       NEW P1"
^ZWCmcd("epW-EXRP","mcod",28)="       S P1=$P(RP,""_"",1)"
^ZWCmcd("epW-EXRP","mcod",29)="       S ruab=$P(P1,""/"")  ;runa.gi"
^ZWCmcd("epW-EXRP","mcod",30)="       S runa=$P(ruab,""."")  ; ~ left-hand side, name (no .ri ?)"
^ZWCmcd("epW-EXRP","mcod",31)="       S rugi=$P(ruab,""."",2)"
^ZWCmcd("epW-EXRP","mcod",32)="       S rusq=$P($P($P(RP,""="",1),""/"",2),"" "")  ; grammar index number, gsi~gsq~rusq"
^ZWCmcd("epW-EXRP","mcod",33)="         I rusq'=+rusq D b^dv(""Err rusq should be integer"",""rusq,RP"")"
^ZWCmcd("epW-EXRP","mcod",34)="       S ruLst=$P(RP,""_"",5)  ; comma list"
^ZWCmcd("epW-EXRP","mcod",35)="       S dot=$P(RP,""_"",4)  ; dot ptr into ruLst"
^ZWCmcd("epW-EXRP","mcod",36)="       S IPs=$P(RP,""_"",2)"
^ZWCmcd("epW-EXRP","mcod",37)="       S IPe=$P(RP,""_"",3)  ; = Si redundant"
^ZWCmcd("epW-EXRP","mcod",38)="       S INse=$E($G(Ins),IPs,IPe)  ; Ins is input string"
^ZWCmcd("epW-EXRP","mcod",39)="       S TokR1=$P(ruLst,"","",dot+1)  ; may be null if done"
^ZWCmcd("epW-EXRP","mcod",40)="       S rde=$G(GRde(ruab))"
^ZWCmcd("epW-EXRP","mcod",41)="       ; audit"
^ZWCmcd("epW-EXRP","mcod",42)="       I Swi'="""",Swi'=IPe D b^dv(""Err Swi not eq IPe_3"",""Swi,IPe,IPs,RPd"")"
^ZWCmcd("epW-EXRP","mcod",43)="       Q"
^ZWCmcd("epW-RPlodash","mcod",21)=";*"
^ZWCmcd("epW-RPlodash","mcod",22)="RPlodash ; _1 runa.gi / rusq, _2 IPs, _3 Ipe~Si, _4 dot, _5 ruLst, _6 frm, _7, _8"
^ZWCmcd("epW-TSP","mcod",107)="TSP(X) NEW i S X=$TR(X,$C(9)_$C(10)_$C(13),""   "")  ;replace tab,lf,cr with space"
^ZWCmcd("epW-TSP","mcod",108)=" I $E($G(X))="" "" F i=1:1:$L(X) I $E(X,i)'="" "" S X=$E(X,i,999) Q"
^ZWCmcd("epW-TSP","mcod",109)=" I $E(X,$L(X))="" "" F i=$L(X):-1:1 I $E(X,i)'="" "" S X=$E(X,1,i) Q"
^ZWCmcd("epW-TSP","mcod",110)=" I X="" "" S X=""""  ; Funny case all spaces  vs end i=0 second line ?"
^ZWCmcd("epW-TSP","mcod",111)=" Q X"
^ZWCmcd("epW-TSP","mcod",112)=";* "
^ZWCmcd("epW-WGR","mcod",5)=";*"
^ZWCmcd("epW-WGR","mcod",6)=";*  GRi(gsq)=RPgr,   Gxq(runa,gi)=gsq"
^ZWCmcd("epW-WGR","mcod",7)=";  RPgr =1 is ruab, _2 is IPs, _3 is IPc, GRde(ruab)=rude  comment, for what ?"
^ZWCmcd("epW-WGR","mcod",8)="; This is all static after init setup by IG"
^ZWCmcd("epW-WGR","mcod",9)="WGR    W !!,""Grammar GRr() rules-"""
^ZWCmcd("epW-WGR","mcod",10)="       NEW gsq,ruab,ina,gi,ruab,ti,RPgr,rde,runa,ruLst,tok"
^ZWCmcd("epW-WGR","mcod",11)="       F gsq=1:1:GRi S RPgr=GRi(gsq)   DO  ;"
^ZWCmcd("epW-WGR","mcod",12)="         .W:$X ! W RPgr"
^ZWCmcd("epW-WGR","mcod",13)="         .D EXRP(RPgr)"
^ZWCmcd("epW-WGR","mcod",14)="         .W:$X ! W:$P(ruab,""."",2)=1 runa,""  """
^ZWCmcd("epW-WGR","mcod",15)="         .W ?10"
^ZWCmcd("epW-WGR","mcod",16)="         .F ti=1:1:$L(ruLst,"","") S tok=$P(ruLst,"","",ti) DO  ;"
^ZWCmcd("epW-WGR","mcod",17)="            ..S Tna=$G(WNa(tok)) I Tna="""" S Tna=tok D b^dv(""Err msg Lna ;4 "",""tok,Tna"")"
^ZWCmcd("epW-WGR","mcod",18)="            ..W Tna,"" """
^ZWCmcd("epW-WGR","mcod",19)="       W ?40,""("",IPs,"") "",!"
^ZWCmcd("epW-WGR","mcod",20)="       Q"
^ZWCmcd("epW-WIN","mcod",93)=";*"
^ZWCmcd("epW-WIN","mcod",94)=";*   INc(), INty()   Itb()"
^ZWCmcd("epW-WIN","mcod",95)="WIN   W:$X ! W !,""Inputs-""   NEW wi"
^ZWCmcd("epW-WIN","mcod",96)="      I $G(Ins) W !,""In str '"",Ins,""'  """
^ZWCmcd("epW-WIN","mcod",97)="      W !,""Ip: "" F wi=1:1:INc W ?Itb(wi),wi,"" """
^ZWCmcd("epW-WIN","mcod",98)="      W !,""lit "" F wi=1:1:INc W ?Itb(wi),INc(wi),"" """
^ZWCmcd("epW-WIN","mcod",99)="      W !,""ty: "" F wi=1:1:INc W ?Itb(wi),INty(wi),"" """
^ZWCmcd("epW-WIN","mcod",100)="      W !"
^ZWCmcd("epW-WIN","mcod",101)="      Q"
^ZWCmcd("epW-WKRP","mcod",44)=";*"
^ZWCmcd("epW-WKRP","mcod",45)=";*  Write one item ala Lua Loup format for comparison"
^ZWCmcd("epW-WKRP","mcod",46)="; WNa substitutes full Lua name"
^ZWCmcd("epW-WKRP","mcod",47)="; RP and rula, ruLst, dot, IPs"
^ZWCmcd("epW-WKRP","mcod",48)="WKRP(RPd,Swi,Swj)  I $G(RPd)="""" D bug^dv Q"
^ZWCmcd("epW-WKRP","mcod",49)="       NEW runa,IPs,ruLst,dot,Lna,ti,tok"
^ZWCmcd("epW-WKRP","mcod",50)="       S Swi=$G(Swi),Swj=$G(Swj)"
^ZWCmcd("epW-WKRP","mcod",51)="       D EXRP(RPd,Swi,Swj)"
^ZWCmcd("epW-WKRP","mcod",52)="       ;W:$X ! S Lna=$G(WNa(runa)) I Lna="""" D b^dv(""Missing Lna"",""runa"") S Lna=runa"
^ZWCmcd("epW-WKRP","mcod",53)="       ;W Lna,"" "",?8,"" -> """
^ZWCmcd("epW-WKRP","mcod",54)="       F ti=1:1:$L(ruLst,"","")+1 S tok=$P(ruLst,"","",ti) DO"
^ZWCmcd("epW-WKRP","mcod",55)="         .I (dot+1)=ti W ""  *  """
^ZWCmcd("epW-WKRP","mcod",56)="         .I tok="""" Q  ; no more tok, extra to do dot at end"
^ZWCmcd("epW-WKRP","mcod",57)="         .S Lna=$G(WNa(tok)) I Lna="""" DO  ;"
^ZWCmcd("epW-WKRP","mcod",58)="            ..D b^dv(""Err Missing Lna of tok"",""tok,WNa,ti,rulst"")"
^ZWCmcd("epW-WKRP","mcod",59)="            ..S Lna="" ??? """
^ZWCmcd("epW-WKRP","mcod",60)="         .W Lna,""  """
^ZWCmcd("epW-WKRP","mcod",61)="       W ?50,""("",IPs-1,"")"",!"
^ZWCmcd("epW-WKRP","mcod",62)="       Q"
^ZWCmcd("epW-WRP","mcod",76)=";*  Write one item ala Lua Loup format for comparison"
^ZWCmcd("epW-WRP","mcod",77)="; WNa substitutes full Lua name"
^ZWCmcd("epW-WRP","mcod",78)="; RP and rula, ruLst, dot, IPs"
^ZWCmcd("epW-WRP","mcod",79)="WRP(RPd)  I $G(RPd)="""" D bug^dv Q"
^ZWCmcd("epW-WRP","mcod",80)="       NEW runa,IPs,ruLst,dot,Lna,ti,tok"
^ZWCmcd("epW-WRP","mcod",81)="       S runa=$P(RPd,"".""),ruLst=$P(RPd,""_"",5),IPs=$P(RPd,""_"",2),dot=$P(RPd,""_"",4)"
^ZWCmcd("epW-WRP","mcod",82)="       W:$X ! S Lna=$G(WNa(runa)) I Lna="""" D b^dv(""Missing Lna"",""runa"") S Lna=runa"
^ZWCmcd("epW-WRP","mcod",83)="       W Lna,"" "",?8,"" -> """
^ZWCmcd("epW-WRP","mcod",84)="       F ti=1:1:$L(ruLst,"","")+1 S tok=$P(ruLst,"","",ti) DO"
^ZWCmcd("epW-WRP","mcod",85)="         .I (dot+1)=ti W ""  *  """
^ZWCmcd("epW-WRP","mcod",86)="         .I tok="""" Q  ; no more tok, extra to do dot at end"
^ZWCmcd("epW-WRP","mcod",87)="         .S Lna=$G(WNa(tok)) I Lna="""" DO  ;"
^ZWCmcd("epW-WRP","mcod",88)="            ..D b^dv(""Err Missing Lna of tok"",""tok,WNa,ti,rulst"")"
^ZWCmcd("epW-WRP","mcod",89)="            ..S Lna="" ??? """
^ZWCmcd("epW-WRP","mcod",90)="         .W Lna,""  """
^ZWCmcd("epW-WRP","mcod",91)="       W ?50,""("",IPs-1,"")"",!"
^ZWCmcd("epW-WRP","mcod",92)="       Q"
^ZWCmcd("epW-WS","mcod",69)=";*  SC(Swi,Swj)"
^ZWCmcd("epW-WS","mcod",70)="WS(Swi)  W:$X ! W !,""     ====== "",Si-1,"" ====== Sbi="",Swi,"" "",!"
^ZWCmcd("epW-WS","mcod",71)="       F Swj=1:1 Q:$D(SC(Swi,Swj))=0  S RPw=$G(SC(Swi,Swj)) DO  ;"
^ZWCmcd("epW-WS","mcod",72)="         .I RPw="""" D bug^dv Q"
^ZWCmcd("epW-WS","mcod",73)="         .D WRP(RPw)"
^ZWCmcd("epW-WS","mcod",74)="       W !"
^ZWCmcd("epW-WS","mcod",75)="       Q"
^ZWCmcd("epW-WSC","mcod",63)=";*  SC()  Write all, Lua Loup Compatible output lines"
^ZWCmcd("epW-WSC","mcod",64)="WSC    W:$X !,""Complete Table-"",!!"
^ZWCmcd("epW-WSC","mcod",65)="       NEW Si,Swi,Swj"
^ZWCmcd("epW-WSC","mcod",66)="       F Si=1:1:SC  Q:$D(SC(Si))=0  D WS(Si)"
^ZWCmcd("epW-WSC","mcod",67)="       W !!"
^ZWCmcd("epW-WSC","mcod",68)="       Q"
^ZWCmcd("epaG0","mcod",1)="epaG0  ;CKW/ESC i31oct22  km3a/ umbr./ rmw1/ ;20221202-48;Start mep mumps earley Parser, Compile Grammar"
^ZWCmcd("epaG0","mcod",2)=";  Compile Grammar  $T (No Array intermediate yet) -> GRi(gsi)=RPgr, Gxi("
^ZWCmcd("epaG0","mcod",3)=";  RP is structure, init in GRi and then State Tables SC()"
^ZWCmcd("epaG0","mcod",4)=";"
^ZWCmcd("epaG0-G00","mcod",100)=";*"
^ZWCmcd("epaG0-G00","mcod",101)=";  After a new rule-name, eg s, p  may be multiple rules/items for one rule-name"
^ZWCmcd("epaG0-G00","mcod",102)=";    which are alternatives - OR means of matching the rule-name 00 is Init case..."
^ZWCmcd("epaG0-G00","mcod",103)=";"
^ZWCmcd("epaG0-G00","mcod",104)=";;gamma sum  ;Whole parse, init condition of SC()   not done in Loup-Lua"
^ZWCmcd("epaG0-G00","mcod",105)=";;  it looks for "
^ZWCmcd("epaG0-G00","mcod",106)="G00   ;;GRammar  rule-name & comma list of rule-names|tokenNa|char"
^ZWCmcd("epaG0-G00","mcod",107)=";;sum sum,Psum+,prod  ;Sum;sum is sum rule +/-"
^ZWCmcd("epaG0-G00","mcod",108)=";;  prod"
^ZWCmcd("epaG0-G00","mcod",109)=";;prod prod,Pfac+,fac  ;Product; prod is product"
^ZWCmcd("epaG0-G00","mcod",110)=";;  fac"
^ZWCmcd("epaG0-G00","mcod",111)=";;fac Cop+,sum,Ccp+      ;Factor;  f vs (,s,)  with the literal char as its own name"
^ZWCmcd("epaG0-G00","mcod",112)=";;  num"
^ZWCmcd("epaG0-G00","mcod",113)=";;num Cdig+,num      ;Number;"
^ZWCmcd("epaG0-G00","mcod",114)=";;  Cdig+"
^ZWCmcd("epaG0-G00","mcod",115)=";;***   end"
^ZWCmcd("epaG0-IG00","mcod",55)=";*  : GRi(gsi) Grammar Array  rule/item  RP: ruab => [_IPs_IPc/Si_]_dot_ruLst"
^ZWCmcd("epaG0-IG00","mcod",56)=";   : Gxi(runa,gi)=gsi"
^ZWCmcd("epaG0-IG00","mcod",57)="IG00   KILL GRi,Gxi,GRde  ; not GRr,Gxq"
^ZWCmcd("epaG0-IG00","mcod",58)="      NEW K1,K2,K3"
^ZWCmcd("epaG0-IG00","mcod",59)="      S K1=$T(LPlodash),K2=$T(LPlodash^epPAR),K3=$T(LPlodash^epW)"
^ZWCmcd("epaG0-IG00","mcod",60)="      I K1'=K2!(K1'=K3) D b^dv(""RPlodash Visible _RP ?"",""K1,K2,K3"")"
^ZWCmcd("epaG0-IG00","mcod",61)="      D ITC,IRCIT  KILL RC ; : ITcl(Ttok)=charList"
^ZWCmcd("epaG0-IG00","mcod",62)="       NEW I,T,L,na,gi,ina,ruLst,ruab,rde,gsi,dot,IPs,IPe,RPg"
^ZWCmcd("epaG0-IG00","mcod",63)="       S gsi=0,Gxq=0"
^ZWCmcd("epaG0-IG00","mcod",64)="       S gi=-99,ina=""??""  ; vs UNDEF if in/ina not found in 1st GR table entry..."
^ZWCmcd("epaG0-IG00","mcod",65)="       F I=1:1 S T=$T(G00+I) Q:T[""***""  Q:T=""""  DO   ; ina persists between iterations"
^ZWCmcd("epaG0-IG00","mcod",66)="         .S L=$P(T,"";;"",2),rde=$P(L,"";"",2),L=$P(L,"";"")"
^ZWCmcd("epaG0-IG00","mcod",67)="         .; ina is rule/token name or left hand side, not repeated in my $T table"
^ZWCmcd("epaG0-IG00","mcod",68)="         .S na=$P(L,"" "") D:0 ^dv(""Log na"",""na"") I na'="""" DO  "
^ZWCmcd("epaG0-IG00","mcod",69)="            ..S ina=na,gi=1  ;else leave ina"
^ZWCmcd("epaG0-IG00","mcod",70)="            ..S ruab=ina_"".""_gi"
^ZWCmcd("epaG0-IG00","mcod",71)="         .S runa=ina"
^ZWCmcd("epaG0-IG00","mcod",72)="         .I na="""" S gi=gi+1,ruab=runa_"".""_gi"
^ZWCmcd("epaG0-IG00","mcod",73)="         .S gsi=gsi+1"
^ZWCmcd("epaG0-IG00","mcod",74)="         .S rusq=gsi"
^ZWCmcd("epaG0-IG00","mcod",75)="         .S ruLst=$P(L,"" "",2,99),ruLst=$TR(ruLst,"" "") ;remove spaces, ruLst ~ right hand side"
^ZWCmcd("epaG0-IG00","mcod",76)="         .I ; ?"
^ZWCmcd("epaG0-IG00","mcod",77)="         .I runa="""" D b^dv(""Err ina null"",""runa,ina,I,na,ruLst"") Q"
^ZWCmcd("epaG0-IG00","mcod",78)="         .S ruab=runa_"".""_gi     "
^ZWCmcd("epaG0-IG00","mcod",79)="         .S IPs=0,IPe=0,dot=0  ; def, Init value when copied from GRi to SC(Si,end+1)"
^ZWCmcd("epaG0-IG00","mcod",80)="         .S wna=ruab_""/""_rusq,wna=wna_$E($J("""",10),$L(wna),10)"
^ZWCmcd("epaG0-IG00","mcod",81)="         .  I $L(wna)'=11 D b^dv(""Err left just len wna"",""wna"")"
^ZWCmcd("epaG0-IG00","mcod",82)="         .S RPg=wna_""=> [_""_IPs_""_""_IPe_""_""_dot_""_""_ruLst    ; _""_       ; ""_rde"
^ZWCmcd("epaG0-IG00","mcod",83)="         .S GRi(gsi)=RPg,GRi=gsi"
^ZWCmcd("epaG0-IG00","mcod",84)="         .S Gxi(runa,gi)=gsi"
^ZWCmcd("epaG0-IG00","mcod",85)="         .S Gxi(runa)=gi     ; num gi entries   "
^ZWCmcd("epaG0-IG00","mcod",86)="         .I rde'="""" S GRde(gsi)=rde  ; dupl, only if specified, sparse"
^ZWCmcd("epaG0-IG00","mcod",87)="       Q"
^ZWCmcd("epaG0-IRCIT","mcod",48)=";*   RC(1:1) and RC=n   "
^ZWCmcd("epaG0-IRCIT","mcod",49)="IRCIT NEW Q,I,CL,tokna S Q="""""
^ZWCmcd("epaG0-IRCIT","mcod",50)="      KILL ITcl I $D(RC)'=11 D bug^dv Q"
^ZWCmcd("epaG0-IRCIT","mcod",51)="      F I=1:1 Q:$D(RC(I))=0  S L=RC(I) DO"
^ZWCmcd("epaG0-IRCIT","mcod",52)="        .S tokna=$P(L,"" ""),CL=$P($P(L,"" "",2),"";"")"
^ZWCmcd("epaG0-IRCIT","mcod",53)="        .S ITcl(tokna)=CL"
^ZWCmcd("epaG0-IRCIT","mcod",54)="      Q"
^ZWCmcd("epaG0-ITC","mcod",44)=";*      "
^ZWCmcd("epaG0-ITC","mcod",45)="ITC   NEW I KILL RC"
^ZWCmcd("epaG0-ITC","mcod",46)="      F I=1:1 S T=$T(Terminals+I) Q:T[""***""  Q:T=""""  S L=$P(T,"";;"",2,9) S RC(I)=$$DSP^epW(L),RC=I"
^ZWCmcd("epaG0-ITC","mcod",47)="      Q"
^ZWCmcd("epaG0-In2","mcod",90)=";*  ;4 of G00 "
^ZWCmcd("epaG0-In2","mcod",91)="In2    KILL Wna  NEW tok,LNa,I,T"
^ZWCmcd("epaG0-In2","mcod",92)="       F I=1:1 S T=$T(G00+I) Q:T'["";;""  DO  ;"
^ZWCmcd("epaG0-In2","mcod",93)="         .I T[""***"" Q  ; Ignore, do Terminals too"
^ZWCmcd("epaG0-In2","mcod",94)="         .S tok=$P($P(T,"";"",3),"" "") "
^ZWCmcd("epaG0-In2","mcod",95)="         .I tok="""" Q"
^ZWCmcd("epaG0-In2","mcod",96)="         .S LNa=$P(T,"";"",4)"
^ZWCmcd("epaG0-In2","mcod",97)="         .I LNa'="""" S WNa(tok)=LNa"
^ZWCmcd("epaG0-In2","mcod",98)="       ; Supplemental tok/rule names to match Lua Output of S in WS"
^ZWCmcd("epaG0-In2","mcod",99)="       Q"
^ZWCmcd("epaG0-InPre","mcod",15)=";*      "
^ZWCmcd("epaG0-InPre","mcod",16)=";*  Ip : INc(Ip), INty(Ip),  Itb(i)"
^ZWCmcd("epaG0-InPre","mcod",17)="InPre(Ins)  KILL INc,INty,Itb "
^ZWCmcd("epaG0-InPre","mcod",18)="      NEW w,ci,C,Ip,ty"
^ZWCmcd("epaG0-InPre","mcod",19)="      S Itb=3,Ip=0"
^ZWCmcd("epaG0-InPre","mcod",20)="      F ci=1:1:$L(Ins) DO  ; Chars, special case here for demo"
^ZWCmcd("epaG0-InPre","mcod",21)="        .S C=$E(Ins,ci)"
^ZWCmcd("epaG0-InPre","mcod",22)="        .I C="" "" Q"
^ZWCmcd("epaG0-InPre","mcod",23)="        .;  ci and Ip almost identical, but for spaces/wsp not used, ..."
^ZWCmcd("epaG0-InPre","mcod",24)="        .S Ip=Ip+1"
^ZWCmcd("epaG0-InPre","mcod",25)="        .D sty ; C : ty, INty(Ip)=ty    ;now optional vs ITC,IRCIT"
^ZWCmcd("epaG0-InPre","mcod",26)="        .S w=$L($G(ty))+2 I w<5 S w=5"
^ZWCmcd("epaG0-InPre","mcod",27)="        . S Itb(Ip)=Itb,Itb=Itb+w"
^ZWCmcd("epaG0-InPre","mcod",28)="        .S INc(Ip)=C"
^ZWCmcd("epaG0-InPre","mcod",29)="        .S INc=Ip"
^ZWCmcd("epaG0-InPre","mcod",30)="      Q"
^ZWCmcd("epaG0-RPlodash","mcod",88)=";*"
^ZWCmcd("epaG0-RPlodash","mcod",89)="RPlodash ; _1 runa.gi / rusq, _2 IPs, _3 Ipe~Si, _4 dot, _5 ruLst, _6 frm"
^ZWCmcd("epaG0-Terminals","mcod",116)="Terminals  ;;terminal token names;Chars;Lua-name"
^ZWCmcd("epaG0-Terminals","mcod",117)=";;Cdig+ 0123456789;[0-9];"
^ZWCmcd("epaG0-Terminals","mcod",118)=";;Cop+ (; '(' ;"
^ZWCmcd("epaG0-Terminals","mcod",119)=";;Ccp+ ); ')' ;"
^ZWCmcd("epaG0-Terminals","mcod",120)=";;Psum+ +-;['+-'];"
^ZWCmcd("epaG0-Terminals","mcod",121)=";;Pfac+ */;class('*/')"
^ZWCmcd("epaG0-Terminals","mcod",122)=";; ***"
^ZWCmcd("epaG0-sty","mcod",31)=";* C : ty   Treat input chars by lex -> Classify each input (Assumes only one per char)"
^ZWCmcd("epaG0-sty","mcod",32)=";      using INty"
^ZWCmcd("epaG0-sty","mcod",33)=";   vs test C vs Ttok in ITcl  where Ttok name [""+"" triggering terminal tests"
^ZWCmcd("epaG0-sty","mcod",34)="sty   S ty=""?""  ; default"
^ZWCmcd("epaG0-sty","mcod",35)="      DO  ;"
^ZWCmcd("epaG0-sty","mcod",36)="        .I ""+-""[C S ty=""Psum+"" Q"
^ZWCmcd("epaG0-sty","mcod",37)="        .I ""*/""[C S ty=""Pfac+"" Q"
^ZWCmcd("epaG0-sty","mcod",38)="        .I C?1N S ty=""Cdig+"" Q"
^ZWCmcd("epaG0-sty","mcod",39)="        .I C=""("" S ty=""Cop+"" Q"
^ZWCmcd("epaG0-sty","mcod",40)="        .I C="")"" S ty=""Ccp+"" Q"
^ZWCmcd("epaG0-sty","mcod",41)="        .D b^dv(""Err Unrecog C ty"",""C,ty,Ip"")"
^ZWCmcd("epaG0-sty","mcod",42)="      S INty(Ip)=ty"
^ZWCmcd("epaG0-sty","mcod",43)="      Q"
^ZWCmcd("epaG0-top","mcod",5)="top   D IG00  ; Init Demo Grammar GRi(rusq)= RPgr -_-> ru*  "
^ZWCmcd("epaG0-top","mcod",6)="        D ^dv(""Log post IG00"",""GRi,Gxi,GRde"")"
^ZWCmcd("epaG0-top","mcod",7)="        D In2  ;Wna(tok)=LNa to match Lua Output in W"
^ZWCmcd("epaG0-top","mcod",8)="        D WGR^epW  ;Display Grammar GRi(gsi), Gxi(runa,gi)"
^ZWCmcd("epaG0-top","mcod",9)="       S Ins=""1+(2*3-4)"""
^ZWCmcd("epaG0-top","mcod",10)="       D InPre(Ins)  ; : INc(Ip),INty(Ip)"
^ZWCmcd("epaG0-top","mcod",11)="       D WIN^epW  ; Display Ins, INc(), INty()"
^ZWCmcd("epaG0-top","mcod",12)="      D ^epPAR  ; Parse INc vs Gr grammar"
^ZWCmcd("epaG0-top","mcod",13)="      ;D PT^epW   ; Dis parse tree"
^ZWCmcd("epaG0-top","mcod",14)="      Q"
^ZWCmcd("epaGoDev","mcod",1)="epaGoDev  ;CKW/ESC  i31oct22 rcfg/ ;20221031-07;Start Earley Parser Menu umep./ zroStd gmsa./ Util"
^ZWCmcd("epaGoDev","mcod",2)=";"
^ZWCmcd("epaGoDev","mcod",3)="; input config:  $PWD must be umep, $zro bash is primary"
^ZWCmcd("epaGoDev","mcod",4)=";"
^ZWCmcd("epaGoDev-ZST","mcod",33)=";*"
^ZWCmcd("epaGoDev-ZST","mcod",34)=";*"
^ZWCmcd("epaGoDev-ZST","mcod",35)="ZST    U $P W !!,""^""_$T(+0)_""  $ZL="",$ZL,"",  $ZE="",$ZE,"",  $ZSTATUS="",$ZSTATUS,"",   $ZTRAP="",$ZTRAP,!"
^ZWCmcd("epaGoDev-ZST","mcod",36)="       Q"
^ZWCmcd("epaGoDev-top","mcod",5)="top     S $ETRAP=""B"""
^ZWCmcd("epaGoDev-top","mcod",6)="    ; Following for relative-to-$PWD refs in mumps.gld to g/ydb-mumps.dat"
^ZWCmcd("epaGoDev-top","mcod",7)="    S PWD=$ZTRNLNM(""PWD"")"
^ZWCmcd("epaGoDev-top","mcod",8)="      I $E(PWD)'=""/"" D b^dv(""Err PWD not abs ???"",""PWD"") Q"
^ZWCmcd("epaGoDev-top","mcod",9)="      DO  I Q'="""" Q  "
^ZWCmcd("epaGoDev-top","mcod",10)="        .S Q="""",nsl=$L(PWD,""/""),mpj=$P(PWD,""/"",nsl)"
^ZWCmcd("epaGoDev-top","mcod",11)="        .I mpj[""umep"" Q"
^ZWCmcd("epaGoDev-top","mcod",12)="        .S Q=""Cur Dir must be mpj ('umep') upon start mumps and ^""_$T(+0) "
^ZWCmcd("epaGoDev-top","mcod",13)="        .D b^dv(Q,""mpj,PWD"")"
^ZWCmcd("epaGoDev-top","mcod",14)="    ;  Note also compiles ^epa itself ???  works"
^ZWCmcd("epaGoDev-top","mcod",15)="    S zrid=""umep"""
^ZWCmcd("epaGoDev-top","mcod",16)="    S zroStd=$G(^ZWZ(zrid,""zroStd""))"
^ZWCmcd("epaGoDev-top","mcod",17)=";;Config epa choice:"
^ZWCmcd("epaGoDev-top","mcod",18)="    ; zroStd refs umep./ and gmsa./ for utilities"
^ZWCmcd("epaGoDev-top","mcod",19)="    I zroStd="""" W !!,""? zroUcp null ? "" BREAK"
^ZWCmcd("epaGoDev-top","mcod",20)="    S $zro=zroStd"
^ZWCmcd("epaGoDev-top","mcod",21)="    ;Now regular start, compile"
^ZWCmcd("epaGoDev-top","mcod",22)=" D ^dzzl($zro)  ; deletes *.o and recompiles to o/*.o  and ou/*.o  for gmsa, gmma, gmfd, umfd"
^ZWCmcd("epaGoDev-top","mcod",23)=" ;"
^ZWCmcd("epaGoDev-top","mcod",24)=" S ^ZWZ(zrid,""zroMBR"")=$zro  ; Log zrid,zzro for mbr"
^ZWCmcd("epaGoDev-top","mcod",25)=" S ^ZWZ(0,""zridCur"")=zrid"
^ZWCmcd("epaGoDev-top","mcod",26)=" ;"
^ZWCmcd("epaGoDev-top","mcod",27)=" D ^dzWZuf(zrid)  ; from ^ZWZ(zrid,zroMBR to 0uzro./  file for MBR"
^ZWCmcd("epaGoDev-top","mcod",28)=" ;"
^ZWCmcd("epaGoDev-top","mcod",29)="    ;D ZST"
^ZWCmcd("epaGoDev-top","mcod",30)="        ;"
^ZWCmcd("epaGoDev-top","mcod",31)="        D ^epaMenu  ; Compiles and run "
^ZWCmcd("epaGoDev-top","mcod",32)="        Q"
^ZWCmcd("epaGoInd","mcod",1)="epaGoInd  ;CKW/ESC  i31oct22 rcfg/ ;20221031-07;Start Earley Parser Menu umep./ zroUcp self-contained"
^ZWCmcd("epaGoInd","mcod",2)=";"
^ZWCmcd("epaGoInd","mcod",3)="; input config:  $PWD must be umep, $zro bash is primary"
^ZWCmcd("epaGoInd","mcod",4)=";"
^ZWCmcd("epaGoInd-ZST","mcod",33)=";*"
^ZWCmcd("epaGoInd-ZST","mcod",34)=";*"
^ZWCmcd("epaGoInd-ZST","mcod",35)="ZST    U $P W !!,""^""_$T(+0)_""  $ZL="",$ZL,"",  $ZE="",$ZE,"",  $ZSTATUS="",$ZSTATUS,"",   $ZTRAP="",$ZTRAP,!"
^ZWCmcd("epaGoInd-ZST","mcod",36)="       Q"
^ZWCmcd("epaGoInd-top","mcod",5)="top     S $ETRAP=""B"""
^ZWCmcd("epaGoInd-top","mcod",6)="    ; Following for relative-to-$PWD refs in mumps.gld to g/ydb-mumps.dat"
^ZWCmcd("epaGoInd-top","mcod",7)="    S PWD=$ZTRNLNM(""PWD"")"
^ZWCmcd("epaGoInd-top","mcod",8)="      I $E(PWD)'=""/"" D b^dv(""Err PWD not abs ???"",""PWD"") Q"
^ZWCmcd("epaGoInd-top","mcod",9)="      DO  I Q'="""" Q  "
^ZWCmcd("epaGoInd-top","mcod",10)="        .S Q="""",nsl=$L(PWD,""/""),mpj=$P(PWD,""/"",nsl)"
^ZWCmcd("epaGoInd-top","mcod",11)="        .I mpj[""umep"" Q"
^ZWCmcd("epaGoInd-top","mcod",12)="        .S Q=""Cur Dir must be mpj ('umep') upon start mumps and ^""_$T(+0) "
^ZWCmcd("epaGoInd-top","mcod",13)="        .D b^dv(Q,""mpj,PWD"")"
^ZWCmcd("epaGoInd-top","mcod",14)="    ;  Note also compiles ^epa itself ???  works"
^ZWCmcd("epaGoInd-top","mcod",15)="    S zrid=""umep"""
^ZWCmcd("epaGoInd-top","mcod",16)="    S zroUcp=$G(^ZWZ(zrid,""zroUcp""))"
^ZWCmcd("epaGoInd-top","mcod",17)=";;Config epa choice:"
^ZWCmcd("epaGoInd-top","mcod",18)="    ;  zroUcp selfcontained umep./  util in ru* rdirs"
^ZWCmcd("epaGoInd-top","mcod",19)="    I zroUcp="""" W !!,""? zroUcp null ? "" BREAK  Q"
^ZWCmcd("epaGoInd-top","mcod",20)="    S $zro=zroUcp   "
^ZWCmcd("epaGoInd-top","mcod",21)="    ;Now regular start, compile"
^ZWCmcd("epaGoInd-top","mcod",22)=" D ^dzzl($zro)  ; deletes *.o and recompiles to o/*.o  and ou/*.o  for gmsa, gmma, gmfd, umfd"
^ZWCmcd("epaGoInd-top","mcod",23)=" ;"
^ZWCmcd("epaGoInd-top","mcod",24)=" S ^ZWZ(zrid,""zroMBR"")=$zro  ; Log zrid,zzro for mbr"
^ZWCmcd("epaGoInd-top","mcod",25)=" S ^ZWZ(0,""zridCur"")=zrid"
^ZWCmcd("epaGoInd-top","mcod",26)=" ;"
^ZWCmcd("epaGoInd-top","mcod",27)=" D ^dzWZuf(zrid)  ; from ^ZWZ(zrid,zroMBR to 0uzro./  file for MBR"
^ZWCmcd("epaGoInd-top","mcod",28)=" ;"
^ZWCmcd("epaGoInd-top","mcod",29)="    ;D ZST"
^ZWCmcd("epaGoInd-top","mcod",30)="        ;"
^ZWCmcd("epaGoInd-top","mcod",31)="        D ^epaMenu  ; Compiles and run "
^ZWCmcd("epaGoInd-top","mcod",32)="        Q"
^ZWCmcd("epaMenu","mcod",1)="epaMenu  ;CKW/ESC i31oct22 rcfg/ ;20221031-07; Earley Parser Menu"
^ZWCmcd("epaMenu","mcod",2)=";"
^ZWCmcd("epaMenu","mcod",3)=";"
^ZWCmcd("epaMenu","mcod",4)=";"
^ZWCmcd("epaMenu-Menu","mcod",21)=";*"
^ZWCmcd("epaMenu-Menu","mcod",22)="Menu ;Text for tdDev  Menu   Compile  RM()"
^ZWCmcd("epaMenu-Menu","mcod",23)="        ;  No-indent mnu, Indent option"
^ZWCmcd("epaMenu-Menu","mcod",24)="        ;mab. dPRP_dDE  "
^ZWCmcd("epaMenu-Menu","mcod",25)="        ;  op.  dopLR  dopDE # where dopLR contains ^  or menu mab./exists"
^ZWCmcd("epaMenu-Menu","mcod",26)="        ;  dnxt1  or dnxt2 Syntax: | pipe prefix"
^ZWCmcd("epaMenu-Menu","mcod",27)="  ;;mm. Select from Dev Tennis Main: _Main tdDev Menu  |mm"
^ZWCmcd("epaMenu-Menu","mcod",28)="  ;;  zro. Czro^epaUDcp  Update zroStd and zroUcp for umep./"
^ZWCmcd("epaMenu-Menu","mcod",29)="  ;;  cpu. ^epaUDcp Copy Revised Utilities from gmsa./ into umep./  ru*/  "
^ZWCmcd("epaMenu-Menu","mcod",30)="  ;;  go. p01^epMa ; Std Input, Demo Grammar, ep4, Parse"
^ZWCmcd("epaMenu-Menu","mcod",31)="  ;;  lua.  WSCLua^ep4W  Lua Equiv SCF Dump to console"
^ZWCmcd("epaMenu-Menu","mcod",32)="  ;;  gr.   WGR^ep4W Display Grammar"
^ZWCmcd("epaMenu-Menu","mcod",33)="  ;;  tsq.  TSQ^ep4W  write reverse trace"
^ZWCmcd("epaMenu-Menu","mcod",34)="  ;;  hr.  ^ep2HGrp  Reverse HGen Table"
^ZWCmcd("epaMenu-Menu","mcod",35)="  ;;  ht. ^ep2HGpt  HGen SCF state Table as HGen Table/Parse Tree"
^ZWCmcd("epaMenu-Menu","mcod",36)="  ;;  d2.  ^ep2Dbg Gen ALL from ikey list"
^ZWCmcd("epaMenu-Menu","mcod",37)="  ;;  t.   T^dvn  Test new debugger"
^ZWCmcd("epaMenu-Menu","mcod",38)="  ;;  tj. TJ^jfm  Test jfm vn analyzer"
^ZWCmcd("epaMenu-Menu","mcod",39)="  ;;      ^epaG0   Run RP versiontrial Parser  "
^ZWCmcd("epaMenu-Menu","mcod",40)="  ;;  mbr.  mep^mwMa  HGen mumps Browsing cb data "
^ZWCmcd("epaMenu-Menu","mcod",41)="  ;;  c.  ^cgzro  Derive zro"
^ZWCmcd("epaMenu-Menu","mcod",42)="  ;;OBS.   Obsolete versions"
^ZWCmcd("epaMenu-Menu","mcod",43)="  ;;  g2.   ^ep2G0  mep Parse demo input, grammar ala Lua"
^ZWCmcd("epaMenu-Menu","mcod",44)="  ;;  g3.   ^ep3G0  mep ^ep3* dev"
^ZWCmcd("epaMenu-Menu","mcod",45)="  ;;test.    test menu"
^ZWCmcd("epaMenu-Menu","mcod",46)="  ;;  tix.  tix^tdTRead test sr Xmf in Read Template"
^ZWCmcd("epaMenu-Menu","mcod",47)="  ;;***"
^ZWCmcd("epaMenu-Menu","mcod",48)="  "
^ZWCmcd("epaMenu-dis","mcod",14)=";*"
^ZWCmcd("epaMenu-dis","mcod",15)="dis     ;pre-Menu Status  of pridCur  etc."
^ZWCmcd("epaMenu-dis","mcod",16)="        W:$X ! W ""Event Date(evdt?d8):"",$G(evdt),""    ;,  gid="",$G(gid),!"
^ZWCmcd("epaMenu-dis","mcod",17)="        W:$X ! W ""  evFol:"",$G(evFol),!   ;"
^ZWCmcd("epaMenu-dis","mcod",18)="        W:$X ! W ""  devr:"",$G(devr),!"
^ZWCmcd("epaMenu-dis","mcod",19)="        KILL devr W !"
^ZWCmcd("epaMenu-dis","mcod",20)="        Q"
^ZWCmcd("epaMenu-tdeMenu","mcod",5)="tdeMenu ;CKW/ESC  i15nov21 ten4/ rcfg/ ; 20211119-38  ; td Tennis Draw  Menu Source"
^ZWCmcd("epaMenu-tdeMenu","mcod",6)=";"
^ZWCmcd("epaMenu-tdeMenu","mcod",7)=";"
^ZWCmcd("epaMenu-top","mcod",8)="top    KILL  S mSys=""mep"""
^ZWCmcd("epaMenu-top","mcod",9)="       S ^MNU(mSys,0,""mpreLR"")=""dis^""_$T(+0)  ;tdMenu""  ; ""VL^dmnDIS"""
^ZWCmcd("epaMenu-top","mcod",10)="       S ^MNU(mSys,0,""mpreVL"")=""mSys,evdt"""
^ZWCmcd("epaMenu-top","mcod",11)="       D ^dmnu(mSys,$T(+0),""mSys,evdt,gid,prid"")  ; ^MNU(0,""mSysCur"")  and go with menu"
^ZWCmcd("epaMenu-top","mcod",12)="       D bug^dv  Q  ; this effectively goes back to tda and its quit halts"
^ZWCmcd("epaMenu-top","mcod",13)=";"
^ZWCmcd("epaUDcp","mcod",1)="epaUDcp ;CKW/ESC i5apr23 umep./ rcfg/ ;20230405-02; Update zroStd, zroUcp;  Copy gmsa./ rdirs to ur*/ in umep"
^ZWCmcd("epaUDcp","mcod",2)=";"
^ZWCmcd("epaUDcp","mcod",3)=";"
^ZWCmcd("epaUDcp","mcod",4)=";"
^ZWCmcd("epaUDcp-CPu","mcod",16)=";* Copy GBL utilities to UBL ru* rdirs"
^ZWCmcd("epaUDcp-CPu","mcod",17)="CPu    D IIL ;  : zrid='umep', PB, PBL, GBL, UBL"
^ZWCmcd("epaUDcp-CPu","mcod",18)="       I $zro[""ruzro"" D b^dv(""Do not run this op from alias mep, zroUcp Self-contained config"",""zroUcp"") Q "
^ZWCmcd("epaUDcp-CPu","mcod",19)="       ; Copy files incl *.m from gmsa./  to umep./ modified rdir's ru* inside umep"
^ZWCmcd("epaUDcp-CPu","mcod",20)="       ;  Remove only *.m files first, copy all files"
^ZWCmcd("epaUDcp-CPu","mcod",21)="       ;    vs Remove rudir completely  urdir/"
^ZWCmcd("epaUDcp-CPu","mcod",22)="       F di=1:1:$L(GBL,"" "") S grdir=$P(GBL,"" "",di) I grdir'="""" DO  ;  "
^ZWCmcd("epaUDcp-CPu","mcod",23)="         .D grur ; grdir : urdir, Src~gurl, Des~uurl"
^ZWCmcd("epaUDcp-CPu","mcod",24)="         .S Z=""cd ""_PB_""; rm -rfv ""_urdir_""; mkdir -p ""_Des_""; cd ""_Des_"" ;rm *.m -v ; cp -rv ""_Src_""/* ""_Des"
^ZWCmcd("epaUDcp-CPu","mcod",25)="         .U $P W:$X ! W Z,!"
^ZWCmcd("epaUDcp-CPu","mcod",26)="         .ZSY Z"
^ZWCmcd("epaUDcp-CPu","mcod",27)="       U $P W "" Completed Util Copies."",!,""UBL:"",UBL,!!"
^ZWCmcd("epaUDcp-CPu","mcod",28)="       Q"
^ZWCmcd("epaUDcp-Czro","mcod",11)=";* Recalculate zroStd and zroUcp from lists PBL,GBL, UBL"
^ZWCmcd("epaUDcp-Czro","mcod",12)="Czro   D IIL ; PBL, GBL, UBL    "
^ZWCmcd("epaUDcp-Czro","mcod",13)="       D zroCSU  ; modified UBL -> zroStd, zroUcp in ^ZWZ(zrid~""umep"","
^ZWCmcd("epaUDcp-Czro","mcod",14)="       D b^dv(""Log zroStd, zroUcp calculation ur* "",""zroStd,zroUcp"")"
^ZWCmcd("epaUDcp-Czro","mcod",15)="       Q"
^ZWCmcd("epaUDcp-IIL","mcod",29)=";* mpjD~umep ; UBL, PBL, GBL, PB,SB,GB"
^ZWCmcd("epaUDcp-IIL","mcod",30)="IIL    S zrid=""umep"",mpjDir=zrid"
^ZWCmcd("epaUDcp-IIL","mcod",31)="       D mpjIB^dzIB(mpjDir) ; PB, SB from mpjD: umep"
^ZWCmcd("epaUDcp-IIL","mcod",32)="       S PBL=""rcfg rmep4 rmePT1 rsr rxmep1"""
^ZWCmcd("epaUDcp-IIL","mcod",33)="       S GBL=""rdve1 rzro3 rmgbFL3 rmGP3 rmenu3 rTOI7 rvv rhgen4b rdev3 rd2c rddv3"""
^ZWCmcd("epaUDcp-IIL","mcod",34)="       S UBL="""" F di=1:1:$L(GBL,"" "") S grdir=$P(GBL,"" "",di) DO  S UBL=$E(UBL,2,9999)"
^ZWCmcd("epaUDcp-IIL","mcod",35)="         .D grur ; grdir : urdir,"
^ZWCmcd("epaUDcp-IIL","mcod",36)="         .S UBL=UBL_"" $PB/""_urdir"
^ZWCmcd("epaUDcp-IIL","mcod",37)="       Q"
^ZWCmcd("epaUDcp-grur","mcod",38)=";* derive PB~umep ru* rdir from gmsa./ rdir"
^ZWCmcd("epaUDcp-grur","mcod",39)="grur   S urdir=""ru""_$E(grdir,2,99)"
^ZWCmcd("epaUDcp-grur","mcod",40)="       S gurl=GB_grdir,Src=gurl"
^ZWCmcd("epaUDcp-grur","mcod",41)="       S uurl=PB_urdir,Des=uurl"
^ZWCmcd("epaUDcp-grur","mcod",42)="       Q"
^ZWCmcd("epaUDcp-top","mcod",5)="top    ;"
^ZWCmcd("epaUDcp-top","mcod",6)="       S zrid=""umep"""
^ZWCmcd("epaUDcp-top","mcod",7)="       D Czro"
^ZWCmcd("epaUDcp-top","mcod",8)="       D CPu  ;"
^ZWCmcd("epaUDcp-top","mcod",9)="       Q"
^ZWCmcd("epaUDcp-top","mcod",10)="       "
^ZWCmcd("epaUDcp-zroCSU","mcod",43)=";* zrid  : zroC, and in ^ZWZ"
^ZWCmcd("epaUDcp-zroCSU","mcod",44)="zroCSU   ;"
^ZWCmcd("epaUDcp-zroCSU","mcod",45)="       D ^dzCzro(PB,PBL,UBL) ; : zro"
^ZWCmcd("epaUDcp-zroCSU","mcod",46)="       S zroUcp=zro"
^ZWCmcd("epaUDcp-zroCSU","mcod",47)="       S ^ZWZ(zrid,""zroUcp"")=zroUcp"
^ZWCmcd("epaUDcp-zroCSU","mcod",48)="       ;"
^ZWCmcd("epaUDcp-zroCSU","mcod",49)="       D ^dzCzro(PB,PBL,GBL) ; : zro       "
^ZWCmcd("epaUDcp-zroCSU","mcod",50)="       S zroStd=zro"
^ZWCmcd("epaUDcp-zroCSU","mcod",51)="       S ^ZWZ(zrid,""zroStd"")=zroStd     "
^ZWCmcd("epaUDcp-zroCSU","mcod",52)="       Q"
^ZWCmcd("epaUDcp-zroCSU","mcod",53)=";*"
^ZWCmcd("epaUDcp-zroCSU","mcod",54)=""
^ZWCmcd("epaUDcp-zroCSU","mcod",55)=""
^ZWCmcd("epaUDcp-zroCSU","mcod",56)=""
^ZWCmcd("epaUDcp-zroCSU","mcod",57)="       Q"
^ZWCmcd("gtIpg","mcod",1)="gtIpg ;CKW/ESC  i15Jan16 ; 20160116-29 ; Manage Page Names"
^ZWCmcd("gtIpg","mcod",2)="  ;"
^ZWCmcd("gtIpg","mcod",3)="  ;Potential Parameters-"
^ZWCmcd("gtIpg","mcod",4)="  ; SYS  {TP7r, U412, T1u, ...}"
^ZWCmcd("gtIpg","mcod",5)="  ; Vers"
^ZWCmcd("gtIpg","mcod",6)="  ; TimeStamp"
^ZWCmcd("gtIpg","mcod",7)="  ; Dir"
^ZWCmcd("gtIpg","mcod",8)="  ; NaApp "
^ZWCmcd("gtIpg","mcod",9)="  ; foid"
^ZWCmcd("gtIpg","mcod",10)="  ; MRou"
^ZWCmcd("gtIpg","mcod",11)="  ; MGbl"
^ZWCmcd("gtIpg","mcod",12)="  ; VarList"
^ZWCmcd("gtIpg","mcod",13)="  ; pty   Page Type - creator MRou  ~ Label here ?  ^gt* individually"
^ZWCmcd("gtIpg","mcod",14)="  ;"
^ZWCmcd("gtIpg","mcod",15)="  ;  fil=$$gt   : wFil"
^ZWCmcd("gtIpg-gt","mcod",16)="gt(SYS,pty)  I $G(pty)="""" B  Q"
^ZWCmcd("gtIpg-gt","mcod",17)="  I $G(SYS)="""" B  Q"
^ZWCmcd("gtIpg-gt","mcod",18)="  I ""T7r,TP7r,U412""'[SYS S zro=$zro d ^dv(""SYS"",""SYS,zro"")  Q"
^ZWCmcd("gtIpg-gt","mcod",19)="  I $L(pty)>10 d b^dv(""pty $L"",""pty,SYS,zro"") Q"
^ZWCmcd("gtIpg-gt","mcod",20)="  S fil=""gt-""_SYS_""-""_pty_"".html"""
^ZWCmcd("gtIpg-gt","mcod",21)="    S wFil=""gtmu/"""
^ZWCmcd("gtIpg-gt","mcod",22)="  Q fil"
^ZWCmcd("gtIpg-gt","mcod",23)="  ;"
^ZWCmcd("h4css","mcod",1)="h4ss  ;CKW/ESC  i15apr20 gmsa/ rhgen4b/ ; 20200415-93 ; Set CS() for css in <head"
^ZWCmcd("h4css","mcod",2)=";"
^ZWCmcd("h4css","mcod",3)=";"
^ZWCmcd("h4css","mcod",4)="   BREAK  H  ; No top for now"
^ZWCmcd("h4css","mcod",5)=";"
^ZWCmcd("h4css","mcod",6)=";  Only refs by ^hgh, internal module only, ir S(sel,prL)  even via ^hgh"
^ZWCmcd("h4css","mcod",7)=";"
^ZWCmcd("h4css-S","mcod",8)=";* sel is #id, .class or maybe tag no prefix"
^ZWCmcd("h4css-S","mcod",9)=";* pvL is _ list of prop:val pairs, opt end ea with ;"
^ZWCmcd("h4css-S","mcod",10)=";*$$Q  selector (.id, #class tag,  or combinations)  Save properties rule, add to h2 for now ala $$sc"
^ZWCmcd("h4css-S","mcod",11)="S(sel,prL) I $G(EOL)="""" S EOL=$C(12),EOF=$C(14)"
^ZWCmcd("h4css-S","mcod",12)="     NEW:0 Q,ty,d,si2,h2 S h2="""",Q="""""
^ZWCmcd("h4css-S","mcod",13)="     S ty=""tag"" ; { tag, id, class, complex }"
^ZWCmcd("h4css-S","mcod",14)="     S sel=$G(sel)"
^ZWCmcd("h4css-S","mcod",15)="     I $E(sel)=""#"" S ty=""id"""
^ZWCmcd("h4css-S","mcod",16)="     I $E(sel)=""."" S ty=""class"""
^ZWCmcd("h4css-S","mcod",17)="     I ty=""id"" S h2=h2_"" ""_sel_"" { ""   ; id has # prefix"
^ZWCmcd("h4css-S","mcod",18)="     I ty=""class"" S h2=h2_"" ""_sel_"" { ""  ; dot prefix class"
^ZWCmcd("h4css-S","mcod",19)="     I ty=""tag"" S h2=h2_"" ""_sel_"" { ""   ; tag no prefix"
^ZWCmcd("h4css-S","mcod",20)="     D propL(prL)  ; h2 : h2'"
^ZWCmcd("h4css-S","mcod",21)="     S HCS=HCS+1,HCS(HCS)=h2"
^ZWCmcd("h4css-S","mcod",22)="     I Q'="""" Q:$Q Q"
^ZWCmcd("h4css-S","mcod",23)="     Q:$Q """" Q"
^ZWCmcd("h4css-propL","mcod",24)=";*"
^ZWCmcd("h4css-propL","mcod",25)=";* h2 : h2' One rule, one line, one set of braces, mult prop in space list, term semicolon"
^ZWCmcd("h4css-propL","mcod",26)=";*  property list name:value pairs, space or _ list    _ when single quotes wrap embedded spaces"
^ZWCmcd("h4css-propL","mcod",27)="propL(peqL)     "
^ZWCmcd("h4css-propL","mcod",28)="     S nsc=$L(peqL,"";"")"
^ZWCmcd("h4css-propL","mcod",29)="     I peqL[""_"" S peqL=$TR(peqL,""_"","";"")  ; Kludge convert _ to ;  may be double"
^ZWCmcd("h4css-propL","mcod",30)="     I peqL'="""" F si2=1:1:$L(peqL,"";"") S pv=$P(peqL,"";"",si2) I pv'="""" DO  ;"
^ZWCmcd("h4css-propL","mcod",31)="       .I pv="""" B  Q  ; readability spaces ok  --handled before"
^ZWCmcd("h4css-propL","mcod",32)="       .I pv[""="" S e2=$P(pv,""="",2,9),e1=$P(pv,""="") D b^dv(""Err use colon not equal for css source"",""pv"")"
^ZWCmcd("h4css-propL","mcod",33)="       .E  I pv["":"" S e2=$P(pv,"":"",2,9),e1=$P(pv,"":"") ;D b^dv(""Log pv"",""pv,e1,e2"")"
^ZWCmcd("h4css-propL","mcod",34)="       .E  S e1="""",e2=pv  ;D b^dv(""fmt not = or :"",""pv,peqL"")"
^ZWCmcd("h4css-propL","mcod",35)="       .I e1="""" S h2=h2_e2_""; "" ; D b^dv(""css fmt err"",""e1,e2,pv,si2,peqL"")"
^ZWCmcd("h4css-propL","mcod",36)="       .I e1'=""""  DO  ;  equal or colon  converted to colon here"
^ZWCmcd("h4css-propL","mcod",37)="         ..;I e2'[""'"" S e2=""'""_e2_""'; ""  ; force quotes ?  vs embedded sp, ; , etc. ?"
^ZWCmcd("h4css-propL","mcod",38)="         ..S h2=h2_e1_"": ""_e2_"";  """
^ZWCmcd("h4css-propL","mcod",39)="       ;I h2[""'"" D ^dv(""Log occ of sgl quotes here"",""h2,HCS"")"
^ZWCmcd("h4css-propL","mcod",40)="     S h2=$TR(h2,""'"","""""""")  ; strip sgl quotes ?  vs convert to db ,"""""""")"
^ZWCmcd("h4css-propL","mcod",41)="     S h2=h2_"" } ""   ;  vs escape char slash inhbiting EOL ' }""_EOL'  ; Doesnt like / escape EOL      ""_EOL    "
^ZWCmcd("h4css-propL","mcod",42)="     Q"
^ZWCmcd("h4css-propL","mcod",43)=";*"
^ZWCmcd("hgh","mcod",1)="hgh ;CKW/ESC  i15May15 gmsa/ rhgen4b xx ; 20221201-40 ;  HGen Std Parts"
^ZWCmcd("hgh","mcod",2)=";   WHT  mod for ,!   $G(hghEOL)  See ^mwMod5"
^ZWCmcd("hgh","mcod",3)=";"
^ZWCmcd("hgh","mcod",4)=";  Mode shift:  gen h str, NO writes"
^ZWCmcd("hgh","mcod",5)=";        h into HTS() or HTE() or HT()"
^ZWCmcd("hgh","mcod",6)=";  Compare to MDk compile data structures tg, tx"
^ZWCmcd("hgh","mcod",7)=";RefBy: 1 dev  gmgu Nav  ^guN* in rgnav/"
^ZWCmcd("hgh","mcod",8)=";"
^ZWCmcd("hgh","mcod",9)="; falls from top here  (sic)"
^ZWCmcd("hgh","mcod",10)="  D bug^dv(""Should not use top of ^hgh"",""devh"")"
^ZWCmcd("hgh","mcod",11)="  Q"
^ZWCmcd("hgh","mcod",12)="  ;   dev vers of ^dvh, integral with ^cfIO"
^ZWCmcd("hgh","mcod",13)="  ;RefBy: gmgu/ KAcf/        later to convert: many uCal, T2DM, KA1, ..."
^ZWCmcd("hgh","mcod",14)="; 9aug19  still very much dev in progress, not clean design...  "
^ZWCmcd("hgh","mcod",15)=";     convert to h string vs WRITE's "
^ZWCmcd("hgh-A","mcod",44)=";*"
^ZWCmcd("hgh-A","mcod",45)="A     S Q=$$HGS I Q'="""" Q Q"
^ZWCmcd("hgh-A","mcod",46)="      S Q=$$HGE I Q'="""" Q Q"
^ZWCmcd("hgh-A","mcod",47)="      Q:'$Q  Q """""
^ZWCmcd("hgh-BODe","mcod",295)="BODe    I ($G(TImo)'[""NoFt"") D FT ;"
^ZWCmcd("hgh-BODe","mcod",296)="        D Esh(""</body>"") Q"
^ZWCmcd("hgh-BODs","mcod",290)="      ;*"
^ZWCmcd("hgh-BODs","mcod",291)="BODs D Ssh(""<body>"") "
^ZWCmcd("hgh-BODs","mcod",292)="        D HDR"
^ZWCmcd("hgh-BODs","mcod",293)="        D NAV"
^ZWCmcd("hgh-BODs","mcod",294)="        Q"
^ZWCmcd("hgh-DOCTYPE","mcod",225)="      ;*"
^ZWCmcd("hgh-DOCTYPE","mcod",226)="    ;RefBy: local, ^ktxHG*, others ?    This should be outside <html>, the first line of html file"
^ZWCmcd("hgh-DOCTYPE","mcod",227)="    ;See alternatives in ^dvh?, "
^ZWCmcd("hgh-DOCTYPE","mcod",228)="DOCTYPE D Ssh(""<!DOCTYPE html>"")"
^ZWCmcd("hgh-DOCTYPE","mcod",229)="        ;  D Ssh(""<html lang=""""en"""">"")  ; See label html"
^ZWCmcd("hgh-DOCTYPE","mcod",230)=" Q"
^ZWCmcd("hgh-Esh","mcod",92)="Esh(h) S HTE=HTE+1,HTE(HTE)=$G(h),h="""" Q"
^ZWCmcd("hgh-FT","mcod",333)=";*  TIft"
^ZWCmcd("hgh-FT","mcod",334)=";RefBy: ^guHNgo"
^ZWCmcd("hgh-FT","mcod",335)="FT S h2=$G(TIft) I h2="""" S h2=""^""_$T(+0)"
^ZWCmcd("hgh-FT","mcod",336)=" D Esh(""<h3>""_$ZD($H,"" DDMONYYYY 24:60 "")_""  by ""_h2_""</h3>"")"
^ZWCmcd("hgh-FT","mcod",337)=" Q"
^ZWCmcd("hgh-HD","mcod",231)=" ;*"
^ZWCmcd("hgh-HD","mcod",232)="HD      D Ssh(""<head>"") D met"
^ZWCmcd("hgh-HD","mcod",233)="        D TI"
^ZWCmcd("hgh-HD","mcod",234)="        D csso ; css in <head or <head <link (devcss)"
^ZWCmcd("hgh-HD","mcod",235)="        D js"
^ZWCmcd("hgh-HD","mcod",236)="        D Ssh(""</head>"")"
^ZWCmcd("hgh-HD","mcod",237)="        Q"
^ZWCmcd("hgh-HDR","mcod",297)="HDR I $G(TIhd)'="""" D Ssh(""<h1>""_TIhd_""</h1>"")"
^ZWCmcd("hgh-HDR","mcod",298)=" I $G(TImo)[""BraceLine"" S h1=sp3_""{ "" DO  "
^ZWCmcd("hgh-HDR","mcod",299)="   .D Ssh($$LNKh("" LOCAL/*"",""./""))"
^ZWCmcd("hgh-HDR","mcod",300)="   .S h1=h1_sp3_""} "" D Ssh(h1)"
^ZWCmcd("hgh-HDR","mcod",301)="   .I $G(devlog)'="""" D Ssh($$LNK("" Log"",devlog)) D Ssh(sp3)"
^ZWCmcd("hgh-HDR","mcod",302)="   .I $G(deverr)'="""" D Ssh($$LNK("" Errors "",deverr)) D Ssh(sp3)"
^ZWCmcd("hgh-HDR","mcod",303)="   .I $G(TIVL)'="""" D WTIV"
^ZWCmcd("hgh-HDR","mcod",304)=" Q"
^ZWCmcd("hgh-HGE","mcod",63)=";*$$Q but no errors, consistency"
^ZWCmcd("hgh-HGE","mcod",64)="HGE() ;D Esh(""</code>"") ; ??"
^ZWCmcd("hgh-HGE","mcod",65)="      D BODe"
^ZWCmcd("hgh-HGE","mcod",66)="      D htmlq"
^ZWCmcd("hgh-HGE","mcod",67)="      D KTI"
^ZWCmcd("hgh-HGE","mcod",68)="      Q:$Q """""
^ZWCmcd("hgh-HGE","mcod",69)="      Q"
^ZWCmcd("hgh-HGS","mcod",48)=";*"
^ZWCmcd("hgh-HGS","mcod",49)=";*$$  Q=$$HGS  : HTS()  then ^hghWH(devx) - open devx, write HTS,HT,HTE and close"
^ZWCmcd("hgh-HGS","mcod",50)=";   Note arg devw  is gone here -> goes to WH^hgh(devw)"
^ZWCmcd("hgh-HGS","mcod",51)=";   devcss  is ext css file name, flag to use HCS for external...See css vs cse sr"
^ZWCmcd("hgh-HGS","mcod",52)=";* was HG1, HGE was HG2"
^ZWCmcd("hgh-HGS","mcod",53)="HGS() KILL TSTK  S TSTK=0,tsti=0  ; dupl stk ptr ?"
^ZWCmcd("hgh-HGS","mcod",54)="      I $D(TI)>1 D ITI  ;  TI*, TI(), TIjson"
^ZWCmcd("hgh-HGS","mcod",55)="      S sp3=""&nbsp;&nbsp;&nbsp;"" "
^ZWCmcd("hgh-HGS","mcod",56)="      D DOCTYPE,html"
^ZWCmcd("hgh-HGS","mcod",57)="      D HD"
^ZWCmcd("hgh-HGS","mcod",58)="      D BODs"
^ZWCmcd("hgh-HGS","mcod",59)="      ;D Ssh(""<code>"") ; ??"
^ZWCmcd("hgh-HGS","mcod",60)="      Q:$Q """""
^ZWCmcd("hgh-HGS","mcod",61)="      Q"
^ZWCmcd("hgh-HGS","mcod",62)="; mod to add arg, to close it  11apr16 in FL2/rdv/  ^dvh  ref by ^mdwht and gmsa/rdv/"
^ZWCmcd("hgh-IKH","mcod",107)=";*"
^ZWCmcd("hgh-IKH","mcod",108)=";*  RefBy: Init above vs outside refs ?"
^ZWCmcd("hgh-IKH","mcod",109)="IKH    KILL HTS S HTS=0"
^ZWCmcd("hgh-IKH","mcod",110)="       KILL HTE S HTE=0"
^ZWCmcd("hgh-IKH","mcod",111)="       KILL HT S HT=0"
^ZWCmcd("hgh-IKH","mcod",112)="       Q"
^ZWCmcd("hgh-ITI","mcod",95)=";*  TI() and TI      Force all vars from Array TI, not strays, maybe null"
^ZWCmcd("hgh-ITI","mcod",96)="ITI   F vs=""tb"",""hd"",""VL"",""mo"",""ft"",""cssFil"" S vn=""TI""_vs,@vn=$G(TI(vs))"
^ZWCmcd("hgh-ITI","mcod",97)="      I $D(TItb)#2=0 S TItb=""HGen""  ; ???"
^ZWCmcd("hgh-ITI","mcod",98)="      Q"
^ZWCmcd("hgh-Init","mcod",101)=";* RefBy:  Caller, NOT HGS"
^ZWCmcd("hgh-Init","mcod",102)="Init  D IKH  ; KILL & init HTS, HTE and HT() guts ..."
^ZWCmcd("hgh-Init","mcod",103)="      D KTI  "
^ZWCmcd("hgh-Init","mcod",104)="      KILL CS  S CS=0"
^ZWCmcd("hgh-Init","mcod",105)="      KILL HCS S HCS=0  ; redundant ?"
^ZWCmcd("hgh-Init","mcod",106)="      Q"
^ZWCmcd("hgh-KTI","mcod",99)="KTI   KILL TI,TIhd,TIft  ; sic $D variability - clean up; x  VVL() not used"
^ZWCmcd("hgh-KTI","mcod",100)="      Q"
^ZWCmcd("hgh-LINK","mcod",305)=";*$$Q  to HT()"
^ZWCmcd("hgh-LINK","mcod",306)="LINK(txt,href)  NEW Q,h S Q="""""
^ZWCmcd("hgh-LINK","mcod",307)="        S h=$$LNKh($G(txt),$G(href))"
^ZWCmcd("hgh-LINK","mcod",308)="          I $E(h,1,2)'=""<a"" S Q=""?link"" Q Q"
^ZWCmcd("hgh-LINK","mcod",309)="        D sv(h)"
^ZWCmcd("hgh-LINK","mcod",310)="        Q:$Q """""
^ZWCmcd("hgh-LINK","mcod",311)="        Q"
^ZWCmcd("hgh-LNK","mcod",312)=";*$$Q    link <a...  Caller saves in H*()   "
^ZWCmcd("hgh-LNK","mcod",313)="LNK(txt,href) S h=$$LNKh($G(txt),$G(href)) Q:'$Q   Q """""
^ZWCmcd("hgh-LNKh","mcod",314)=";*    --sic $$ returns h (No errs/no cks)"
^ZWCmcd("hgh-LNKh","mcod",315)="LNKh(txt,href) NEW h,err  I $G(txt)="""" S Q=""txt? "" Q Q"
^ZWCmcd("hgh-LNKh","mcod",316)="      I $G(href)="""" S href=""./"""
^ZWCmcd("hgh-LNKh","mcod",317)="      S h=""<a href=""_href_"" >""_txt_""</a>"""
^ZWCmcd("hgh-LNKh","mcod",318)="      Q h"
^ZWCmcd("hgh-NAV","mcod",331)=";*       "
^ZWCmcd("hgh-NAV","mcod",332)="NAV Q"
^ZWCmcd("hgh-Q","mcod",353)="Q     Q:$Q Q   Q  ;either D or $$"
^ZWCmcd("hgh-Qct","mcod",210)="Qct    Q:$Q Q"
^ZWCmcd("hgh-Qct","mcod",211)="      I Q'="""" D bug^dv(""ct sync close/stack Err "",""Qict,ictstk,tag,cls,tsti,TSTK"")  ;Q to caller D ct^"
^ZWCmcd("hgh-Qct","mcod",212)="      Q  ; in case D ct^... No Error/Q (NEWed) returned  All ct should be $$"
^ZWCmcd("hgh-Ssh","mcod",89)=";*"
^ZWCmcd("hgh-Ssh","mcod",90)=";These are mostly? internal"
^ZWCmcd("hgh-Ssh","mcod",91)="Ssh(h) S HTS=HTS+1,HTS(HTS)=$G(h),h="""" Q"
^ZWCmcd("hgh-TI","mcod",243)="TI NEW title,t S title=$G(TItb)"
^ZWCmcd("hgh-TI","mcod",244)="          I title="""" S t=$G(TI(""title"")) I t'="""" S title=t"
^ZWCmcd("hgh-TI","mcod",245)="          I title="""" S title=""HGen""  ;Invalid html if absent or null"
^ZWCmcd("hgh-TI","mcod",246)="        D Ssh(""<title>""),Ssh(title),Ssh(""</title>"")"
^ZWCmcd("hgh-TI","mcod",247)="        Q"
^ZWCmcd("hgh-WCSS","mcod",248)=";*  Write CS()  to external css fle  devcss        "
^ZWCmcd("hgh-WCSS","mcod",249)=";*  CSq(sq,sel)=val ->  hFcss  "
^ZWCmcd("hgh-WCSS","mcod",250)=";*     make it a TI(""cssFil"")  parameter of HGS but output css file later, after guts, from CS()"
^ZWCmcd("hgh-WCSS","mcod",251)="WCSS(devcss)    ; needs ext fle name, I $G(filCSS)'="""";   rethink  OFW..."
^ZWCmcd("hgh-WCSS","mcod",252)="        I $G(devcss)="""" Q ""?devcss for css"""
^ZWCmcd("hgh-WCSS","mcod",253)=""
^ZWCmcd("hgh-WCSS","mcod",254)="        ; CS(sq,sel)=  fully formed line  sel { prL }"
^ZWCmcd("hgh-WCSS","mcod",255)="        ;*$$Q  Write css to file  vs head/css ?   incomplete..., unnecessary, write when called."
^ZWCmcd("hgh-WCSS","mcod",256)="        NEW Q S Q="""" I $G(devcss)="""" Q ""?arg dev"""
^ZWCmcd("hgh-WCSS","mcod",257)="        S Q=$$OFW^devIO(devcss) I Q'="""" Q Q"
^ZWCmcd("hgh-WCSS","mcod",258)="        USE devcss "
^ZWCmcd("hgh-WCSS","mcod",259)="        S sq=0 F si=0:1 S sq=$O(CS(sq)) Q:sq=""""  DO  ;"
^ZWCmcd("hgh-WCSS","mcod",260)="          .S sel="""" F ei=0:1 S sel=$O(CS(sq,sel)) Q:sel=""""  DO  ;"
^ZWCmcd("hgh-WCSS","mcod",261)="             ..S sep=CS(sq,sel) W:$X ! W sep,!"
^ZWCmcd("hgh-WCSS","mcod",262)="        S Q=$$CFW^devIO(devcss)"
^ZWCmcd("hgh-WCSS","mcod",263)="        Q Q"
^ZWCmcd("hgh-WH","mcod",338)=";*"
^ZWCmcd("hgh-WH","mcod",339)="; Write HTS, HT() and HTE() to devw"
^ZWCmcd("hgh-WH","mcod",340)=";$$      fixed Arry names for now ?  simple h-strings, html, not separated tags and text 30mar20"
^ZWCmcd("hgh-WH","mcod",341)=";"
^ZWCmcd("hgh-WH","mcod",342)=";  Follows HGS^hgh -> HTS() and HGE^hgh -> HTE and guts to HT"
^ZWCmcd("hgh-WH","mcod",343)=";*$$Q     RefBy: HBD^suMa,  ^guNHgo   was ^hghWH"
^ZWCmcd("hgh-WH","mcod",344)="WH(devw) I $G(devw)="""" D bug^dv Q ""1arg"""
^ZWCmcd("hgh-WH","mcod",345)="      NEW Q,wi D sEOL"
^ZWCmcd("hgh-WH","mcod",346)="      S Q=$$OFW^devIO(devw) I Q'="""" G Q"
^ZWCmcd("hgh-WH","mcod",347)="       ;"
^ZWCmcd("hgh-WH","mcod",348)="      USE devw "
^ZWCmcd("hgh-WH","mcod",349)="      D WHTS  ;D b^dv(""Log end WHTS"",""HTS"")"
^ZWCmcd("hgh-WH","mcod",350)="      D WHT"
^ZWCmcd("hgh-WH","mcod",351)="      D WHTE"
^ZWCmcd("hgh-WH","mcod",352)="      S Q=$$CFM^devIO(devw)"
^ZWCmcd("hgh-WHT","mcod",358)=";*      "
^ZWCmcd("hgh-WHT","mcod",359)="WHT   USE devw NEW h W:$X !  ; HT() -> devx"
^ZWCmcd("hgh-WHT","mcod",360)="      F wi=1:1:HT S h=HT(wi) DO  ;"
^ZWCmcd("hgh-WHT","mcod",361)="        .I $E(h,$L(h))=""\"" W $E(h,1,$L(h)-1) Q"
^ZWCmcd("hgh-WHT","mcod",362)="        .W h S $X=0 I $G(hghEOL) W !"
^ZWCmcd("hgh-WHT","mcod",363)="      Q"
^ZWCmcd("hgh-WHTE","mcod",364)=";*      "
^ZWCmcd("hgh-WHTE","mcod",365)="WHTE  USE devw W:$X !  ;  HTE() -> devx"
^ZWCmcd("hgh-WHTE","mcod",366)="      F wi=1:1:HTE W HTE(wi),!"
^ZWCmcd("hgh-WHTE","mcod",367)="      Q"
^ZWCmcd("hgh-WHTE","mcod",368)=""
^ZWCmcd("hgh-WHTE","mcod",369)=";"
^ZWCmcd("hgh-WHTS","mcod",354)=";*"
^ZWCmcd("hgh-WHTS","mcod",355)="WHTS   USE devw W:$X !  ; HTS() -> devx"
^ZWCmcd("hgh-WHTS","mcod",356)="      F wi=1:1:HTS W HTS(wi),!"
^ZWCmcd("hgh-WHTS","mcod",357)="      Q"
^ZWCmcd("hgh-WTIV","mcod",319)=";* Doc Vars after HDR - debug mainly"
^ZWCmcd("hgh-WTIV","mcod",320)=";* val is num and unit  or other value and unit, np wsp between num & unit"
^ZWCmcd("hgh-WTIV","mcod",321)=";* val itictf should not contain wsp ?"
^ZWCmcd("hgh-WTIV","mcod",322)=";* No quotes should be necessary in head or external css ?"
^ZWCmcd("hgh-WTIV","mcod",323)="WTIV   NEW vn,vi,val"
^ZWCmcd("hgh-WTIV","mcod",324)="       F vi=1:1:$L(TIVL,"","") S vn=$P(TIVL,"","",vi)  I vn'="""" DO"
^ZWCmcd("hgh-WTIV","mcod",325)="         .S val=$G(@vn)"
^ZWCmcd("hgh-WTIV","mcod",326)="         .I val="""",$D(@vn)#2=0 S val="" is UNDEF."""
^ZWCmcd("hgh-WTIV","mcod",327)="         .;W:$X ! W vn,""='"",val,""' "",!"
^ZWCmcd("hgh-WTIV","mcod",328)="         .;D Ssh(""<h4>""_vn_""='""_val_""' </h4>"")"
^ZWCmcd("hgh-WTIV","mcod",329)="         .D Ssh(vn_""='""_val_""' <br/>"")"
^ZWCmcd("hgh-WTIV","mcod",330)="       Q"
^ZWCmcd("hgh-br","mcod",135)=";*  <br/>  newline  dont ot because no ct, not really a normal element/box"
^ZWCmcd("hgh-br","mcod",136)="br()   D shg(""<br/>"")  Q"
^ZWCmcd("hgh-css","mcod",113)=";*"
^ZWCmcd("hgh-css","mcod",114)=";*$$Q  $$:err prL is space-list, ea ends in ;, pn:val sgl quotes prn"
^ZWCmcd("hgh-css","mcod",115)=";* was csl but restored better name css"
^ZWCmcd("hgh-css","mcod",116)="css(sel,prL) NEW err S err="""""
^ZWCmcd("hgh-css","mcod",117)="      I $G(sel)="""" S err=""csl arg reqd"" D bug^dv(err,""sel,prL"") Q err"
^ZWCmcd("hgh-css","mcod",118)="      I $G(prL)="""" S err=""arg prL reqd"" D bug^dv(err,""prL"") Q err"
^ZWCmcd("hgh-css","mcod",119)="      D S^h4css(sel,prL)  ; HCS"
^ZWCmcd("hgh-css","mcod",120)="      S Q=$$xsel(sel) I Q'="""" D b^dv(Q,""sel"") Q Q"
^ZWCmcd("hgh-css","mcod",121)="      S CS=CS+1 I $D(CS(CS,sel)) D b^dv(""Dupl CS?"",""CS,sel,prL"")"
^ZWCmcd("hgh-css","mcod",122)="      ; ? parse, err ck prL,  and rest of sel -- no error on bad css"
^ZWCmcd("hgh-css","mcod",123)="      S CS(CS,sel)=sel_""  {""_prL_""}""  ;  vs       S CS(sel,pn)=val"
^ZWCmcd("hgh-css","mcod",124)="      Q:'$Q  Q err"
^ZWCmcd("hgh-csso","mcod",264)=";*"
^ZWCmcd("hgh-csso","mcod",265)="csso ;write <link  inside <head  to ref ext css file if hFcss is set or in TI"
^ZWCmcd("hgh-csso","mcod",266)="        NEW Q D sEOL"
^ZWCmcd("hgh-csso","mcod",267)="        ;D b^dv(""Log css0 "",""devcss,CS"")"
^ZWCmcd("hgh-csso","mcod",268)="        I $G(devcss)'="""" DO   ; ext if devcss not null, link here, file later"
^ZWCmcd("hgh-csso","mcod",269)="          .S Q="""",n=$L(devcss,""/""),cfn=$P(devcss,""/"",n)"
^ZWCmcd("hgh-csso","mcod",270)="          .I $P(devcss,""/"",n-1)=""css/"" S cfn=""css/""_cfn"
^ZWCmcd("hgh-csso","mcod",271)="          .;D b^dv(""Log devcss link"",""devcss,cfn,n"")"
^ZWCmcd("hgh-csso","mcod",272)="          .D Ssh(""<link rel='stylesheet' type='text/css' href='""_cfn_""'>"")   ; rel <head<link "
^ZWCmcd("hgh-csso","mcod",273)="        ; else write in <head as <style"
^ZWCmcd("hgh-csso","mcod",274)="        I $G(devcss)="""" DO  "
^ZWCmcd("hgh-csso","mcod",275)="          .S h=""<style> "" D Ssh(h)  ; _EOL"
^ZWCmcd("hgh-csso","mcod",276)="          .S sq=0 F si=0:1 S sq=$O(CS(sq)) Q:sq=""""  DO  ;"
^ZWCmcd("hgh-csso","mcod",277)="            ..S sel=0 F sj=0:1 S sel=$O(CS(sq,sel)) Q:sel=""""  DO"
^ZWCmcd("hgh-csso","mcod",278)="              ...S h=CS(sq,sel) D Ssh(h)  ; _EOL"
^ZWCmcd("hgh-csso","mcod",279)="          .S h=""</style>"" D Ssh(h)  ; EOL_""</style>"""
^ZWCmcd("hgh-ct","mcod",194)=";*     "
^ZWCmcd("hgh-ct","mcod",195)=";*           "
^ZWCmcd("hgh-ct","mcod",196)=";*$$  Close tag from ict or TSTK(tsti)   -- if tsg null just pop and dont test tag=ctag"
^ZWCmcd("hgh-ct","mcod",197)=";$$Q?  "
^ZWCmcd("hgh-ct","mcod",198)=";;     sic bad design ,esp for common sr in HGen, chg to $$Q?  D ct or =$$ct"
^ZWCmcd("hgh-ct","mcod",199)="ct(ict0) NEW:0 h,Q,tag,cls,clstag,ictstk  S Q="""",id="""",tag=""div"""
^ZWCmcd("hgh-ct","mcod",200)="      S ict0=$G(ict0) I ict0'="""" S Q=$$xict(ict0) I Q'="""" D b^dv(""ict err (ct punt)"",""ict0,ict"") Goto Qct"
^ZWCmcd("hgh-ct","mcod",201)="      I $G(tsti)<1 S Q=""99 stack empty tsti,TSTK?"" D b^dv(Q,""tsti,TSTK,ict0,ict"") Goto Qct"
^ZWCmcd("hgh-ct","mcod",202)="      S stkict=TSTK(tsti,""ict""),tag=TSTK(tsti,""tag""),tsti=tsti-1  ; ict  POP stack"
^ZWCmcd("hgh-ct","mcod",203)="      I ict0'="""",ict0'=stkict DO  Goto Qct  ;"
^ZWCmcd("hgh-ct","mcod",204)="        .S Q=""1?. Mismatched ict=""_ict0_"", stkict=""_stkict"
^ZWCmcd("hgh-ct","mcod",205)="        .USE $P W:$X ! zwr TSTK  W !"
^ZWCmcd("hgh-ct","mcod",206)="        .;D b^dv(""ct close ict stack sync err"",""ict0,ict,ictstk"")"
^ZWCmcd("hgh-ct","mcod",207)="      S clstag=tag"
^ZWCmcd("hgh-ct","mcod",208)="      S h=""</""_clstag_"">""  ;usu div, occ other"
^ZWCmcd("hgh-ct","mcod",209)="      S Q=$$shg(h)"
^ZWCmcd("hgh-enc","mcod",73)=";*$$"
^ZWCmcd("hgh-enc","mcod",74)=";*   Nested call   S Q=$$sv^hgh($$enc^hgh(X))  "
^ZWCmcd("hgh-enc","mcod",75)="enc(X)  NEW i,Y S Y=X ;W !!,0,"". "",X,!"
^ZWCmcd("hgh-enc","mcod",76)="      F i=0:1 Q:Y'[""<""  S Y=$P(Y,""<"")_""~^lt;""_$P(Y,""<"",2,999)"
^ZWCmcd("hgh-enc","mcod",77)="      F i=0:1 Q:Y'["">""  S Y=$P(Y,"">"")_""~^gt;""_$P(Y,"">"",2,999)"
^ZWCmcd("hgh-enc","mcod",78)="      F i=0:1 Q:Y'[""&""  S Y=$P(Y,""&"")_""~^amp;""_$P(Y,""&"",2,999)"
^ZWCmcd("hgh-enc","mcod",79)="      F i=0:1 Q:Y'[""~^""  S Y=$P(Y,""~^"")_""&""_$P(Y,""~^"",2,999)"
^ZWCmcd("hgh-enc","mcod",80)="      Q Y"
^ZWCmcd("hgh-flexcol","mcod",33)=";*"
^ZWCmcd("hgh-flexcol","mcod",34)=";*$$Q  "
^ZWCmcd("hgh-flexcol","mcod",35)="flexcol(pardiv,kiddiv)  ; "
^ZWCmcd("hgh-flexcol","mcod",36)="       D css(pardiv,""display: flex; flex-direction: column; flex-wrap: nowrap; justify-content: flex-start; "")   ;Container"
^ZWCmcd("hgh-flexcol","mcod",37)="       D css(kiddiv,""flex: 1;"")                                ; Flex item"
^ZWCmcd("hgh-flexcol","mcod",38)="       Q:'$Q  Q """""
^ZWCmcd("hgh-flexrow","mcod",16)=";*"
^ZWCmcd("hgh-flexrow","mcod",17)=";   Dependencies:  OFW, CFM, CFW^devIO rd2io/"
^ZWCmcd("hgh-flexrow","mcod",18)="  ;"
^ZWCmcd("hgh-flexrow","mcod",19)="  ;  next guts by Caller"
^ZWCmcd("hgh-flexrow","mcod",20)="  ;  filCSS  is external css file"
^ZWCmcd("hgh-flexrow","mcod",21)="  ;  vs CS(sel,propn)=value  no semicolon."
^ZWCmcd("hgh-flexrow","mcod",22)="  ;  css(sel,propn,val)  - no quotes, mult refs to sel ok, diff propn's"
^ZWCmcd("hgh-flexrow","mcod",23)="  ;  csl(sel,prL)  prL is pre-composed mult list eg ""width:100px; border:1px;"""
^ZWCmcd("hgh-flexrow","mcod",24)="; Conversion from write to s h=h_  strings is in progress, still writes h  also"
^ZWCmcd("hgh-flexrow","mcod",25)=";*"
^ZWCmcd("hgh-flexrow","mcod",26)=";*$$Q  S^h4css -> css^hgh(sel,prL)"
^ZWCmcd("hgh-flexrow","mcod",27)="flexrow(pardiv,kiddivL)  NEW Q,ki,w,kiddiv S Q=""""  ;; "
^ZWCmcd("hgh-flexrow","mcod",28)="       D css(pardiv,""display: flex; flex-direction: row; flex-wrap: nowrap; justify-content: space-between; "")   ;Container"
^ZWCmcd("hgh-flexrow","mcod",29)="       F ki=1:1:$L(kiddivL,"" "") S kiddiv=$P(kiddivL,"" "",ki) DO  ;"
^ZWCmcd("hgh-flexrow","mcod",30)="         .S w=1 I kiddiv["":"" S w=$P(kiddiv,"":"",2),kiddiv=$P(kiddiv,"":"") I 'w S w=1"
^ZWCmcd("hgh-flexrow","mcod",31)="         .I kiddiv'="""" D css(kiddiv,""flex: ""_w_"";"")                                ; Flex item"
^ZWCmcd("hgh-flexrow","mcod",32)="       Q:'$Q  Q """""
^ZWCmcd("hgh-flexvert","mcod",39)=";*$$Q  "
^ZWCmcd("hgh-flexvert","mcod",40)="flexvert(pardiv,kiddiv)  ;  ;; sic name vs row  - already in use... dup flexcol"
^ZWCmcd("hgh-flexvert","mcod",41)="       D css(pardiv,""display: flex; flex-direction: column; flex-wrap: nowrap; justify-content: flex-start; "")   ;Container"
^ZWCmcd("hgh-flexvert","mcod",42)="       D css(kiddiv,""flex: 1;"")                                ; Flex item"
^ZWCmcd("hgh-flexvert","mcod",43)="       Q:'$Q  Q """""
^ZWCmcd("hgh-hr","mcod",137)="hr()   D shg(""<hr/>"")  Q   ; horizontal rule divider"
^ZWCmcd("hgh-html","mcod",70)=";*"
^ZWCmcd("hgh-html","mcod",71)="html D Ssh(""<html lang='en'>"") Q"
^ZWCmcd("hgh-htmlq","mcod",72)="htmlq D Esh(""</html>"") Q"
^ZWCmcd("hgh-js","mcod",283)=";*"
^ZWCmcd("hgh-js","mcod",284)="js I $D(JS)'=11 Q"
^ZWCmcd("hgh-js","mcod",285)="        D Ssh(""<script>"")"
^ZWCmcd("hgh-js","mcod",286)="        NEW ji S ji="""" F j0=0:1 S ji=$O(JS(ji)) Q:ji=""""  DO"
^ZWCmcd("hgh-js","mcod",287)="          .S J=$G(JS(ji)) D Ssh(J)"
^ZWCmcd("hgh-js","mcod",288)="        D Ssh(""/script>"")"
^ZWCmcd("hgh-js","mcod",289)="        Q"
^ZWCmcd("hgh-met","mcod",238)="met D Ssh(""<meta http-equiv=""""content-type"""" content=""""text/html; charset=UTF-8"""">"")"
^ZWCmcd("hgh-met","mcod",239)="        D Ssh(""<meta name=""""viewport"""" content=""""width=device-width, initial-scale=1"""">"")"
^ZWCmcd("hgh-met","mcod",240)="        I $G(TImo)[""NoCache"" DO  ;"
^ZWCmcd("hgh-met","mcod",241)="          .D Ssh(""<meta http-equiv=""""Cache-Control"""" content=""""no-cache, no-store, must-revalidate"""">"")"
^ZWCmcd("hgh-met","mcod",242)=" Q"
^ZWCmcd("hgh-ot","mcod",138)=";*  ict is #id, .class or element, not to be confused with css sel  selector, similar but broader"
^ZWCmcd("hgh-ot","mcod",139)=";*  add selectivity - class as second (opt) arg, which might be space list of classes"
^ZWCmcd("hgh-ot","mcod",140)=";*$$  ot shorter name, newer method- 17may20"
^ZWCmcd("hgh-ot","mcod",141)=";  $$Q null if ok"
^ZWCmcd("hgh-ot","mcod",142)="ot(ict,clsval) NEW h,err,cls,id  S err="""",id="""""
^ZWCmcd("hgh-ot","mcod",143)="       S Q=$$xict(ict) ; : tag, id and cls defined/set"
^ZWCmcd("hgh-ot","mcod",144)="         I Q'="""" D b^dv(""Err Syn ict"",""Q,ict"") Q Q"
^ZWCmcd("hgh-ot","mcod",145)="       I $G(clsval)'=""""  DO  ;"
^ZWCmcd("hgh-ot","mcod",146)="          .I $G(cls)'="""" D ^deverr(""Dupl class cls clsval"",""cls,clasval,ict"") "
^ZWCmcd("hgh-ot","mcod",147)="          .I ict'=""p"" D b^dv(""Err clsval not p sel (ict)"",""ict,cls"")"
^ZWCmcd("hgh-ot","mcod",148)="          .I tag="""" D b^dv(""Err clsval but not tag 1st arg ict"",""tag,ict,clsval"")"
^ZWCmcd("hgh-ot","mcod",149)="          .S cls=clsval"
^ZWCmcd("hgh-ot","mcod",150)="          .I cls["" "" S cls=""""""""_cls_"""""""" "
^ZWCmcd("hgh-ot","mcod",151)="       I $G(tsti)="""" D bug^dv(""tsti,TSTK not init for ^hgh HGS^hgh"",""ict"") S tsti=0  ; sic vs init ???"
^ZWCmcd("hgh-ot","mcod",152)="       S tsti=tsti+1,TSTK(tsti,""ict"")=ict,TSTK(tsti,""tag"")=tag"
^ZWCmcd("hgh-ot","mcod",153)="         ;W !,?tsti*2   ;indent"
^ZWCmcd("hgh-ot","mcod",154)="         S h=""<""_tag_"" """
^ZWCmcd("hgh-ot","mcod",155)="           I id'="""" S h=h_""id=""_id_"" """
^ZWCmcd("hgh-ot","mcod",156)="           I cls'="""" S h=h_"" class=""_cls_"" ""   ;Any use, tolerance for sgl quote?"
^ZWCmcd("hgh-ot","mcod",157)="           ; Note properties here are html/inline, not css so = is the syntax!"
^ZWCmcd("hgh-ot","mcod",158)="           ; NO Props except class and/or id ! "
^ZWCmcd("hgh-ot","mcod",159)="           ;   Q $$oprop()"
^ZWCmcd("hgh-ot","mcod",160)="           S h=h_"">"""
^ZWCmcd("hgh-ot","mcod",161)="           D shg(h)  ; : HT()"
^ZWCmcd("hgh-ot","mcod",162)="           I err'="""" D bug^dv(""Unexpected err"",""err,ict,tag,cls,h"") Q err"
^ZWCmcd("hgh-ot","mcod",163)="     Q:$Q err"
^ZWCmcd("hgh-ot","mcod",164)="     S Q=err Q      ;call vers both $$ and DO , ret Q (sic)"
^ZWCmcd("hgh-ota","mcod",165)=";*  ot variant with literal attr third arg, eg for colspan:3  in td"
^ZWCmcd("hgh-ota","mcod",166)=";*  ict is #id, .class or element, not to be confused with css sel  selector, similar but broader"
^ZWCmcd("hgh-ota","mcod",167)=";*  add selectivity - class as second (opt) arg, which might be space list of classes"
^ZWCmcd("hgh-ota","mcod",168)=";*$$  ot shorter name, newer method- 17may20"
^ZWCmcd("hgh-ota","mcod",169)=";  $$Q null if ok"
^ZWCmcd("hgh-ota","mcod",170)="ota(ict,clsval,atpar) NEW h,err,cls,id  S err="""",id="""""
^ZWCmcd("hgh-ota","mcod",171)="       S Q=$$xict(ict) ; : tag, id and cls defined/set"
^ZWCmcd("hgh-ota","mcod",172)="         I Q'="""" D b^dv(""Err Syn ict"",""Q,ict"") Q Q"
^ZWCmcd("hgh-ota","mcod",173)="       I $G(clsval)'=""""  DO  ;"
^ZWCmcd("hgh-ota","mcod",174)="          .I $G(cls)'="""" D ^deverr(""Dupl class cls clsval"",""cls,clasval,ict"") "
^ZWCmcd("hgh-ota","mcod",175)="          .;I ict'=""p"" D b^dv(""Err clsval not p sel (ict)"",""ict,cls"")  ;? td vs p ^ep2W"
^ZWCmcd("hgh-ota","mcod",176)="          .I tag="""" D b^dv(""Err clsval but not tag 1st arg ict"",""tag,ict,clsval"")"
^ZWCmcd("hgh-ota","mcod",177)="          .S cls=clsval"
^ZWCmcd("hgh-ota","mcod",178)="          .I cls["" "" S cls=""""""""_cls_"""""""" "
^ZWCmcd("hgh-ota","mcod",179)="       I $G(atpar)="""" S atpar="""""
^ZWCmcd("hgh-ota","mcod",180)="       I $G(tsti)="""" D bug^dv(""tsti,TSTK not init for ^hgh HGS^hgh"",""ict"") S tsti=0  ; sic vs init ???"
^ZWCmcd("hgh-ota","mcod",181)="       S tsti=tsti+1,TSTK(tsti,""ict"")=ict,TSTK(tsti,""tag"")=tag"
^ZWCmcd("hgh-ota","mcod",182)="         ;W !,?tsti*2   ;indent"
^ZWCmcd("hgh-ota","mcod",183)="         S h=""<""_tag_"" """
^ZWCmcd("hgh-ota","mcod",184)="           I id'="""" S h=h_""id=""_id_"" """
^ZWCmcd("hgh-ota","mcod",185)="           I cls'="""" S h=h_"" class=""_cls_"" ""   ;Any use, tolerance for sgl quote?"
^ZWCmcd("hgh-ota","mcod",186)="           ; Note properties here are html/inline, not css so = is the syntax!"
^ZWCmcd("hgh-ota","mcod",187)="           ; NO Props except class and/or id ! BUT here override by user of ota"
^ZWCmcd("hgh-ota","mcod",188)="           I atpar'="""" S h=h_"" ""_atpar"
^ZWCmcd("hgh-ota","mcod",189)="           S h=h_"">"""
^ZWCmcd("hgh-ota","mcod",190)="           D shg(h)  ; : HT()"
^ZWCmcd("hgh-ota","mcod",191)="           I err'="""" D bug^dv(""Unexpected err"",""err,ict,tag,cls,h"") Q err"
^ZWCmcd("hgh-ota","mcod",192)="     Q:$Q err"
^ZWCmcd("hgh-ota","mcod",193)="     S Q=err Q      ;call vers both $$ and DO , ret Q (sic) "
^ZWCmcd("hgh-peol","mcod",133)=";*"
^ZWCmcd("hgh-peol","mcod",134)="peol  D shg^hgh(""<p line-height=50%> </p>"") Q"
^ZWCmcd("hgh-sEOL","mcod",281)=";*"
^ZWCmcd("hgh-sEOL","mcod",282)="sEOL    S EOL=$C(12),EOF=$C(14) Q"
^ZWCmcd("hgh-shg","mcod",83)="shg(h)  S HT=HT+1,HT(HT)=$G(h),h="""" Q:$Q """" Q"
^ZWCmcd("hgh-sp","mcod",84)=";*  Non breaking spaces, html pita"
^ZWCmcd("hgh-sp","mcod",85)="sp(nsp) NEW ni   I '$G(nsp) S nsp=1"
^ZWCmcd("hgh-sp","mcod",86)="      I nsp>10 S nsp=10  ; silent max 10 nbsp ??"
^ZWCmcd("hgh-sp","mcod",87)="      F ni=1:1:nsp D sv(""&nbsp;"")"
^ZWCmcd("hgh-sp","mcod",88)="      Q"
^ZWCmcd("hgh-sv","mcod",81)=";*  sic not $$Q - not consistent, albeit no err"
^ZWCmcd("hgh-sv","mcod",82)="sv(h)   S HT=HT+1,HT(HT)=$G(h),h="""" Q:$Q """" Q   ; rev name for shg  ;Note $$sv or D sv^hgh"
^ZWCmcd("hgh-svrawh","mcod",93)=";*  pass raw pre-coded html in special cases - use case colspan in table"
^ZWCmcd("hgh-svrawh","mcod",94)="svrawh(h) S HT=HT+1,HT(HT)=$G(h) Q:$Q """" Q  ;sv should encode literal '<>&' etc."
^ZWCmcd("hgh-xict","mcod",213)=";*$$Q  ict : tag, id, cls    internal syntax check, expand . -> class=, # -> id="
^ZWCmcd("hgh-xict","mcod",214)="xict(ict) S tag=""div"",id="""",cls=""""  NEW err S err="""""
^ZWCmcd("hgh-xict","mcod",215)="      I $G(ict)="""" S err=""1ot. Null arg tag"" Q err"
^ZWCmcd("hgh-xict","mcod",216)="      I $E(ict)=""."" S cls=$P(ict,""."",2,9),tag=""div"""
^ZWCmcd("hgh-xict","mcod",217)="       I $E(ict)=""#"" S id=$P(ict,""#"",2,9),tag=""div"""
^ZWCmcd("hgh-xict","mcod",218)="      I $E(ict)?1A S tag=ict"
^ZWCmcd("hgh-xict","mcod",219)="      I ict?2.A1"".""2.AN.e DO  ;"
^ZWCmcd("hgh-xict","mcod",220)="        .S tag=$P(ict,"".""),cls=$P(ict,""."",2,9)"
^ZWCmcd("hgh-xict","mcod",221)="      I ict?2.A1""#""2.AN.e DO  ;"
^ZWCmcd("hgh-xict","mcod",222)="        .S tag=$P(ict,""#""),id=$P(ict,""#"",2)"
^ZWCmcd("hgh-xict","mcod",223)="      I cls["" ""!(cls["";"") S cls=""'""_cls_""'""  ; wrap in quotes if embedded sp or colon"
^ZWCmcd("hgh-xict","mcod",224)="      Q err"
^ZWCmcd("hgh-xsel","mcod",125)=";*"
^ZWCmcd("hgh-xsel","mcod",126)=";*$$Q  sel : tag, id, cls    internal syntax check, expand . -> class=, # -> id="
^ZWCmcd("hgh-xsel","mcod",127)="xsel(sel) S tag=""div"",id="""",cls=""""  NEW err S err="""""
^ZWCmcd("hgh-xsel","mcod",128)="      I $G(sel)="""" S err=""1ot. Null arg tag"" Q err"
^ZWCmcd("hgh-xsel","mcod",129)="      I $E(sel)=""."" S cls=$P(sel,""."",2,9)"
^ZWCmcd("hgh-xsel","mcod",130)="       I cls["" ""!(cls["";"") S cls=""'""_cls_""'""  ; wrap in quotes if embedded sp or colon"
^ZWCmcd("hgh-xsel","mcod",131)="      I $E(sel)=""#"" S id=$P(sel,""#"",2,9)"
^ZWCmcd("hgh-xsel","mcod",132)="      Q err"
^ZWCmcd("hgh-zb1","mcod",280)="zb1     Q"
^ZWCmcd("hghTemplate","mcod",1)="hghTemplate ;CKW/ESC i23jun22 gmma/ rbrzm1/ ;20220623-98;Simple Page HGen Template"
^ZWCmcd("hghTemplate","mcod",2)=";"
^ZWCmcd("hghTemplate","mcod",3)=";"
^ZWCmcd("hghTemplate","mcod",4)=";"
^ZWCmcd("hghTemplate-Hcss","mcod",23)=";*"
^ZWCmcd("hghTemplate-Hcss","mcod",24)="Hcss    D css^hgh("".line"",""font-size: 2em; background-color: lightblue;"")"
^ZWCmcd("hghTemplate-Hcss","mcod",25)="        D css^hgh("".line"",""write-space: pre-wrap;"")"
^ZWCmcd("hghTemplate-Hcss","mcod",26)="        D flexrow^hgh("".line"","".h1td:1 .h2td:1"")"
^ZWCmcd("hghTemplate-Hcss","mcod",27)="        Q"
^ZWCmcd("hghTemplate-Q","mcod",18)="Q   Q:$Q Q I Q'="""" D qd"
^ZWCmcd("hghTemplate-Q","mcod",19)="    Q"
^ZWCmcd("hghTemplate-Qbug","mcod",20)="Qbug  D qd Q:$Q Q  Q"
^ZWCmcd("hghTemplate-guts","mcod",28)=";*   RL() devFil   : HGen"
^ZWCmcd("hghTemplate-guts","mcod",29)="guts    For ri=1:1:RL S tx=RL(ri) DO line"
^ZWCmcd("hghTemplate-guts","mcod",30)="        Q"
^ZWCmcd("hghTemplate-line","mcod",31)="line    S text1=$P(tx,""_""),text2=$P(tx,""_"",2)"
^ZWCmcd("hghTemplate-line","mcod",32)="        D ot^hgh(.line)"
^ZWCmcd("hghTemplate-line","mcod",33)="        D ot^hgh("".h1td""),sv^hgh(text1),ct^hgh"
^ZWCmcd("hghTemplate-line","mcod",34)="        D ot^hgh("".h2td""),sv^hgh(text2),ct^hgh"
^ZWCmcd("hghTemplate-line","mcod",35)="        D ct^hgh("".line"")"
^ZWCmcd("hghTemplate-line","mcod",36)="        Q"
^ZWCmcd("hghTemplate-line","mcod",37)=";*"
^ZWCmcd("hghTemplate-line","mcod",38)=""
^ZWCmcd("hghTemplate-qd","mcod",21)="qd    D b^dv(""Err ^""_$T(+0),""Q,dev"")"
^ZWCmcd("hghTemplate-qd","mcod",22)="      Q"
^ZWCmcd("hghTemplate-top","mcod",5)="top   NEW Q I $$arg^mws(""zrid"") Goto Qbug"
^ZWCmcd("hghTemplate-top","mcod",6)="    S nmr=0,ncb=0"
^ZWCmcd("hghTemplate-top","mcod",7)="    S Q=$$devFil^mwIpg(""aa-TOC-All"") ; : devFil  destination html page"
^ZWCmcd("hghTemplate-top","mcod",8)="    D Init^hgh  ; Init Buffers"
^ZWCmcd("hghTemplate-top","mcod",9)="    S TItb=""aa-TOC-All"""
^ZWCmcd("hghTemplate-top","mcod",10)="    S TIhd=""Contents List - All MRou, All rdir"""
^ZWCmcd("hghTemplate-top","mcod",11)="    S TIft=""by ^""_$T(+0)_""  ""_$ZD($H,""YY MM DD 12:60AM"")"
^ZWCmcd("hghTemplate-top","mcod",12)="    D Hcss"
^ZWCmcd("hghTemplate-top","mcod",13)="    D HGS^hgh"
^ZWCmcd("hghTemplate-top","mcod",14)="    D guts"
^ZWCmcd("hghTemplate-top","mcod",15)="    D HGE^hgh"
^ZWCmcd("hghTemplate-top","mcod",16)="    D WH^hgh(devFil)"
^ZWCmcd("hghTemplate-top","mcod",17)="    Goto Q"
^ZWCmcd("hghTest","mcod",1)="hghTest  ;CKW/ESC i19jul22   gmsa/ rhgen4b/ ;20220719-40;Tests for ^hgh code"
^ZWCmcd("hghTest","mcod",2)=";"
^ZWCmcd("hghTest","mcod",3)=";"
^ZWCmcd("hghTest","mcod",4)=";"
^ZWCmcd("hghTest-TE","mcod",15)="TE    S Ya=$$enc^hgh(X)  I Ya'=Ye D b^dv(""Error enc^hgh "",""X,Ye,Ya"")"
^ZWCmcd("hghTest-TE","mcod",16)="      Q"
^ZWCmcd("hghTest-TE","mcod",17)=";*"
^ZWCmcd("hghTest-enc","mcod",5)=";*  Test encoding of < > &"
^ZWCmcd("hghTest-enc","mcod",6)="enc(Qt) S Qt=$G(Qt)"
^ZWCmcd("hghTest-enc","mcod",7)="      S X=""123<456"",Ye=""123&lt;456"" D TE"
^ZWCmcd("hghTest-enc","mcod",8)="      S X=""123<>456"",Ye=""123&lt;&gt;456"" D TE"
^ZWCmcd("hghTest-enc","mcod",9)="      S X=""123><456<>777"",Ye=""123&gt;&lt;456&lt;&gt;777"" D TE"
^ZWCmcd("hghTest-enc","mcod",10)="      S X=""<123<456>"",Ye=""&lt;123&lt;456&gt;"" D TE"
^ZWCmcd("hghTest-enc","mcod",11)="      S X=""<>"",Ye=""&lt;&gt;"" D TE"
^ZWCmcd("hghTest-enc","mcod",12)="      S X=""123<456&789"",Ye=""123&lt;456&amp;789"" D TE"
^ZWCmcd("hghTest-enc","mcod",13)="      S X=""123<&>456&789"",Ye=""123&lt;&amp;&gt;456&amp;789"" D TE"
^ZWCmcd("hghTest-enc","mcod",14)="      Q"
^ZWCmcd("hght","mcod",1)="hght()  ;CKW/ESC  i14aug20 gmsa/  rhgen4/ ; 20200814-33 ;sr for table, line-cols HGen"
^ZWCmcd("hght","mcod",2)=";"
^ZWCmcd("hght","mcod",3)=";  Entry: I^hght(xHFL)  Init/Compile super list,  HD ?,  WH^hgh(devh)  to write out HGen file"
^ZWCmcd("hght","mcod",4)=";     top or HLn - one line,  @vn by caller"
^ZWCmcd("hght","mcod",5)=";   "
^ZWCmcd("hght","mcod",6)="     Q $$HLn()"
^ZWCmcd("hght","mcod",7)="     Q  ;safety"
^ZWCmcd("hght","mcod",8)=";"
^ZWCmcd("hght","mcod",9)=";  Init  *HFL super var incl :2 width, :3 th col header"
^ZWCmcd("hght","mcod",10)=";    total line width"
^ZWCmcd("hght","mcod",11)=";"
^ZWCmcd("hght","mcod",12)=";  Each line, @vn  by caller, then can add vars like n, line num, not fromdb"
^ZWCmcd("hght","mcod",13)=";   but usu GFL^dgmg(rdirFL)   assoc super var list, order"
^ZWCmcd("hght","mcod",14)=";"
^ZWCmcd("hght","mcod",15)=";  Use cases:  1) ns fields ^gunHns2"
^ZWCmcd("hght","mcod",16)=";       2)  KAcf  and KA1  transactions"
^ZWCmcd("hght","mcod",17)=";   xHFL  seq and attr of fields : TFA()"
^ZWCmcd("hght-H1L","mcod",52)=";*  fq"
^ZWCmcd("hght-H1L","mcod",53)="H1L()  F vi=1:1:$L(tfaL,"","") S fn=$P(tfaL,"","",vi),@fn=TFA(fq,fn)"
^ZWCmcd("hght-H1L","mcod",54)="       S Q=$$ot^hgh("".lbox ""_vc) I Q'="""" Q Q"
^ZWCmcd("hght-H1L","mcod",55)="       S fv=$G(@vn) S fv="" ""_fv"
^ZWCmcd("hght-H1L","mcod",56)="       D sv^hgh(fv)"
^ZWCmcd("hght-H1L","mcod",57)="       S Q=$$ct^hgh()  ; "".lbox .vn-*"""
^ZWCmcd("hght-H1L","mcod",58)="       Q Q"
^ZWCmcd("hght-H1L","mcod",59)=";*       "
^ZWCmcd("hght-HD","mcod",41)=";*$$Q"
^ZWCmcd("hght-HD","mcod",42)="HD()   ;"
^ZWCmcd("hght-HD","mcod",43)="       Q """""
^ZWCmcd("hght-HLn","mcod",44)=";*"
^ZWCmcd("hght-HLn","mcod",45)=";  Entry  vs top  S Q=$$HLn^hght()   ; no actual argument, @vn by caller"
^ZWCmcd("hght-HLn","mcod",46)="HLn()  NEW Q,Qt  S Qt="""""
^ZWCmcd("hght-HLn","mcod",47)="       ; Line wrap, alt background, ...  tr ?"
^ZWCmcd("hght-HLn","mcod",48)="       S Q=$$ot^hgh("".line"") I Q'="""" S Qt=Qt+1_Q Q Qt"
^ZWCmcd("hght-HLn","mcod",49)="       F fq=1:1:TFA S Q=$$H1L() I Q'="""" S Qt=Qt+1_"" ""_Q"
^ZWCmcd("hght-HLn","mcod",50)="       S Q=$$ct^hgh("".line"") I Q'="""" S Qt=Qt+1_Q"
^ZWCmcd("hght-HLn","mcod",51)="       Q Qt"
^ZWCmcd("hght-I","mcod",18)="I(xHFL)  I $G(xHFL)="""" D bug^dv Q"
^ZWCmcd("hght-I","mcod",19)="       NEW Q,HFL,fi,L     NEW:0 vn,fw,fhd,fq,fn,tw"
^ZWCmcd("hght-I","mcod",20)="       I $zro'[""rd3hg"",$zro'[""rhgen"" D ^dzs D b^dv(""Needs rd3hg/rhgen4+ ^hgh version"",""zro"")"
^ZWCmcd("hght-I","mcod",21)="       S tw=0  KILL TFA  S T2=$P(xHFL,""_"",2),gHFL=$P(xHFL,""_"")"
^ZWCmcd("hght-I","mcod",22)="       F fi=1:1:$L(gHFL,"","") DO  ;"
^ZWCmcd("hght-I","mcod",23)="         .S fp=$P(gHFL,"","",fi),vn=$P(fp,"":"")"
^ZWCmcd("hght-I","mcod",24)="         .S fw=$P(fp,"":"",2) I 'fw S fw=8  ; in % of line width"
^ZWCmcd("hght-I","mcod",25)="         .S tw=tw+fw"
^ZWCmcd("hght-I","mcod",26)="         .S fhd=$P(fp,"":"",3) I fhd="""" S fhd=vn"
^ZWCmcd("hght-I","mcod",27)="         .S fq=fi"
^ZWCmcd("hght-I","mcod",28)="         .S vc=""vn-""_vn D css^hgh("".""_vc,""width:""_fw_""% ;"")         "
^ZWCmcd("hght-I","mcod",29)="         .S tfaL=""vn,fw,fhd,fp,vc"" "
^ZWCmcd("hght-I","mcod",30)="         .F vi=1:1:$L(tfaL,"","") S fn=$P(tfaL,"","",vi),TFA(fq,fn)=@fn,TFA=fq"
^ZWCmcd("hght-I","mcod",31)=""
^ZWCmcd("hght-I","mcod",32)="       I tw'=100 USE $P W:$X ! W ""Total width % is "",$G(tw),"", vs 100%"",!"
^ZWCmcd("hght-I","mcod",33)="       I T2'[""width:"" S T2=""Width: 800px;"""
^ZWCmcd("hght-I","mcod",34)="       D css^hgh("".line"",T2)  ; must be proper prL  width mainly  width: 800 px"
^ZWCmcd("hght-I","mcod",35)="       D flexrow^hgh("".line"","".lbox"")"
^ZWCmcd("hght-I","mcod",36)="       Q"
^ZWCmcd("hght-TTFA","mcod",37)=";*"
^ZWCmcd("hght-TTFA","mcod",38)="TTFA   I $D(TFA)'=11 D b^dv(""Need TFA - S Q=$$I^hght(xxxHFL)"",""TFA"") Q"
^ZWCmcd("hght-TTFA","mcod",39)="       S Q=$$HLn()"
^ZWCmcd("hght-TTFA","mcod",40)="       Q Q"
^ZWCmcd("hgtxt","mcod",1)="hgtxt   ;CKW/ESC i19feb22 ten8/  r  ; 20220219-03 ;Write GUTS text file for HGen transition"
^ZWCmcd("hgtxt","mcod",2)=";"
^ZWCmcd("hgtxt","mcod",3)=";"
^ZWCmcd("hgtxt-GUTS","mcod",30)=";*"
^ZWCmcd("hgtxt-GUTS","mcod",31)=";*"
^ZWCmcd("hgtxt-GUTS","mcod",32)="GUTS(devt)  NEW Q S Q="""""
^ZWCmcd("hgtxt-GUTS","mcod",33)="        S Q=$$CF^devIO(devt)"
^ZWCmcd("hgtxt-GUTS","mcod",34)="        S Q=$$OFR^devIO(devt) I Q'="""" Goto QG"
^ZWCmcd("hgtxt-GUTS","mcod",35)="        D sv^hgh(""<pre>"")  ; HTS(), HTE(), ..."
^ZWCmcd("hgtxt-GUTS","mcod",36)="        F rdi=1:1 USE devt R X S ZEOF=$ZEOF  USE $P Q:ZEOF  D sv^hgh(X)"
^ZWCmcd("hgtxt-GUTS","mcod",37)="        D sv^hgh(""</pre>"")  ; HTS(), HTE(), ..."
^ZWCmcd("hgtxt-GUTS","mcod",38)="        S Q=$$CFM^devIO(devt)"
^ZWCmcd("hgtxt-GUTS","mcod",39)="        USE devt"
^ZWCmcd("hgtxt-GUTS","mcod",40)="        D b^dv(""Log devt written"",""devt"")"
^ZWCmcd("hgtxt-HD","mcod",15)=";*"
^ZWCmcd("hgtxt-HD","mcod",16)="HD      W !,$G(TIdraw),!"
^ZWCmcd("hgtxt-HD","mcod",17)="        ;D ^dv(""Header ^hgtxt "",""TIdraw,TItb"")"
^ZWCmcd("hgtxt-HD","mcod",18)="        Q"
^ZWCmcd("hgtxt-HGE","mcod",19)=";*"
^ZWCmcd("hgtxt-HGE","mcod",20)=";*      ;Now write GITS"
^ZWCmcd("hgtxt-HGE","mcod",21)=";*"
^ZWCmcd("hgtxt-HGE","mcod",22)="HGE(devt)   NEW Q S Q="""""
^ZWCmcd("hgtxt-HGE","mcod",23)="        I $G(devt)="""" D bug^dv S Q=""arg devt"" Goto QE"
^ZWCmcd("hgtxt-HGE","mcod",24)="        S Q=$$OFR^devIO(devt) I Q'="""" Goto QE"
^ZWCmcd("hgtxt-HGE","mcod",25)="        USE devt W !"
^ZWCmcd("hgtxt-HGE","mcod",26)="        D CFW^devIO(devt)"
^ZWCmcd("hgtxt-HGE","mcod",27)="        USE $P W:$X ! W ""Completed inner text file "",devt,!"
^ZWCmcd("hgtxt-HGS","mcod",6)="HGS(devt)  NEW Q S Q="""""
^ZWCmcd("hgtxt-HGS","mcod",7)="        I $G(devt)="""" D bug^dv S Q=""arg devt"" Goto QS"
^ZWCmcd("hgtxt-HGS","mcod",8)="        S Q=$$OFW^devIO(devt) I Q'="""" USE $P Goto QS"
^ZWCmcd("hgtxt-HGS","mcod",9)="        USE devt D HD  ; TI*"
^ZWCmcd("hgtxt-HGS","mcod",10)="        ;I $G(TIVL)'="""" D ^dv(""Vars-"",TIVL)"
^ZWCmcd("hgtxt-HGS","mcod",11)="        ;D ^dv(""Footer-"",""TIft"")"
^ZWCmcd("hgtxt-HGS","mcod",12)="        W !"
^ZWCmcd("hgtxt-QE","mcod",28)="QE      Q:$Q Q  I Q'="""" D b^dv(""HGE Err "",""Q,devt"")"
^ZWCmcd("hgtxt-QE","mcod",29)="        Q"
^ZWCmcd("hgtxt-QG","mcod",41)="QG      Q:$Q Q  I Q'="""" D b^dv(Q,""Q,devt"")"
^ZWCmcd("hgtxt-QG","mcod",42)="        Q"
^ZWCmcd("hgtxt-QG","mcod",43)="        "
^ZWCmcd("hgtxt-QG","mcod",44)="        "
^ZWCmcd("hgtxt-QG","mcod",45)="        "
^ZWCmcd("hgtxt-QG","mcod",46)="        "
^ZWCmcd("hgtxt-QS","mcod",13)="QS      Q:$Q Q I Q'="""" D b^dv(""HGS Err "",""Q,devt"")"
^ZWCmcd("hgtxt-QS","mcod",14)="        Q"
^ZWCmcd("hgtxt-top","mcod",4)="top     BREAK  BREAK  HALT  ; No top entry ^hgtxt"
^ZWCmcd("hgtxt-top","mcod",5)=";   returns $I is devt, ready to just WRITE to it"
^ZWCmcd("jfm","mcod",1)="kfm ;CKW/ESC  i7dec22 umbr./  rmep2/ ;20221207-42;FIle man 2 - kw GFL/SFL, *IMG *FL"
^ZWCmcd("jfm","mcod",2)=";"
^ZWCmcd("jfm","mcod",3)=";"
^ZWCmcd("jfm","mcod",4)=";"
^ZWCmcd("jfm-A","mcod",69)=";*"
^ZWCmcd("jfm-A","mcod",70)="A   D ^ep2IMG  ; grFL, itemFL"
^ZWCmcd("jfm-A","mcod",71)="    D II(grFL)"
^ZWCmcd("jfm-A","mcod",72)="    D II(itemFL)"
^ZWCmcd("jfm-A","mcod",73)="    S vn=0 F vi=0:1 S vn=$O(Vna(vn)) Q:vn=""""  DO  ;"
^ZWCmcd("jfm-A","mcod",74)="      .I $G(Vni(vn))="""" W:$X ! W vn,"" Outside *FL- "" DO  ;"
^ZWCmcd("jfm-A","mcod",75)="        ..S cvs=$G(Vns(vn)),cvg=$G(Vng(vn)),cvn=$G(Vnn(vn))"
^ZWCmcd("jfm-A","mcod",76)="        ..W ""  #SFL:"",cvs,"",  #GFL:"",cvg,"",  #NFL:"",cvn,!"
^ZWCmcd("jfm-A","mcod",77)="    Q"
^ZWCmcd("jfm-GFL","mcod",8)="GFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("jfm-GFL","mcod",9)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) D bug^dv(Q,""SFL,GFL"") Goto Qb"
^ZWCmcd("jfm-GFL","mcod",10)="     S FL=$P(SFL,""_"")"
^ZWCmcd("jfm-GFL","mcod",11)="     I GFL'="""" S G=$P(GFL,""_"",2)"
^ZWCmcd("jfm-GFL","mcod",12)="     E  S G=$P(SFL,""_"",2)"
^ZWCmcd("jfm-GFL","mcod",13)="     I G="""" S Q=""Arg G GFL^""_$T(+0) D bug^dv(Q,""Q,SFL,GFL,G,FL"") Goto Qb"
^ZWCmcd("jfm-GFL","mcod",14)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),@vn=$G(@G@(vn)) DO ;"
^ZWCmcd("jfm-GFL","mcod",15)="       .S Vna(vn)=$G(Vna(vn))+1"
^ZWCmcd("jfm-GFL","mcod",16)="       .S Vng(vn)=$G(Vng(vn))+1     "
^ZWCmcd("jfm-GFL","mcod",17)="     G Q"
^ZWCmcd("jfm-II","mcod",78)=";*"
^ZWCmcd("jfm-II","mcod",79)="II(IFL)  S FL=$P(IFL,""_"")"
^ZWCmcd("jfm-II","mcod",80)="    F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),Vni(vn)=vi"
^ZWCmcd("jfm-II","mcod",81)="    Q"
^ZWCmcd("jfm-III","mcod",61)=";*"
^ZWCmcd("jfm-III","mcod",62)=";   Vna names, counts, Vns saved fields, Vng GFL refs, Vnn NFL refs"
^ZWCmcd("jfm-III","mcod",63)=";   fn outside *FL"
^ZWCmcd("jfm-III","mcod",64)=";   S Vna(vn)=$G(Vna(vn))+1 "
^ZWCmcd("jfm-III","mcod",65)=";   Analyze  vs *FL, strays, unref, no sets, null gets"
^ZWCmcd("jfm-III","mcod",66)=";   Fields in multiple lists, multiple G's"
^ZWCmcd("jfm-III","mcod",67)="III   KILL Vna,Vns,Vng,Vnn,Vni"
^ZWCmcd("jfm-III","mcod",68)="      Q"
^ZWCmcd("jfm-NFL","mcod",32)=";*"
^ZWCmcd("jfm-NFL","mcod",33)="NFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("jfm-NFL","mcod",34)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) Goto Qb"
^ZWCmcd("jfm-NFL","mcod",35)="     S FL=$P(SFL,""_"")"
^ZWCmcd("jfm-NFL","mcod",36)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),@vn="""" DO  ;"
^ZWCmcd("jfm-NFL","mcod",37)="       .S Vna(vn)=$G(Vna(vn))+1"
^ZWCmcd("jfm-NFL","mcod",38)="       .S Vnn(vn)=$G(Vnn(vn))+1     "
^ZWCmcd("jfm-NFL","mcod",39)="     G Q"
^ZWCmcd("jfm-Q","mcod",40)=";*"
^ZWCmcd("jfm-Q","mcod",41)=";* Common Q"
^ZWCmcd("jfm-Q","mcod",42)="Q    Q:$Q Q Q:Q=""""  ; else fall thru Q not null"
^ZWCmcd("jfm-Qb","mcod",43)="Qb   D qd Q:$Q Q Q"
^ZWCmcd("jfm-SFL","mcod",18)=";*"
^ZWCmcd("jfm-SFL","mcod",19)="SFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("jfm-SFL","mcod",20)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) Goto Qb"
^ZWCmcd("jfm-SFL","mcod",21)="     S FL=$P(SFL,""_"")"
^ZWCmcd("jfm-SFL","mcod",22)="     I GFL'="""" S G=$P(GFL,""_"",2)"
^ZWCmcd("jfm-SFL","mcod",23)="     E  S G=$P(SFL,""_"",2)"
^ZWCmcd("jfm-SFL","mcod",24)="     I G="""" S Q=""Arg G GFL^""_$T(+0) Goto Qb"
^ZWCmcd("jfm-SFL","mcod",25)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) DO  I Q'="""" G Qb"
^ZWCmcd("jfm-SFL","mcod",26)="       .S Vna(vn)=$G(Vna(vn))+1"
^ZWCmcd("jfm-SFL","mcod",27)="       .S Vns(vn)=$G(Vns(vn))+1"
^ZWCmcd("jfm-SFL","mcod",28)="       .S val=$G(@vn) I val'="""" S @G@(vn)=val Q"
^ZWCmcd("jfm-SFL","mcod",29)="       .I $D(@vn)=0 S Q=""loc var ""_vn_"" is UNDEF."" Q"
^ZWCmcd("jfm-SFL","mcod",30)="       .I $D(@G@(vn))'="""" KILL @G@(vn) Q       "
^ZWCmcd("jfm-SFL","mcod",31)="     G Q"
^ZWCmcd("jfm-T","mcod",45)=";*"
^ZWCmcd("jfm-T","mcod",46)=";*  from ^qds  Test *FL variable Comment in situ"
^ZWCmcd("jfm-T","mcod",47)=";*  Test VFL Comment inline vs actual var"
^ZWCmcd("jfm-T","mcod",48)="T(XXXX) NEW FLna,VFL,FL,G,C1,C2,M,D S D=$IO"
^ZWCmcd("jfm-T","mcod",49)="     S C1=$$^dvby() I $G(C2)="""" B"
^ZWCmcd("jfm-T","mcod",50)="     S FLna=$P(XXXX,""=""),VFL=$P(XXXX,""="",2,99)"
^ZWCmcd("jfm-T","mcod",51)="     I FLna["":"" S FLna=$P(XXXX,"":""),VFL=$P(XXXX,"":"",2,99)"
^ZWCmcd("jfm-T","mcod",52)="       I FLna="""" D b^dv("" Arg T^qds needs VFL="",""XXXX,FLna,C2"") Q"
^ZWCmcd("jfm-T","mcod",53)="     I $D(@FLna)=0 USE $P W:$X ! DO  W M,! Q"
^ZWCmcd("jfm-T","mcod",54)="       .S M=""in ""_C2_"",  T^qds,  VFL '""_FLna_""' is UNDEF D ^*IMG - """
^ZWCmcd("jfm-T","mcod",55)="     I @FLna'=VFL USE $P W:$X ! DO  "
^ZWCmcd("jfm-T","mcod",56)="       .W ""  "",FLna,"" in ^"",C2,""    does not match Comment XXXX -"",!"
^ZWCmcd("jfm-T","mcod",57)="       .W FLna,"":"",?8,@FLna,!"
^ZWCmcd("jfm-T","mcod",58)="       .W ""XXXX:"",?8,VFL,!"
^ZWCmcd("jfm-T","mcod",59)="     USE D  ; in case b^dv does USE $P"
^ZWCmcd("jfm-T","mcod",60)="     Q"
^ZWCmcd("jfm-TJ","mcod",82)=";*    "
^ZWCmcd("jfm-TJ","mcod",83)="TJ  D III"
^ZWCmcd("jfm-TJ","mcod",84)="    D ^ep2IMG"
^ZWCmcd("jfm-TJ","mcod",85)="    D NFL^jfm(grFL),NFL^jfm(itemFL)"
^ZWCmcd("jfm-TJ","mcod",86)="    S ruid=100,ruab=""abc.1"",ruLst=""abc,def,Pper"",dot=0"
^ZWCmcd("jfm-TJ","mcod",87)="    S Si=1,Sj=1"
^ZWCmcd("jfm-TJ","mcod",88)="    F k=1:1:10 D SFL^jfm(grFL),SFL^jfm(itemFL)"
^ZWCmcd("jfm-TJ","mcod",89)="    F k=1:1:20 D GFL^jfm(grFL)"
^ZWCmcd("jfm-TJ","mcod",90)="    S xyz=98 D SFL^jfm(""xyz"",grFL)"
^ZWCmcd("jfm-TJ","mcod",91)="    D A"
^ZWCmcd("jfm-TJ","mcod",92)="    Q"
^ZWCmcd("jfm-qd","mcod",44)="qd   D b^dv(""Err ^""_$T(+0),""Q,SFL,GFL,FL,G,vn,val"") Q"
^ZWCmcd("jfm-top","mcod",5)="top   BREAK  HALT  ; not top entry, yet ?"
^ZWCmcd("jfm-top","mcod",6)=";"
^ZWCmcd("jfm-top","mcod",7)=";"
^ZWCmcd("jfm~1","mcod",1)="kfm ;CKW/ESC  i7dec22 umbr./  rmep2/ ;20221207-42;FIle man 2 - kw GFL/SFL, *IMG *FL"
^ZWCmcd("jfm~1","mcod",2)=";"
^ZWCmcd("jfm~1","mcod",3)=";"
^ZWCmcd("jfm~1","mcod",4)=";"
^ZWCmcd("jfm~1-A","mcod",69)=";*"
^ZWCmcd("jfm~1-A","mcod",70)="A   D ^ep2IMG  ; grFL, itemFL"
^ZWCmcd("jfm~1-A","mcod",71)="    D II(grFL)"
^ZWCmcd("jfm~1-A","mcod",72)="    D II(itemFL)"
^ZWCmcd("jfm~1-A","mcod",73)="    S vn=0 F vi=0:1 S vn=$O(Vna(vn)) Q:vn=""""  DO  ;"
^ZWCmcd("jfm~1-A","mcod",74)="      .I $G(Vni(vn))="""" W:$X ! W vn,"" Outside *FL- "" DO  ;"
^ZWCmcd("jfm~1-A","mcod",75)="        ..S cvs=$G(Vns(vn)),cvg=$G(Vng(vn)),cvn=$G(Vnn(vn))"
^ZWCmcd("jfm~1-A","mcod",76)="        ..W ""  #SFL:"",cvs,"",  #GFL:"",cvg,"",  #NFL:"",cvn,!"
^ZWCmcd("jfm~1-A","mcod",77)="    Q"
^ZWCmcd("jfm~1-GFL","mcod",8)="GFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("jfm~1-GFL","mcod",9)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) D bug^dv(Q,""SFL,GFL"") Goto Qb"
^ZWCmcd("jfm~1-GFL","mcod",10)="     S FL=$P(SFL,""_"")"
^ZWCmcd("jfm~1-GFL","mcod",11)="     I GFL'="""" S G=$P(GFL,""_"",2)"
^ZWCmcd("jfm~1-GFL","mcod",12)="     E  S G=$P(SFL,""_"",2)"
^ZWCmcd("jfm~1-GFL","mcod",13)="     I G="""" S Q=""Arg G GFL^""_$T(+0) D bug^dv(Q,""Q,SFL,GFL,G,FL"") Goto Qb"
^ZWCmcd("jfm~1-GFL","mcod",14)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),@vn=$G(@G@(vn)) DO ;"
^ZWCmcd("jfm~1-GFL","mcod",15)="       .S Vna(vn)=$G(Vna(vn))+1"
^ZWCmcd("jfm~1-GFL","mcod",16)="       .S Vng(vn)=$G(Vng(vn))+1     "
^ZWCmcd("jfm~1-GFL","mcod",17)="     G Q"
^ZWCmcd("jfm~1-II","mcod",78)=";*"
^ZWCmcd("jfm~1-II","mcod",79)="II(IFL)  S FL=$P(IFL,""_"")"
^ZWCmcd("jfm~1-II","mcod",80)="    F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),Vni(vn)=vi"
^ZWCmcd("jfm~1-II","mcod",81)="    Q"
^ZWCmcd("jfm~1-III","mcod",61)=";*"
^ZWCmcd("jfm~1-III","mcod",62)=";   Vna names, counts, Vns saved fields, Vng GFL refs, Vnn NFL refs"
^ZWCmcd("jfm~1-III","mcod",63)=";   fn outside *FL"
^ZWCmcd("jfm~1-III","mcod",64)=";   S Vna(vn)=$G(Vna(vn))+1 "
^ZWCmcd("jfm~1-III","mcod",65)=";   Analyze  vs *FL, strays, unref, no sets, null gets"
^ZWCmcd("jfm~1-III","mcod",66)=";   Fields in multiple lists, multiple G's"
^ZWCmcd("jfm~1-III","mcod",67)="III   KILL Vna,Vns,Vng,Vnn,Vni"
^ZWCmcd("jfm~1-III","mcod",68)="      Q"
^ZWCmcd("jfm~1-NFL","mcod",32)=";*"
^ZWCmcd("jfm~1-NFL","mcod",33)="NFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("jfm~1-NFL","mcod",34)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) Goto Qb"
^ZWCmcd("jfm~1-NFL","mcod",35)="     S FL=$P(SFL,""_"")"
^ZWCmcd("jfm~1-NFL","mcod",36)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),@vn="""" DO  ;"
^ZWCmcd("jfm~1-NFL","mcod",37)="       .S Vna(vn)=$G(Vna(vn))+1"
^ZWCmcd("jfm~1-NFL","mcod",38)="       .S Vnn(vn)=$G(Vnn(vn))+1     "
^ZWCmcd("jfm~1-NFL","mcod",39)="     G Q"
^ZWCmcd("jfm~1-Q","mcod",40)=";*"
^ZWCmcd("jfm~1-Q","mcod",41)=";* Common Q"
^ZWCmcd("jfm~1-Q","mcod",42)="Q    Q:$Q Q Q:Q=""""  ; else fall thru Q not null"
^ZWCmcd("jfm~1-Qb","mcod",43)="Qb   D qd Q:$Q Q Q"
^ZWCmcd("jfm~1-SFL","mcod",18)=";*"
^ZWCmcd("jfm~1-SFL","mcod",19)="SFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("jfm~1-SFL","mcod",20)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) Goto Qb"
^ZWCmcd("jfm~1-SFL","mcod",21)="     S FL=$P(SFL,""_"")"
^ZWCmcd("jfm~1-SFL","mcod",22)="     I GFL'="""" S G=$P(GFL,""_"",2)"
^ZWCmcd("jfm~1-SFL","mcod",23)="     E  S G=$P(SFL,""_"",2)"
^ZWCmcd("jfm~1-SFL","mcod",24)="     I G="""" S Q=""Arg G GFL^""_$T(+0) Goto Qb"
^ZWCmcd("jfm~1-SFL","mcod",25)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) DO  I Q'="""" G Qb"
^ZWCmcd("jfm~1-SFL","mcod",26)="       .S Vna(vn)=$G(Vna(vn))+1"
^ZWCmcd("jfm~1-SFL","mcod",27)="       .S Vns(vn)=$G(Vns(vn))+1"
^ZWCmcd("jfm~1-SFL","mcod",28)="       .S val=$G(@vn) I val'="""" S @G@(vn)=val Q"
^ZWCmcd("jfm~1-SFL","mcod",29)="       .I $D(@vn)=0 S Q=""loc var ""_vn_"" is UNDEF."" Q"
^ZWCmcd("jfm~1-SFL","mcod",30)="       .I $D(@G@(vn))'="""" KILL @G@(vn) Q       "
^ZWCmcd("jfm~1-SFL","mcod",31)="     G Q"
^ZWCmcd("jfm~1-T","mcod",45)=";*"
^ZWCmcd("jfm~1-T","mcod",46)=";*  from ^qds  Test *FL variable Comment in situ"
^ZWCmcd("jfm~1-T","mcod",47)=";*  Test VFL Comment inline vs actual var"
^ZWCmcd("jfm~1-T","mcod",48)="T(XXXX) NEW FLna,VFL,FL,G,C1,C2,M,D S D=$IO"
^ZWCmcd("jfm~1-T","mcod",49)="     S C1=$$^dvby() I $G(C2)="""" B"
^ZWCmcd("jfm~1-T","mcod",50)="     S FLna=$P(XXXX,""=""),VFL=$P(XXXX,""="",2,99)"
^ZWCmcd("jfm~1-T","mcod",51)="     I FLna["":"" S FLna=$P(XXXX,"":""),VFL=$P(XXXX,"":"",2,99)"
^ZWCmcd("jfm~1-T","mcod",52)="       I FLna="""" D b^dv("" Arg T^qds needs VFL="",""XXXX,FLna,C2"") Q"
^ZWCmcd("jfm~1-T","mcod",53)="     I $D(@FLna)=0 USE $P W:$X ! DO  W M,! Q"
^ZWCmcd("jfm~1-T","mcod",54)="       .S M=""in ""_C2_"",  T^qds,  VFL '""_FLna_""' is UNDEF D ^*IMG - """
^ZWCmcd("jfm~1-T","mcod",55)="     I @FLna'=VFL USE $P W:$X ! DO  "
^ZWCmcd("jfm~1-T","mcod",56)="       .W ""  "",FLna,"" in ^"",C2,""    does not match Comment XXXX -"",!"
^ZWCmcd("jfm~1-T","mcod",57)="       .W FLna,"":"",?8,@FLna,!"
^ZWCmcd("jfm~1-T","mcod",58)="       .W ""XXXX:"",?8,VFL,!"
^ZWCmcd("jfm~1-T","mcod",59)="     USE D  ; in case b^dv does USE $P"
^ZWCmcd("jfm~1-T","mcod",60)="     Q"
^ZWCmcd("jfm~1-TJ","mcod",82)=";*    "
^ZWCmcd("jfm~1-TJ","mcod",83)="TJ  D III"
^ZWCmcd("jfm~1-TJ","mcod",84)="    D ^ep2IMG"
^ZWCmcd("jfm~1-TJ","mcod",85)="    D NFL^jfm(grFL),NFL^jfm(itemFL)"
^ZWCmcd("jfm~1-TJ","mcod",86)="    S ruid=100,ruab=""abc.1"",ruLst=""abc,def,Pper"",dot=0"
^ZWCmcd("jfm~1-TJ","mcod",87)="    S Si=1,Sj=1"
^ZWCmcd("jfm~1-TJ","mcod",88)="    F k=1:1:10 D SFL^jfm(grFL),SFL^jfm(itemFL)"
^ZWCmcd("jfm~1-TJ","mcod",89)="    F k=1:1:20 D GFL^jfm(grFL)"
^ZWCmcd("jfm~1-TJ","mcod",90)="    S xyz=98 D SFL^jfm(""xyz"",grFL)"
^ZWCmcd("jfm~1-TJ","mcod",91)="    D A"
^ZWCmcd("jfm~1-TJ","mcod",92)="    Q"
^ZWCmcd("jfm~1-qd","mcod",44)="qd   D b^dv(""Err ^""_$T(+0),""Q,SFL,GFL,FL,G,vn,val"") Q"
^ZWCmcd("jfm~1-top","mcod",5)="top   BREAK  HALT  ; not top entry, yet ?"
^ZWCmcd("jfm~1-top","mcod",6)=";"
^ZWCmcd("jfm~1-top","mcod",7)=";"
^ZWCmcd("kaAXrdir","mcod",1)="kaAXrdir ;CKW/ESC i5feb23  fka3i./ rcfg/ ;20230205-38; rdir Dependency List vs MBR ?"
^ZWCmcd("kaAXrdir","mcod",2)=";"
^ZWCmcd("kaAXrdir","mcod",3)=";"
^ZWCmcd("kaAXrdir","mcod",4)=";"
^ZWCmcd("kaAXrdir-top","mcod",5)="top      NEW Q S Q="""" "
^ZWCmcd("kaAXrdir-top","mcod",6)="         D tzro"
^ZWCmcd("kaAXrdir-top","mcod",7)="         Q"
^ZWCmcd("kaAXrdir-top","mcod",8)=";*         "
^ZWCmcd("kaAXrdir-top","mcod",9)=""
^ZWCmcd("kaAXrdir-tzro","mcod",14)=";*   Writes if rdir not in $zro"
^ZWCmcd("kaAXrdir-tzro","mcod",15)="tzro  NEW Q S Q="""" "
^ZWCmcd("kaAXrdir-tzro","mcod",16)="      S szro=$P($zro,""o("",2)  ; skip ydb_dist to good stuff"
^ZWCmcd("kaAXrdir-tzro","mcod",17)="        I szro="""" S Q=""Err szro subset of $zro"" D b^dv(Q,""szro"") Q"
^ZWCmcd("kaAXrdir-tzro","mcod",18)="      F I=1:1 S T=$T(xref+I) Q:T'["";;""  DO  ;"
^ZWCmcd("kaAXrdir-tzro","mcod",19)="        .S L=$P(T,"";;"",2,9)"
^ZWCmcd("kaAXrdir-tzro","mcod",20)="        .I $E(L)=""#"" Q  ;full line comment ?"
^ZWCmcd("kaAXrdir-tzro","mcod",21)="        .S L2=$$DSP^dvc(L)"
^ZWCmcd("kaAXrdir-tzro","mcod",22)="        .S mpj=$P(L2,"" "")"
^ZWCmcd("kaAXrdir-tzro","mcod",23)="        .S rdir=$P(L2,"" "",2)"
^ZWCmcd("kaAXrdir-tzro","mcod",24)="        .S rdX="""" I $E(rdir,$L(rdir))?1n S rdX=$E(rdir,1,$L(rdir)-1) ;strip term digit"
^ZWCmcd("kaAXrdir-tzro","mcod",25)="        .S rde=$P(L2,"" "",3,99)"
^ZWCmcd("kaAXrdir-tzro","mcod",26)="        .;  test $zro"
^ZWCmcd("kaAXrdir-tzro","mcod",27)="        .I szro[(""/""_rdir_"" "") Q"
^ZWCmcd("kaAXrdir-tzro","mcod",28)="        .S Q="" rdir (""_rdir_"") not in $zro."""
^ZWCmcd("kaAXrdir-tzro","mcod",29)="        .USE $P W:$X ! W Q"
^ZWCmcd("kaAXrdir-tzro","mcod",30)="        .I szro[(""/""_rdX_"" "") DO  ;"
^ZWCmcd("kaAXrdir-tzro","mcod",31)="           ..S n=$F(szro,rdX)-$L(rdX)-1"
^ZWCmcd("kaAXrdir-tzro","mcod",32)="           ..S r=$E(szro,n,n+$L(rdX)+1)"
^ZWCmcd("kaAXrdir-tzro","mcod",33)="           ..W !,"" but, Another version may be: "",r,!"
^ZWCmcd("kaAXrdir-tzro","mcod",34)="      I Q'="""" D ^dzs W !!"
^ZWCmcd("kaAXrdir-tzro","mcod",35)="      Q"
^ZWCmcd("kaAXrdir-tzro","mcod",36)=";*"
^ZWCmcd("kaAXrdir-xref","mcod",10)="xref     ;"
^ZWCmcd("kaAXrdir-xref","mcod",11)=";;$GB rmgbFL3/   ^dgmg  and ^kfm  *IMG Field Lists   SFL/GFL"
^ZWCmcd("kaAXrdir-xref","mcod",12)=";;$GB rdd2/      Dates  ^   "
^ZWCmcd("kaAXrdir-xref","mcod",13)=";;$GB "
^ZWCmcd("kfm","mcod",1)="kfm ;CKW/ESC  i7dec22 umbr./  rmep2/ ;20221207-42;FIle man 2 - kw GFL/SFL, *IMG *FL"
^ZWCmcd("kfm","mcod",2)="; Replacement for ^dgmg  - was always a terrible mnemonic vs kfm  kirts's FileManager"
^ZWCmcd("kfm","mcod",3)=";"
^ZWCmcd("kfm","mcod",4)=";"
^ZWCmcd("kfm-GFL","mcod",8)="GFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("kfm-GFL","mcod",9)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) D bug^dv(Q,""SFL,GFL"") Goto Qb"
^ZWCmcd("kfm-GFL","mcod",10)="     S FL=$P(SFL,""_"")"
^ZWCmcd("kfm-GFL","mcod",11)="     I GFL'="""" S G=$P(GFL,""_"",2)"
^ZWCmcd("kfm-GFL","mcod",12)="     E  S G=$P(SFL,""_"",2)"
^ZWCmcd("kfm-GFL","mcod",13)="     I G="""" S Q=""Arg G GFL^""_$T(+0) D bug^dv(Q,""Q,SFL,GFL,G,FL"") Goto Qb"
^ZWCmcd("kfm-GFL","mcod",14)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),@vn=$G(@G@(vn))"
^ZWCmcd("kfm-GFL","mcod",15)="     G Q"
^ZWCmcd("kfm-NFL","mcod",28)=";*"
^ZWCmcd("kfm-NFL","mcod",29)="NFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("kfm-NFL","mcod",30)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) Goto Qb"
^ZWCmcd("kfm-NFL","mcod",31)="     S FL=$P(SFL,""_"")"
^ZWCmcd("kfm-NFL","mcod",32)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),@vn="""""
^ZWCmcd("kfm-NFL","mcod",33)="     G Q"
^ZWCmcd("kfm-Q","mcod",34)=";*"
^ZWCmcd("kfm-Q","mcod",35)=";* Common Q"
^ZWCmcd("kfm-Q","mcod",36)="Q    Q:$Q Q Q:Q=""""  ; else fall thru Q not null"
^ZWCmcd("kfm-Qb","mcod",37)="Qb   D qd Q:$Q Q Q"
^ZWCmcd("kfm-SFL","mcod",16)=";*"
^ZWCmcd("kfm-SFL","mcod",17)="SFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("kfm-SFL","mcod",18)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) Goto Qb"
^ZWCmcd("kfm-SFL","mcod",19)="     S FL=$P(SFL,""_"")"
^ZWCmcd("kfm-SFL","mcod",20)="     I GFL'="""" S G=$P(GFL,""_"",2)"
^ZWCmcd("kfm-SFL","mcod",21)="     E  S G=$P(SFL,""_"",2)"
^ZWCmcd("kfm-SFL","mcod",22)="     I G="""" S Q=""Arg G GFL^""_$T(+0) Goto Qb"
^ZWCmcd("kfm-SFL","mcod",23)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) DO  I Q'="""" G Qb"
^ZWCmcd("kfm-SFL","mcod",24)="       .S val=$G(@vn) I val'="""" S @G@(vn)=val Q"
^ZWCmcd("kfm-SFL","mcod",25)="       .I $D(@vn)=0 S Q=""loc var ""_vn_"" is UNDEF."" Q"
^ZWCmcd("kfm-SFL","mcod",26)="       .I $D(@G@(vn))'="""" KILL @G@(vn) Q       "
^ZWCmcd("kfm-SFL","mcod",27)="     G Q"
^ZWCmcd("kfm-T","mcod",39)=";*"
^ZWCmcd("kfm-T","mcod",40)=";*  from ^qds  Test *FL variable Comment in situ, T^dws"
^ZWCmcd("kfm-T","mcod",41)=";*  Test VFL Comment inline vs actual var"
^ZWCmcd("kfm-T","mcod",42)="T(XXXX) NEW FLna,VFL,FL,G,C1,C2,M,D S D=$IO"
^ZWCmcd("kfm-T","mcod",43)="     S C1=$$^dvby() I $G(C2)="""" B"
^ZWCmcd("kfm-T","mcod",44)="     S FLna=$P(XXXX,""=""),VFL=$P(XXXX,""="",2,99)"
^ZWCmcd("kfm-T","mcod",45)="     I FLna["":"" S FLna=$P(XXXX,"":""),VFL=$P(XXXX,"":"",2,99)"
^ZWCmcd("kfm-T","mcod",46)="       I FLna="""" D b^dv("" Arg T^qds needs VFL="",""XXXX,FLna,C2"") Q"
^ZWCmcd("kfm-T","mcod",47)="     I $D(@FLna)=0 USE $P W:$X ! DO  W M,! Q"
^ZWCmcd("kfm-T","mcod",48)="       .S M=""in ""_C2_"",  T^qds,  VFL '""_FLna_""' is UNDEF D ^*IMG - """
^ZWCmcd("kfm-T","mcod",49)="     I @FLna'=VFL USE $P W:$X ! DO  "
^ZWCmcd("kfm-T","mcod",50)="       .W ""  "",FLna,"" in ^"",C2,""    does not match Comment XXXX -"",!"
^ZWCmcd("kfm-T","mcod",51)="       .W FLna,"":"",?8,@FLna,!"
^ZWCmcd("kfm-T","mcod",52)="       .W ""XXXX:"",?8,VFL,!"
^ZWCmcd("kfm-T","mcod",53)="     USE D  ; in case b^dv does USE $P"
^ZWCmcd("kfm-T","mcod",54)="     Q"
^ZWCmcd("kfm-T","mcod",55)="     "
^ZWCmcd("kfm-qd","mcod",38)="qd   D b^dv(""Err ^""_$T(+0),""Q,SFL,GFL,FL,G,vn,val"") Q"
^ZWCmcd("kfm-top","mcod",5)="top   BREAK  HALT  ; not top entry, yet ?"
^ZWCmcd("kfm-top","mcod",6)=";"
^ZWCmcd("kfm-top","mcod",7)=";"
^ZWCmcd("kfmUafl","mcod",1)="kfmUafl(PB) ;CKW/ESC i8apr23 gmsa./ rmgbFL3/ ;20230408-77;Audit ;; *F:: comments"
^ZWCmcd("kfmUafl","mcod",2)="; Replaces functionality of T^dws"
^ZWCmcd("kfmUafl","mcod",3)=";"
^ZWCmcd("kfmUafl","mcod",4)=";  Input is *FL values as locals, ie d ^**IMG as usual, then ^kfmUafl"
^ZWCmcd("kfmUafl","mcod",5)=";      vs VVL list or array of *FL"
^ZWCmcd("kfmUafl","mcod",6)=";      "
^ZWCmcd("kfmUafl","mcod",7)=";  Uses PB, scans all PB/r*/*.m  MRou   vs $ZRO   vs arg GB, ..."
^ZWCmcd("kfmUafl","mcod",8)=";    PB from $zro ?"
^ZWCmcd("kfmUafl-top","mcod",9)="top   I $G(PB)="""" D bug^dv Q"
^ZWCmcd("kfmUafl-top","mcod",10)="      S z=$ZPARSE(PB) I z="""" D b^dv(""Err PB ^""_$T(+0),""PB"") Q"
^ZWCmcd("kfmUafl-top","mcod",11)="      S z=$ZSEARCH(""^X"") ; reset"
^ZWCmcd("kfmUafl-top","mcod",12)="      S nsch=PB_""r*/*.m"""
^ZWCmcd("kfmUafl-top","mcod",13)="      F mi=0:1 S ru=$ZSEARCH(nsch) Q:ru=""""  DO  ;"
^ZWCmcd("kfmUafl-top","mcod",14)="        .S Q=$$^devRM(ru) I Q'="""" Q  ; : RM(), mrou"
^ZWCmcd("kfmUafl-top","mcod",15)="        .I 'RM Q ;No lines, empty mrou ?"
^ZWCmcd("kfmUafl-top","mcod",16)="        .F ri=1:1:RM S L=$G(RM(ri)) I $E(L,1,2)["";;"" DO  ;"
^ZWCmcd("kfmUafl-top","mcod",17)="           ..I L'[""FL:"" Q"
^ZWCmcd("kfmUafl-top","mcod",18)="           ..S fn=$P(L,"":""),fn=$P(fn,"";;"",2),vln=$P(L,"":"",2,99)"
^ZWCmcd("kfmUafl-top","mcod",19)="           ..S vfv=$G(@fn) I vfv="""" Q"
^ZWCmcd("kfmUafl-top","mcod",20)="           ..I vln'=vfv DO ;"
^ZWCmcd("kfmUafl-top","mcod",21)="               ...W:$X ! W ""^"",mrou,"" "",ri,""- *FL ~ "",fn,!"
^ZWCmcd("kfmUafl-top","mcod",22)="               ...W ""is:"",vln,!"
^ZWCmcd("kfmUafl-top","mcod",23)="               ...W ""vs:"",vfv,!!"
^ZWCmcd("kfmUafl-top","mcod",24)="               ...S Z=""vim ""_ru"
^ZWCmcd("kfmUafl-top","mcod",25)="               ...BREAK"
^ZWCmcd("kfmUafl-top","mcod",26)="      USE $P W:$X ! W ""^""_$T(+0)_""  Completed *FL Scan.  of "",nsch,!!"
^ZWCmcd("kfmUafl-top","mcod",27)="      Q"
^ZWCmcd("kfmUafl-top","mcod",28)=";*"
^ZWCmcd("kfm~1","mcod",1)="kfm ;CKW/ESC  i7dec22 umbr./  rmep2/ ;20221207-42;FIle man 2 - kw GFL/SFL, *IMG *FL"
^ZWCmcd("kfm~1","mcod",2)=";"
^ZWCmcd("kfm~1","mcod",3)=";"
^ZWCmcd("kfm~1","mcod",4)=";"
^ZWCmcd("kfm~1-GFL","mcod",8)="GFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("kfm~1-GFL","mcod",9)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) D bug^dv(Q,""SFL,GFL"") Goto Qb"
^ZWCmcd("kfm~1-GFL","mcod",10)="     S FL=$P(SFL,""_"")"
^ZWCmcd("kfm~1-GFL","mcod",11)="     I GFL'="""" S G=$P(GFL,""_"",2)"
^ZWCmcd("kfm~1-GFL","mcod",12)="     E  S G=$P(SFL,""_"",2)"
^ZWCmcd("kfm~1-GFL","mcod",13)="     I G="""" S Q=""Arg G GFL^""_$T(+0) D bug^dv(Q,""Q,SFL,GFL,G,FL"") Goto Qb"
^ZWCmcd("kfm~1-GFL","mcod",14)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),@vn=$G(@G@(vn))"
^ZWCmcd("kfm~1-GFL","mcod",15)="     G Q"
^ZWCmcd("kfm~1-NFL","mcod",28)=";*"
^ZWCmcd("kfm~1-NFL","mcod",29)="NFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("kfm~1-NFL","mcod",30)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) Goto Qb"
^ZWCmcd("kfm~1-NFL","mcod",31)="     S FL=$P(SFL,""_"")"
^ZWCmcd("kfm~1-NFL","mcod",32)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi),@vn="""""
^ZWCmcd("kfm~1-NFL","mcod",33)="     G Q"
^ZWCmcd("kfm~1-Q","mcod",34)=";*"
^ZWCmcd("kfm~1-Q","mcod",35)=";* Common Q"
^ZWCmcd("kfm~1-Q","mcod",36)="Q    Q:$Q Q Q:Q=""""  ; else fall thru Q not null"
^ZWCmcd("kfm~1-Qb","mcod",37)="Qb   D qd Q:$Q Q Q"
^ZWCmcd("kfm~1-SFL","mcod",16)=";*"
^ZWCmcd("kfm~1-SFL","mcod",17)="SFL(SFL,GFL)   NEW Q,FL,I,G,vn,vi,val S Q="""""
^ZWCmcd("kfm~1-SFL","mcod",18)="     S GFL=$G(GFL) I $G(SFL)="""" S Q=""Arg GFL^""_$T(+0) Goto Qb"
^ZWCmcd("kfm~1-SFL","mcod",19)="     S FL=$P(SFL,""_"")"
^ZWCmcd("kfm~1-SFL","mcod",20)="     I GFL'="""" S G=$P(GFL,""_"",2)"
^ZWCmcd("kfm~1-SFL","mcod",21)="     E  S G=$P(SFL,""_"",2)"
^ZWCmcd("kfm~1-SFL","mcod",22)="     I G="""" S Q=""Arg G GFL^""_$T(+0) Goto Qb"
^ZWCmcd("kfm~1-SFL","mcod",23)="     F vi=1:1:$L(FL,"","") S vn=$P(FL,"","",vi) DO  I Q'="""" G Qb"
^ZWCmcd("kfm~1-SFL","mcod",24)="       .S val=$G(@vn) I val'="""" S @G@(vn)=val Q"
^ZWCmcd("kfm~1-SFL","mcod",25)="       .I $D(@vn)=0 S Q=""loc var ""_vn_"" is UNDEF."" Q"
^ZWCmcd("kfm~1-SFL","mcod",26)="       .I $D(@G@(vn))'="""" KILL @G@(vn) Q       "
^ZWCmcd("kfm~1-SFL","mcod",27)="     G Q"
^ZWCmcd("kfm~1-T","mcod",39)=";*"
^ZWCmcd("kfm~1-T","mcod",40)=";*  from ^qds  Test *FL variable Comment in situ"
^ZWCmcd("kfm~1-T","mcod",41)=";*  Test VFL Comment inline vs actual var"
^ZWCmcd("kfm~1-T","mcod",42)="T(XXXX) NEW FLna,VFL,FL,G,C1,C2,M,D S D=$IO"
^ZWCmcd("kfm~1-T","mcod",43)="     S C1=$$^dvby() I $G(C2)="""" B"
^ZWCmcd("kfm~1-T","mcod",44)="     S FLna=$P(XXXX,""=""),VFL=$P(XXXX,""="",2,99)"
^ZWCmcd("kfm~1-T","mcod",45)="     I FLna["":"" S FLna=$P(XXXX,"":""),VFL=$P(XXXX,"":"",2,99)"
^ZWCmcd("kfm~1-T","mcod",46)="       I FLna="""" D b^dv("" Arg T^qds needs VFL="",""XXXX,FLna,C2"") Q"
^ZWCmcd("kfm~1-T","mcod",47)="     I $D(@FLna)=0 USE $P W:$X ! DO  W M,! Q"
^ZWCmcd("kfm~1-T","mcod",48)="       .S M=""in ""_C2_"",  T^qds,  VFL '""_FLna_""' is UNDEF D ^*IMG - """
^ZWCmcd("kfm~1-T","mcod",49)="     I @FLna'=VFL USE $P W:$X ! DO  "
^ZWCmcd("kfm~1-T","mcod",50)="       .W ""  "",FLna,"" in ^"",C2,""    does not match Comment XXXX -"",!"
^ZWCmcd("kfm~1-T","mcod",51)="       .W FLna,"":"",?8,@FLna,!"
^ZWCmcd("kfm~1-T","mcod",52)="       .W ""XXXX:"",?8,VFL,!"
^ZWCmcd("kfm~1-T","mcod",53)="     USE D  ; in case b^dv does USE $P"
^ZWCmcd("kfm~1-T","mcod",54)="     Q"
^ZWCmcd("kfm~1-T","mcod",55)="     "
^ZWCmcd("kfm~1-qd","mcod",38)="qd   D b^dv(""Err ^""_$T(+0),""Q,SFL,GFL,FL,G,vn,val"") Q"
^ZWCmcd("kfm~1-top","mcod",5)="top   BREAK  HALT  ; not top entry, yet ?"
^ZWCmcd("kfm~1-top","mcod",6)=";"
^ZWCmcd("kfm~1-top","mcod",7)=";"
^ZWCmcd("mwPET","mcod",1)="mwPET(cod) ;CKW/ESC i12oct22 umbr./ rmw1/ ;20221012-98;Parse mumps with Earley table"
^ZWCmcd("mwPET","mcod",2)=";"
^ZWCmcd("mwPET","mcod",3)=";"
^ZWCmcd("mwPET","mcod",4)=";"
^ZWCmcd("mwPET-IPT","mcod",11)=";*  :  PT(sti,rui)    ptFL"
^ZWCmcd("mwPET-IPT","mcod",12)="IPT    S ptFL=""rudi,rudn"""
^ZWCmcd("mwPET-IPT","mcod",13)="       ;..."
^ZWCmcd("mwPET-IPT","mcod",14)="       Q"
^ZWCmcd("mwPET-IPT","mcod",15)=";;sti  State number 0:1"
^ZWCmcd("mwPET-IPT","mcod",16)=";;rudn Dot position"
^ZWCmcd("mwPET-IPT","mcod",17)=";;ruist  input start"
^ZWCmcd("mwPET-IPT","mcod",18)=";;ruiend input end"
^ZWCmcd("mwPET-IPT","mcod",19)=";;"
^ZWCmcd("mwPET-IPT","mcod",20)=";Each rule is a list of entities"
^ZWCmcd("mwPET-IPT","mcod",21)=";Rules come from grammar"
^ZWCmcd("mwPET-IPT","mcod",22)=";left-side/rule name"
^ZWCmcd("mwPET-IPT","mcod",23)="; right side is list of rules or lex entities"
^ZWCmcd("mwPET-IPT","mcod",24)=";"
^ZWCmcd("mwPET-top","mcod",5)="top    D ^mwIGM ; : MG()  mumps grammar"
^ZWCmcd("mwPET-top","mcod",6)="       D IPT  ; parse table"
^ZWCmcd("mwPET-top","mcod",7)="       ; D lex(cod) ; : LX(pi)"
^ZWCmcd("mwPET-top","mcod",8)="       ;D PAR  ; LX(pi) : ET(), Ptr"
^ZWCmcd("mwPET-top","mcod",9)="       ;D Dtr"
^ZWCmcd("mwPET-top","mcod",10)="       Q"
^ZWCmcd("tpIpg","mcod",1)="tpIpg ;CKW/ESC  i21Oct15  ; 20151021-01 ; Structured pageNames Xsq TP HGen"
^ZWCmcd("tpIpg","mcod",2)="  ;"
^ZWCmcd("tpIpg","mcod",3)="  ;"
^ZWCmcd("tpIpg-trmG","mcod",6)="trmG(tool,trm,sub)"
^ZWCmcd("tpIpg-trmG","mcod",7)=""
^ZWCmcd("tpIpg-trmX","mcod",4)="trmX(tool,trm,sub)   "
^ZWCmcd("tpIpg-trmX","mcod",5)=""


